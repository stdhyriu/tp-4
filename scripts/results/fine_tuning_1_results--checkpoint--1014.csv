db_id,query,question,table_names,response,model_output
concert_singer,SELECT count(*) FROM singer,How many singers do we have?,"stadium, singer, concert, singer in concert","[(6,)]",SELECT count(*) FROM singer
concert_singer,SELECT count(*) FROM singer,What is the total number of singers?,"stadium, singer, concert, singer in concert","[(6,)]",SELECT count(*) FROM singer
concert_singer,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","Show name, country, age for all singers ordered by age from the oldest to the youngest.","stadium, singer, concert, singer in concert","[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]","SELECT singer_name,  singer_country,  singer_age FROM singer ORDER BY singer_age DESC"
concert_singer,"SELECT name ,  country ,  age FROM singer ORDER BY age DESC","What are the names, countries, and ages for every singer in descending order of age?","stadium, singer, concert, singer in concert","[('Joe Sharp', 'Netherlands', 52), ('John Nizinik', 'France', 43), ('Rose White', 'France', 41), ('Timbaland', 'United States', 32), ('Justin Brown', 'France', 29), ('Tribal King', 'France', 25)]","SELECT singer_name,  country,  age FROM singer ORDER BY age DESC"
concert_singer,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","What is the average, minimum, and maximum age of all singers from France?","stadium, singer, concert, singer in concert","[(34.5, 25, 43)]","SELECT avg(T1.age),  min(T1.age),  max(T1.age) FROM singer AS T1 JOIN concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.country  =  'France'"
concert_singer,"SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'","What is the average, minimum, and maximum age for all French singers?","stadium, singer, concert, singer in concert","[(34.5, 25, 43)]","SELECT avg(T1.age),  min(T1.age),  max(T1.age) FROM singer AS T1 JOIN concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.country  =  'France'"
concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",Show the name and the release year of the song by the youngest singer.,"stadium, singer, concert, singer in concert","[('Love', '2016')]","SELECT song_name,  released_year FROM singer ORDER BY age LIMIT 1"
concert_singer,"SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1",What are the names and release years for all the songs of the youngest singer?,"stadium, singer, concert, singer in concert","[('Love', '2016')]","SELECT T3.song_name,  T3.releasedate FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.age  =  (SELECT min(age) FROM singer)<|eot_id|>"
concert_singer,SELECT DISTINCT country FROM singer WHERE age  >  20,What are all distinct countries where singers above age 20 are from?,"stadium, singer, concert, singer in concert","[('Netherlands',), ('United States',), ('France',)]",SELECT DISTINCT country FROM singer WHERE age  >  20
concert_singer,SELECT DISTINCT country FROM singer WHERE age  >  20,What are  the different countries with singers above age 20?,"stadium, singer, concert, singer in concert","[('Netherlands',), ('United States',), ('France',)]",SELECT DISTINCT country FROM singer WHERE age  >  20
concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",Show all countries and the number of singers in each country.,"stadium, singer, concert, singer in concert","[('France', 4), ('Netherlands', 1), ('United States', 1)]","SELECT country,  count(*) FROM singer GROUP BY country"
concert_singer,"SELECT country ,  count(*) FROM singer GROUP BY country",How many singers are from each country?,"stadium, singer, concert, singer in concert","[('France', 4), ('Netherlands', 1), ('United States', 1)]","SELECT country,  count(*) FROM singer GROUP BY country"
concert_singer,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),List all song names by singers above the average age.,"stadium, singer, concert, singer in concert","[('You',), ('Sun',), ('Gentleman',)]",SELECT T3.song_name FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T2.concert_id  =  T3.concert_id WHERE T1.age  >  (SELECT avg(age) FROM singer)<|eot_id|>
concert_singer,SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer),What are all the song names by singers who are older than average?,"stadium, singer, concert, singer in concert","[('You',), ('Sun',), ('Gentleman',)]",SELECT T3.song_name FROM singer AS T1 JOIN concert AS T2 ON T1.singer_id  =  T2.singer_id JOIN singer_in_concert AS T3 ON T3.concert_id  =  T2.concert_id WHERE T1.age  >  (SELECT avg(age) FROM singer)<|eot_id|>
concert_singer,"select max(capacity), average from stadium",What is the maximum capacity and the average of all stadiums ?,"stadium, singer, concert, singer in concert","[(52500, 730)]","SELECT max(capacity),  avg(capacity) FROM stadium"
concert_singer,"select avg(capacity) ,  max(capacity) from stadium",What is the average and maximum capacities for all stadiums ?,"stadium, singer, concert, singer in concert","[(10621.666666666666, 52500)]","SELECT avg(capacity),  max(capacity) FROM stadium"
concert_singer,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",What is the name and capacity for the stadium with highest average attendance?,"stadium, singer, concert, singer in concert","[(""Stark's Park"", 10104)]","SELECT T1.stadium_name,  T1.attendance FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id ORDER BY avg(T2.attendance) DESC LIMIT 1"
concert_singer,"SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1",What is the name and capacity for the stadium with the highest average attendance?,"stadium, singer, concert, singer in concert","[(""Stark's Park"", 10104)]","SELECT T1.stadium_name,  T1.attendance_capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id ORDER BY avg(T2.attendance) DESC LIMIT 1"
concert_singer,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,How many concerts are there in year 2014 or 2015?,"stadium, singer, concert, singer in concert","[(6,)]",SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
concert_singer,SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015,How many concerts occurred in 2014 or 2015?,"stadium, singer, concert, singer in concert","[(6,)]",SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
concert_singer,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id",Show the stadium name and the number of concerts in each stadium.,"stadium, singer, concert, singer in concert","[(""Stark's Park"", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]","SELECT T1.name,  count(*) FROM stadium AS T1 JOIN concert AS T2 ON T2.stadium_id  =  T1.id GROUP BY T1.id"
concert_singer,"SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id","For each stadium, how many concerts play there?","stadium, singer, concert, singer in concert","[(""Stark's Park"", 1), ('Glebe Park', 1), ('Somerset Park', 2), ('Recreation Park', 1), ('Balmoor', 1)]","SELECT T1.id,  count(*) FROM stadium AS T1 JOIN concert AS T2 ON T2.stadium_id  =  T1.id GROUP BY T1.id"
concert_singer,"SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1",Show the stadium name and capacity with most number of concerts in year 2014 or after.,"stadium, singer, concert, singer in concert","[('Somerset Park', 11998)]","SELECT T2.stadium_name,  T2.total_capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014 OR T1.year  >  2014 GROUP BY T2.stadium_name ORDER BY count(*) DESC LIMIT 1"
concert_singer,"select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1",What is the name and capacity of the stadium with the most concerts after 2013 ?,"stadium, singer, concert, singer in concert","[('Somerset Park', 11998)]","SELECT T1.stadium_name,  T1.capacity FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T2.year  >  2013 GROUP BY T1.stadium_id ORDER BY count(*) DESC LIMIT 1"
concert_singer,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,Which year has most number of concerts?,"stadium, singer, concert, singer in concert","[('2015',)]",SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
concert_singer,SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1,What is the year that had the most concerts?,"stadium, singer, concert, singer in concert","[('2015',)]",SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
concert_singer,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),Show the stadium names without any concert.,"stadium, singer, concert, singer in concert","[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]",SELECT T2.stadium_name FROM singer_in_concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T2.stadium_name EXCEPT SELECT T2.stadium_name FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id
concert_singer,SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert),What are the names of the stadiums without any concerts?,"stadium, singer, concert, singer in concert","[('Bayview Stadium',), ('Hampden Park',), ('Forthbank Stadium',), ('Gayfield Park',)]",SELECT T1.stadium_name FROM stadium AS T1 JOIN concert AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id HAVING count(*)  =  0
concert_singer,SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30,Show countries where a singer above age 40 and a singer below 30 are from.,"stadium, singer, concert, singer in concert","[('France',)]",SELECT T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.age  >  40 INTERSECT SELECT T1.country FROM singer AS T1 JOIN singer_in_concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.age  <  30<|eot_id|>
concert_singer,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,Show names for all stadiums except for stadiums having a concert in year 2014.,"stadium, singer, concert, singer in concert","[('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]",SELECT T2.stadium_name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year!= 2014
concert_singer,SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014,What are the names of all stadiums that did not have a concert in 2014?,"stadium, singer, concert, singer in concert","[('Balmoor',), ('Bayview Stadium',), ('Forthbank Stadium',), ('Gayfield Park',), ('Hampden Park',), ('Recreation Park',)]",SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE YEAR  =  2014)
concert_singer,"SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id",Show the name and theme for all concerts and the number of singers in each concert.,"stadium, singer, concert, singer in concert","[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]","SELECT T3.concert_name,  T3.theme,  COUNT(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id GROUP BY T3.concert_name"
concert_singer,"select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id","What are the names , themes , and number of singers for every concert ?","stadium, singer, concert, singer in concert","[('Auditions', 'Free choice', 3), ('Super bootcamp', 'Free choice 2', 2), ('Home Visits', 'Bleeding Love', 1), ('Week 1', 'Wide Awake', 1), ('Week 1', 'Happy Tonight', 2), ('Week 2', 'Party All Night', 1)]","SELECT T3.concert_name,  T3.theme,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T1.singer_id  =  T3.singer_id GROUP BY T2.concert_id"
concert_singer,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",List singer names and number of concerts for each singer.,"stadium, singer, concert, singer in concert","[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]","SELECT T3.singer_name,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T1.singer_id  =  T3.singer_id GROUP BY T3.singer_name"
concert_singer,"SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id",What are the names of the singers and number of concerts for each person?,"stadium, singer, concert, singer in concert","[('Timbaland', 2), ('Justin Brown', 3), ('Rose White', 1), ('John Nizinik', 2), ('Tribal King', 2)]","SELECT T3.singer_name,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T1.singer_id  =  T3.singer_id GROUP BY T3.singer_name"
concert_singer,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,List all singer names in concerts in year 2014.,"stadium, singer, concert, singer in concert","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]",SELECT T3.singer_name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014
concert_singer,SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014,What are the names of the singers who performed in a concert in 2014?,"stadium, singer, concert, singer in concert","[('Timbaland',), ('Justin Brown',), ('John Nizinik',), ('Justin Brown',), ('Tribal King',), ('Rose White',)]",SELECT T3.singer_name FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN singer AS T3 ON T2.singer_id  =  T3.singer_id WHERE T1.year  =  2014
concert_singer,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",what is the name and nation of the singer who have a song having 'Hey' in its name?,"stadium, singer, concert, singer in concert","[('Justin Brown', 'France')]","SELECT T2.singer_name,  T2.nation FROM singer AS T1 JOIN concert AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.song_name LIKE '%Hey%'"
concert_singer,"SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'",What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?,"stadium, singer, concert, singer in concert","[('Justin Brown', 'France')]","SELECT T2.singer_name,  T2.country_of_origin FROM concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.song LIKE '%Hey%'"
concert_singer,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.,"stadium, singer, concert, singer in concert","[('Somerset Park', 'Ayr United')]","SELECT T2.stadium_name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T2.stadium_id  =  T1.stadium_id WHERE T1.year  =  2014 INTERSECT SELECT T2.stadium_name,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T2.stadium_id  =  T1.stadium_id WHERE T1.year  =  2015<|eot_id|>"
concert_singer,"SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015",What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?,"stadium, singer, concert, singer in concert","[('Somerset Park', 'Ayr United')]","SELECT T1.stadium_name,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T2.stadium_id  =  T1.stadium_id WHERE T2.year  =  2014 INTERSECT SELECT T1.stadium_name,  T1.location FROM stadium AS T1 JOIN concert AS T2 ON T2.stadium_id  =  T1.stadium_id WHERE T2.year  =  2015<|eot_id|>"
concert_singer,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),Find the number of concerts happened in the stadium with the highest capacity .,"stadium, singer, concert, singer in concert","[(0,)]",SELECT count(*) FROM stadium AS T1 JOIN concert AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id ORDER BY T1.capacity DESC LIMIT 1
concert_singer,select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1),What are the number of concerts that occurred in the stadium with the largest capacity ?,"stadium, singer, concert, singer in concert","[(0,)]",SELECT count(*) FROM concert AS T1 JOIN singer_in_concert AS T2 ON T1.concert_id  =  T2.concert_id JOIN stadium AS T3 ON T3.stadium_id  =  T2.stadium_id ORDER BY T3.stadium_capacity DESC LIMIT 1
pets_1,SELECT count(*) FROM pets WHERE weight  >  10,Find the number of pets whose weight is heavier than 10.,"student, has pet, pets","[(2,)]",SELECT count(*) FROM Pets WHERE weight  >  10
pets_1,SELECT count(*) FROM pets WHERE weight  >  10,How many pets have a greater weight than 10?,"student, has pet, pets","[(2,)]",SELECT count(*) FROM pets WHERE weight  >  10
pets_1,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,Find the weight of the youngest dog.,"student, has pet, pets","[(9.3,)]",SELECT weight FROM Pets WHERE pet_type  =  'dog' AND age  =  (SELECT min(age) FROM Pets WHERE pet_type  =  'dog')
pets_1,SELECT weight FROM pets ORDER BY pet_age LIMIT 1,How much does the youngest dog weigh?,"student, has pet, pets","[(9.3,)]","SELECT T3.weight FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.Pet_ID  =  T3.Pet_ID WHERE T3.Pet_Type  =  ""dog"" AND T3.age  =  (SELECT min(age) FROM Pets WHERE Pet_Type  =  ""dog"")<|eot_id|>"
pets_1,"SELECT max(weight) ,  petType FROM pets GROUP BY petType",Find the maximum weight for each type of pet. List the maximum weight and pet type.,"student, has pet, pets","[(12.0, 'cat'), (13.4, 'dog')]","SELECT max_weight,  pet_type FROM Pets GROUP BY pet_type"
pets_1,"SELECT max(weight) ,  petType FROM pets GROUP BY petType",List the maximum weight and type for each type of pet.,"student, has pet, pets","[(12.0, 'cat'), (13.4, 'dog')]","SELECT max(weight),  pet_type FROM Pets GROUP BY pet_type"
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,Find number of pets owned by students who are older than 20.,"student, has pet, pets","[(0,)]",SELECT count(*) FROM has_pet WHERE age  >  20
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20,How many pets are owned by students that have an age greater than 20?,"student, has pet, pets","[(0,)]",SELECT count(*) FROM has_pet WHERE T1.age  >  20
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',Find the number of dog pets that are raised by female students (with sex F).,"student, has pet, pets","[(2,)]","SELECT count(*) FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T1.sex  =  ""F"" AND T3.Pet_name  =  ""dog"""
pets_1,SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog',How many dog pets are raised by female students?,"student, has pet, pets","[(2,)]","SELECT count(*) FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T1.sex  =  ""F"" AND T3.Pet_name  =  ""dog"""
pets_1,SELECT count(DISTINCT pettype) FROM pets,Find the number of distinct type of pets.,"student, has pet, pets","[(2,)]",SELECT count(DISTINCT pet_type) FROM pets
pets_1,SELECT count(DISTINCT pettype) FROM pets,How many different types of pet are there?,"student, has pet, pets","[(2,)]",SELECT count(DISTINCT pet_type) FROM pets
pets_1,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',Find the first name of students who have cat or dog pet.,"student, has pet, pets","[('Linda',), ('Tracy',)]",SELECT T1.student_first_name FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.Pet_Type  =  'Cat' OR T3.Pet_Type  =  'Dog'
pets_1,SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog',What are the first names of every student who has a cat or dog as a pet?,"student, has pet, pets","[('Linda',), ('Tracy',)]",SELECT T1.student_first_name FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.student_id  =  T2.student_id JOIN Pets AS T3 ON T3.pet_id  =  T2.pet_id WHERE T3.pet_type  =  'Cat' OR T3.pet_type  =  'Dog'
pets_1,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",Find the major and age of students who do not have a cat pet.,"student, has pet, pets","[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]","SELECT major,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pets WHERE Pet_name  =  ""Cat"")"
pets_1,"SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')","What major is every student who does not own a cat as a pet, and also how old are they?","student, has pet, pets","[(600, 19), (600, 21), (600, 20), (600, 26), (600, 18), (600, 18), (600, 20), (600, 19), (600, 17), (600, 22), (600, 20), (600, 18), (600, 16), (600, 17), (600, 27), (600, 20), (600, 18), (520, 22), (520, 19), (540, 17), (520, 20), (540, 18), (520, 18), (520, 19), (520, 18), (550, 20), (100, 17), (550, 21), (550, 20), (550, 20), (550, 18), (50, 18), (50, 26)]","SELECT major,  age FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pets WHERE Pet_name  =  ""Cat"")"
pets_1,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',Find the id of students who do not have a cat pet.,"student, has pet, pets","[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]","SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pets WHERE Pet_name  =  ""Cat"""
pets_1,SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat',What are the ids of the students who do not own cats as pets?,"student, has pet, pets","[(1002,), (1003,), (1004,), (1005,), (1006,), (1007,), (1008,), (1009,), (1010,), (1011,), (1012,), (1014,), (1015,), (1016,), (1017,), (1018,), (1019,), (1020,), (1021,), (1022,), (1023,), (1024,), (1025,), (1026,), (1027,), (1028,), (1029,), (1030,), (1031,), (1032,), (1033,), (1034,), (1035,)]",SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_Pets WHERE Pet_name  =  'cat'
pets_1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",Find the first name and age of students who have a dog but do not have a cat as a pet.,"student, has pet, pets","[('Tracy', 19), ('Tracy', 19)]","SELECT T1.student_first_name,  T1.student_age FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.PetID WHERE T3.Pet_Type  =  ""dog"" AND T2.Pet_ID NOT IN (SELECT T2.Pet_ID FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.StuID  =  T2.StuID JOIN Pets AS T3 ON T2.PetID  =  T3.Pet_ID WHERE T3.Pet_Type  =  ""cat"")<|eot_id|>"
pets_1,"SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')",What is the first name of every student who has a dog but does not have a cat?,"student, has pet, pets","[('Tracy', 19), ('Tracy', 19)]","SELECT DISTINCT T1.student_first_name FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.Pet_ID  =  T3.Pet_ID WHERE T3.Pet_Type  =  ""dog"" AND T2.Pet_ID NOT IN (SELECT T2.Pet_ID FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.stuid  =  T2.stuid JOIN Pets AS T3 ON T2.Pet_ID  =  T3.Pet_ID WHERE T3.Pet_Type  =  ""cat"")"
pets_1,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1",Find the type and weight of the youngest pet.,"student, has pet, pets","[('dog', 9.3)]","SELECT T2.pet_type,  T2.pet_weight FROM Has_Pets AS T1 JOIN Pets AS T2 ON T1.pet_id  =  T2.pet_id WHERE T1.student_id  =  (SELECT T1.student_id FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.student_id  =  T2.student_id WHERE T2.pet_id  =  (SELECT T1.pet_id FROM Pets AS T1 JOIN Has_Pets AS T2 ON T1.pet_id  =  T2.pet_id ORDER BY T2.age LIMIT 1) ORDER BY T1.age LIMIT 1)<|eot_id|>"
pets_1,"SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1","What type of pet is the youngest animal, and how much does it weigh?","student, has pet, pets","[('dog', 9.3)]","SELECT T2.pet_type,  T2.pet_weight FROM has_pet AS T1 JOIN pets AS T2 ON T1.pet_id  =  T2.pet_id WHERE T1.student_id  =  (SELECT min(age) FROM student)"
pets_1,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",Find the id and weight of all pets whose age is older than 1.,"student, has pet, pets","[(2001, 12.0), (2002, 13.4)]","SELECT T1.pet_id,  T1.pet_weight FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.age  >  1"
pets_1,"SELECT petid ,  weight FROM pets WHERE pet_age  >  1",What is the id and weight of every pet who is older than 1?,"student, has pet, pets","[(2001, 12.0), (2002, 13.4)]","SELECT T1.pet_id,  T1.weight FROM Pets AS T1 JOIN Has_Pet AS T2 ON T1.pet_id  =  T2.pet_id WHERE T2.student_id IN (SELECT student_id FROM Student WHERE age  >  1)"
pets_1,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",Find the average and maximum age for each type of pet.,"student, has pet, pets","[(3.0, 3, 'cat'), (1.5, 2, 'dog')]","SELECT avg(age),  max(age),  pet_type FROM Pets GROUP BY pet_type"
pets_1,"SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype",What is the average and maximum age for each pet type?,"student, has pet, pets","[(3.0, 3, 'cat'), (1.5, 2, 'dog')]","SELECT avg(age),  max(age),  pet_type FROM pets GROUP BY pet_type"
pets_1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",Find the average weight for each pet type.,"student, has pet, pets","[(12.0, 'cat'), (11.350000000000001, 'dog')]","SELECT avg(weight),  kind FROM Pets GROUP BY kind"
pets_1,"SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype",What is the average weight for each type of pet?,"student, has pet, pets","[(12.0, 'cat'), (11.350000000000001, 'dog')]","SELECT avg(weight),  kind FROM Pets GROUP BY kind"
pets_1,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",Find the first name and age of students who have a pet.,"student, has pet, pets","[('Linda', 18), ('Tracy', 19)]","SELECT T1.student_first_name,  T1.student_age FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.Student_ID  =  T2.Student_ID"
pets_1,"SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid",What are the different first names and ages of the students who do have pets?,"student, has pet, pets","[('Linda', 18), ('Tracy', 19)]","SELECT DISTINCT T1.student_first_name,  T1.student_age FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.Student_ID  =  T2.Student_ID"
pets_1,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',Find the id of the pet owned by student whose last name is ‘Smith’.,"student, has pet, pets","[(2001,)]",SELECT T3.pet_id FROM has_pet AS T1 JOIN student AS T2 ON T1.student_id  =  T2.stuid JOIN pets AS T3 ON T1.pet_id  =  T3.pet_id WHERE T2.lname  =  'Smith'
pets_1,SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith',What is the id of the pet owned by the student whose last name is 'Smith'?,"student, has pet, pets","[(2001,)]",SELECT T2.Pet_ID FROM Has_Pet AS T1 JOIN Pets AS T2 ON T1.Pet_ID  =  T2.Pet_ID JOIN Student AS T3 ON T1.StuID  =  T3.StuID WHERE T3.LName  =  'Smith'
pets_1,"SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid",Find the number of pets for each student who has any pet and student id.,"student, has pet, pets","[(1, 1001), (2, 1002)]","SELECT count(*),  StuID FROM Has_Pets GROUP BY StuID"
pets_1,"select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid","For students who have pets , how many pets does each student have ? list their ids instead of names .","student, has pet, pets","[(1, 1001), (2, 1002)]","SELECT count(*),  StuID FROM Has_Pets GROUP BY StuID"
pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",Find the first name and gender of student who have more than one pet.,"student, has pet, pets","[('Tracy', 'F')]","SELECT T1.student_fname,  T1.student_gender FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >  1"
pets_1,"SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1",What is the first name and gender of the all the students who have more than one pet?,"student, has pet, pets","[('Tracy', 'F')]","SELECT T1.student_fname,  T1.student_gender FROM Student AS T1 JOIN Has_Pets AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  >  1"
pets_1,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',Find the last name of the student who has a cat that is age 3.,"student, has pet, pets","[('Smith',)]",SELECT T1.student_lname FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.student_id  =  T2.student_id JOIN Pets AS T3 ON T2.pet_id  =  T3.pet_id WHERE T3.pet_name  =  'Cat' AND T3.age  =  3<|eot_id|>
pets_1,SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat',What is the last name of the student who has a cat that is 3 years old?,"student, has pet, pets","[('Smith',)]","SELECT T3.student_lname FROM has_pet AS T1 JOIN pets AS T2 ON T1.pet_id  =  T2.pet_id JOIN student AS T3 ON T1.student_id  =  T3.student_id WHERE T2.pet_name  =  ""Cat"" AND T2.age  =  3"
pets_1,select avg(age) from student where stuid not in (select stuid from has_pet),Find the average age of students who do not have any pet .,"student, has pet, pets","[(19.625,)]",SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pets)
pets_1,select avg(age) from student where stuid not in (select stuid from has_pet),What is the average age for all students who do not own any pets ?,"student, has pet, pets","[(19.625,)]",SELECT avg(age) FROM Student WHERE StuID NOT IN (SELECT StuID FROM Has_Pets)
car_1,SELECT count(*) FROM CONTINENTS;,How many continents are there?,"continents, countries, car makers, model list, car names, cars data","[(5,)]",SELECT count(*) FROM continents
car_1,SELECT count(*) FROM CONTINENTS;,What is the number of continents?,"continents, countries, car makers, model list, car names, cars data","[(5,)]",SELECT count(*) FROM continents
car_1,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","How many countries does each continent have? List the continent id, continent name and the number of countries.","continents, countries, car makers, model list, car names, cars data","[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]","SELECT T1.continent_id,  T1.continent_name,  count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_id  =  T2.continent_id GROUP BY T1.continent_id"
car_1,"SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;","For each continent, list its id, name, and how many countries it has?","continents, countries, car makers, model list, car names, cars data","[(1, 'america', 3), (2, 'europe', 6), (3, 'asia', 2), (4, 'africa', 2), (5, 'australia', 2)]","SELECT T1.continent_id,  T1.continent_name,  count(*) FROM continents AS T1 GROUP BY T1.continent_id"
car_1,SELECT count(*) FROM COUNTRIES;,How many countries are listed?,"continents, countries, car makers, model list, car names, cars data","[(15,)]",SELECT count(*) FROM countries
car_1,SELECT count(*) FROM COUNTRIES;,How many countries exist?,"continents, countries, car makers, model list, car names, cars data","[(15,)]",SELECT count(*) FROM countries
car_1,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","How many models does each car maker produce? List maker full name, id and the number.","continents, countries, car makers, model list, car names, cars data","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]","SELECT T1.car_maker_full_name,  count(*),  T1.car_maker_id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id"
car_1,"SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;","What is the full name of each car maker, along with its id and how many models it produces?","continents, countries, car makers, model list, car names, cars data","[('American Motor Company', 1, 1), ('Volkswagen', 2, 2), ('BMW', 3, 1), ('General Motors', 4, 5), ('Ford Motor Company', 5, 3), ('Chrysler', 6, 4), ('Citroen', 7, 1), ('Nissan Motors', 8, 2), ('Fiat', 9, 1), ('Honda', 11, 1), ('Mazda', 12, 1), ('Daimler Benz', 13, 2), ('Opel', 14, 1), ('Peugeaut', 15, 1), ('Renault', 16, 1), ('Saab', 17, 1), ('Subaru', 18, 1), ('Toyota', 19, 2), ('Triumph', 20, 1), ('Volvo', 21, 1), ('Kia Motors', 22, 1), ('Hyundai', 23, 1)]","SELECT T1.car_maker_id,  T1.car_maker_name,  count(*),  T2.model_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id<|eot_id|>"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,Which model of the car has the minimum horsepower?,"continents, countries, car makers, model list, car names, cars data","[('amc',)]",SELECT T1.model_name FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id GROUP BY T1.model_name ORDER BY min(T2.Horse_Power) LIMIT 1
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;,What is the model of the car with the smallest amount of horsepower?,"continents, countries, car makers, model list, car names, cars data","[('amc',)]",SELECT T1.model_name FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id ORDER BY T2.horsepower ASC LIMIT 1
car_1,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),Find the model of the car whose weight is below the average weight.,"continents, countries, car makers, model list, car names, cars data","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]",SELECT model_name FROM model_list WHERE weight_in_kg  <  (SELECT avg(weight_in_kg) FROM cars_data)
car_1,SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA),What is the model for the car with a weight smaller than the average?,"continents, countries, car makers, model list, car names, cars data","[('toyota',), ('plymouth',), ('amc',), ('ford',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('amc',), ('datsun',), ('chevrolet',), ('toyota',), ('ford',), ('volkswagen',), ('amc',), ('amc',), ('chevrolet',), ('mercury',), ('opel',), ('peugeot',), ('fiat',), ('toyota',), ('datsun',), ('volkswagen',), ('plymouth',), ('toyota',), ('dodge',), ('volkswagen',), ('chevrolet',), ('ford',), ('mazda',), ('volvo',), ('volkswagen',), ('peugeot',), ('renault',), ('ford',), ('datsun',), ('toyota',), ('dodge',), ('toyota',), ('amc',), ('plymouth',), ('volkswagen',), ('amc',), ('toyota',), ('chevrolet',), ('datsun',), ('mazda',), ('ford',), ('mercury',), ('fiat',), ('fiat',), ('opel',), ('audi',), ('volvo',), ('saab',), ('toyota',), ('ford',), ('amc',), ('datsun',), ('ford',), ('toyota',), ('chevrolet',), ('audi',), ('volkswagen',), ('opel',), ('toyota',), ('datsun',), ('dodge',), ('fiat',), ('fiat',), ('honda',), ('subaru',), ('fiat',), ('toyota',), ('ford',), ('amc',), ('pontiac',), ('toyota',), ('volkswagen',), ('datsun',), ('volkswagen',), ('audi',), ('peugeot',), ('volvo',), ('saab',), ('honda',), ('fiat',), ('opel',), ('capri',), ('dodge',), ('renault',), ('chevrolet',), ('chevrolet',), ('volkswagen',), ('honda',), ('volkswagen',), ('datsun',), ('toyota',), ('ford',), ('toyota',), ('honda',), ('buick',), ('renault',), ('plymouth',), ('datsun',), ('volkswagen',), ('pontiac',), ('toyota',), ('ford',), ('chevrolet',), ('dodge',), ('subaru',), ('volkswagen',), ('datsun',), ('bmw',), ('mazda',), ('volkswagen',), ('ford',), ('mazda',), ('datsun',), ('honda',), ('ford',), ('ford',), ('chevrolet',), ('toyota',), ('datsun',), ('dodge',), ('toyota',), ('plymouth',), ('oldsmobile',), ('datsun',), ('audi',), ('saab',), ('volkswagen',), ('honda',), ('ford',), ('volkswagen',), ('mazda',), ('dodge',), ('amc',), ('plymouth',), ('plymouth',), ('datsun',), ('fiat',), ('buick',), ('chevrolet',), ('oldsmobile',), ('pontiac',), ('volkswagen',), ('toyota',), ('chevrolet',), ('datsun',), ('chevrolet',), ('ford',), ('audi',), ('toyota',), ('mazda',), ('datsun',), ('toyota',), ('mazda',), ('dodge',), ('datsun',), ('volkswagen',), ('volkswagen',), ('audi',), ('honda',), ('renault',), ('subaru',), (' volkswagen',), ('datsun',), ('mazda',), ('triumph',), ('ford',), ('honda',), ('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('plymouth',), ('toyota',), ('plymouth',), ('honda',), ('subaru',), ('datsun',), ('toyota',), ('mazda',), ('plymouth',), ('ford',), ('ford',), ('volkswagen',), ('renault',), ('honda',), ('toyota',), ('datsun',), ('mazda',), ('saab',), ('toyota',), ('datsun',), ('chevrolet',), ('chevrolet',), ('chevrolet',), ('pontiac',), ('dodge',), ('pontiac',), ('ford',), ('volkswagen',), ('mazda',), ('mazda',), ('plymouth',), ('mercury',), ('nissan',), ('honda',), ('toyota',), ('honda',), ('honda',), ('datsun',), ('buick',), ('chrysler',), ('ford',), ('toyota',), ('dodge',), ('chevrolet',), ('ford',), ('volkswagen',), ('dodge',), ('ford',), ('chevrolet',)]",SELECT model_name FROM model_list WHERE vehicle_weight  <  (SELECT avg(vehicle_weight) FROM cars_data)
car_1,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,Find the name of the makers that produced some cars in the year of 1970?,"continents, countries, car makers, model list, car names, cars data","[('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]",SELECT T2.car_maker_name FROM cars_data AS T1 JOIN car_makers AS T2 ON T2.car_maker_id  =  T1.car_maker_id WHERE T1.year  =  1970
car_1,SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';,What is the name of the different car makers who produced a car in 1970?,"continents, countries, car makers, model list, car names, cars data","[('gm',), ('chrysler',), ('amc',), ('ford',), ('citroen',), ('toyota',), ('nissan',), ('volkswagen',), ('peugeaut',), ('saab',), ('bmw',)]",SELECT DISTINCT T1.car_maker FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T2.year_of_manufacture  =  1970
car_1,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",Find the make and production time of the cars that were produced in the earliest year?,"continents, countries, car makers, model list, car names, cars data","[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]","SELECT T1.car_make,  T1.produced_since FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.car_maker_id  =  T2.car_maker_id ORDER BY T2.produced_since ASC LIMIT 1"
car_1,"SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);",What is the maker of the carr produced in the earliest year and what year was it?,"continents, countries, car makers, model list, car names, cars data","[('chevrolet chevelle malibu', 1970), ('buick skylark 320', 1970), ('plymouth satellite', 1970), ('amc rebel sst', 1970), ('ford torino', 1970), ('ford galaxie 500', 1970), ('chevrolet impala', 1970), ('plymouth fury iii', 1970), ('pontiac catalina', 1970), ('amc ambassador dpl', 1970), ('citroen ds-21 pallas', 1970), ('chevrolet chevelle concours (sw)', 1970), ('ford torino (sw)', 1970), ('plymouth satellite (sw)', 1970), ('amc rebel sst (sw)', 1970), ('dodge challenger se', 1970), ('plymouth cuda 340', 1970), ('ford mustang boss 302', 1970), ('chevrolet monte carlo', 1970), ('buick estate wagon (sw)', 1970), ('toyota corona mark ii', 1970), ('plymouth duster', 1970), ('amc hornet', 1970), ('ford maverick', 1970), ('datsun pl510', 1970), ('volkswagen 1131 deluxe sedan', 1970), ('peugeot 504', 1970), ('audi 100 ls', 1970), ('saab 99e', 1970), ('bmw 2002', 1970), ('amc gremlin', 1970), ('ford f250', 1970), ('chevy c20', 1970), ('dodge d200', 1970), ('hi 1200d', 1970)]","SELECT T2.car_maker,  min(T1.year_of_manufacture) FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T2.car_maker ORDER BY min(T1.year_of_manufacture) ASC LIMIT 1<|eot_id|>"
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,Which distinct car models are the produced after 1980?,"continents, countries, car makers, model list, car names, cars data","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]",SELECT DISTINCT model_name FROM model_list WHERE production_starting_year  >  1980
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;,What are the different models for the cards produced after 1980?,"continents, countries, car makers, model list, car names, cars data","[('plymouth',), ('buick',), ('dodge',), ('chevrolet',), ('toyota',), ('honda',), ('subaru',), ('datsun',), ('mazda',), ('ford',), ('volkswagen',), ('renault',), ('peugeot',), ('saab',), ('volvo',), ('oldsmobile',), ('chrysler',), ('pontiac',), ('amc',), ('mercury',), ('nissan',)]",SELECT DISTINCT model FROM cars_data WHERE year  >  1980
car_1,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",How many car makers are there in each continents? List the continent name and the count.,"continents, countries, car makers, model list, car names, cars data","[('america', 4), ('asia', 7), ('europe', 11)]","SELECT count(*),  T1.continent_name FROM continents AS T1 JOIN car_makers AS T2 ON T2.maker_continent  =  T1.continent_id GROUP BY T1.continent_name"
car_1,"SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;",What is the name of each continent and how many car makers are there in each one?,"continents, countries, car makers, model list, car names, cars data","[('america', 4), ('asia', 7), ('europe', 11)]","SELECT T1.continent_name,  count(*) FROM continents AS T1 JOIN car_makers AS T2 ON T1.continent_id  =  T2.continent_id GROUP BY T1.continent_id"
car_1,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,Which of the countries has the most car makers? List the country name.,"continents, countries, car makers, model list, car names, cars data","[('japan',)]",SELECT T2.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_name ORDER BY count(*) DESC LIMIT 1
car_1,SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;,What is the name of the country with the most car makers?,"continents, countries, car makers, model list, car names, cars data","[('japan',)]",SELECT T2.country_name FROM car_makers AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_name ORDER BY count(*) DESC LIMIT 1
car_1,"select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;",How many car models are produced by each maker ? Only list the count and the maker full name .,"continents, countries, car makers, model list, car names, cars data","[(1, 'American Motor Company'), (2, 'Volkswagen'), (1, 'BMW'), (5, 'General Motors'), (3, 'Ford Motor Company'), (4, 'Chrysler'), (1, 'Citroen'), (2, 'Nissan Motors'), (1, 'Fiat'), (1, 'Honda'), (1, 'Mazda'), (2, 'Daimler Benz'), (1, 'Opel'), (1, 'Peugeaut'), (1, 'Renault'), (1, 'Saab'), (1, 'Subaru'), (2, 'Toyota'), (1, 'Triumph'), (1, 'Volvo'), (1, 'Kia Motors'), (1, 'Hyundai')]","SELECT count(*),  T1.car_maker_full_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id"
car_1,"SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;",What is the number of car models that are produced by each maker and what is the id and full name of each maker?,"continents, countries, car makers, model list, car names, cars data","[(1, 'American Motor Company', 1), (2, 'Volkswagen', 2), (1, 'BMW', 3), (5, 'General Motors', 4), (3, 'Ford Motor Company', 5), (4, 'Chrysler', 6), (1, 'Citroen', 7), (2, 'Nissan Motors', 8), (1, 'Fiat', 9), (1, 'Honda', 11), (1, 'Mazda', 12), (2, 'Daimler Benz', 13), (1, 'Opel', 14), (1, 'Peugeaut', 15), (1, 'Renault', 16), (1, 'Saab', 17), (1, 'Subaru', 18), (2, 'Toyota', 19), (1, 'Triumph', 20), (1, 'Volvo', 21), (1, 'Kia Motors', 22), (1, 'Hyundai', 23)]","SELECT count(*),  T1.maker_id,  T1.maker_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.maker_id  =  T2.maker_id GROUP BY T1.maker_id"
car_1,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,What is the accelerate of the car make amc hornet sportabout (sw)?,"continents, countries, car makers, model list, car names, cars data","[(13.5,)]","SELECT T3.accelerate FROM car_names AS T1 JOIN car_makers AS T2 ON T1.car_maker  =  T2.car_maker_id JOIN cars_data AS T3 ON T1.car_name  =  T3.car_name WHERE T2.car_maker_name  =  ""amc hornet sportabout"" AND T1.country_name  =  ""switzerland"""
car_1,SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';,How much does the car accelerate that makes amc hornet sportabout (sw)?,"continents, countries, car makers, model list, car names, cars data","[(13.5,)]","SELECT T4.acceleration FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id JOIN model_list AS T3 ON T2.model_name_id  =  T3.model_name_id JOIN car_makers AS T4 ON T3.car_maker_id  =  T4.car_maker_id WHERE T2.car_name  =  ""amc hornet sportabout"" AND T2.scale_measure  =  ""SW""<|eot_id|>"
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,How many car makers are there in france?,"continents, countries, car makers, model list, car names, cars data","[(3,)]","SELECT count(*) FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent  =  ""Europe"" AND T2.country_name  =  ""France"""
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';,What is the number of makers of care in France?,"continents, countries, car makers, model list, car names, cars data","[(3,)]",SELECT count(*) FROM car_makers AS T1 JOIN cars_data AS T2 ON T1.car_maker_id  =  T2.car_maker WHERE T2.country_name  =  'France'
car_1,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,How many car models are produced in the usa?,"continents, countries, car makers, model list, car names, cars data","[(13,)]","SELECT count(*) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id JOIN model_list AS T3 ON T2.model_id  =  T3.model_id WHERE T2.country  =  ""USA"""
car_1,SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';,What is the count of the car models produced in the United States?,"continents, countries, car makers, model list, car names, cars data","[(13,)]","SELECT count(*) FROM cars_data AS T1 JOIN model_list AS T2 ON T1.model_id  =  T2.model_id JOIN car_names AS T3 ON T2.car_name_id  =  T3.car_name_id JOIN countries AS T4 ON T3.country_name  =  T4.country_name WHERE T4.country_name  =  ""United States"""
car_1,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,What is the average miles per gallon(mpg) of the cars with 4 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(28.862318840579714,)]","SELECT avg(miles_per_gallon) FROM cars_data WHERE engine_type LIKE ""%4 Cylinder%"""
car_1,SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;,What is the average miles per gallon of all the cards with 4 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(28.862318840579714,)]",SELECT avg(miles_per_gallon) FROM cars_data WHERE number_of_cylinders  =  4
car_1,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,What is the smallest weight of the car produced with 8 cylinders on 1974 ?,"continents, countries, car makers, model list, car names, cars data","[(4141,)]",SELECT min(weight_in_kg) FROM cars_data WHERE number_of_cylinders  =  8 AND YEAR  =  1974
car_1,select min(weight) from cars_data where cylinders  =  8 and year  =  1974,What is the minimum weight of the car with 8 cylinders produced in 1974 ?,"continents, countries, car makers, model list, car names, cars data","[(4141,)]",SELECT min(weight_in_kg) FROM cars_data WHERE num_of_cylinders  =  8 AND YEAR  =  1974
car_1,"SELECT Maker ,  Model FROM MODEL_LIST;",What are all the makers and models?,"continents, countries, car makers, model list, car names, cars data","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]","SELECT T1.car_maker_name,  T2.car_model_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id"
car_1,"SELECT Maker ,  Model FROM MODEL_LIST;",What are the makers and models?,"continents, countries, car makers, model list, car names, cars data","[(1, 'amc'), (2, 'audi'), (3, 'bmw'), (4, 'buick'), (4, 'cadillac'), (5, 'capri'), (4, 'chevrolet'), (6, 'chrysler'), (7, 'citroen'), (8, 'datsun'), (6, 'dodge'), (9, 'fiat'), (5, 'ford'), (10, 'hi'), (11, 'honda'), (12, 'mazda'), (13, 'mercedes'), (13, 'mercedes-benz'), (5, 'mercury'), (8, 'nissan'), (4, 'oldsmobile'), (14, 'opel'), (15, 'peugeot'), (6, 'plymouth'), (4, 'pontiac'), (16, 'renault'), (17, 'saab'), (18, 'subaru'), (19, 'toyota'), (20, 'triumph'), (2, 'volkswagen'), (21, 'volvo'), (22, 'kia'), (23, 'hyundai'), (6, 'jeep'), (19, 'scion')]","SELECT T2.car_maker,  T2.car_model FROM model_list AS T1 JOIN car_makers AS T2 ON T1.maker_id  =  T2.maker_id"
car_1,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",What are the countries having at least one car maker? List name and id.,"continents, countries, car makers, model list, car names, cars data","[('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]","SELECT T1.country_name,  T1.country_id FROM countries AS T1 JOIN car_makers AS T2 ON T2.country_id  =  T1.country_id GROUP BY T1.country_id HAVING count(*)  >=  1<|eot_id|>"
car_1,"SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;",What are the names and ids of all countries with at least one car maker?,"continents, countries, car makers, model list, car names, cars data","[('usa', 1), ('germany', 2), ('france', 3), ('japan', 4), ('italy', 5), ('sweden', 6), ('uk', 7), ('korea', 8)]","SELECT T2.country_name,  T2.country_id FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  1<|eot_id|>"
car_1,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,What is the number of the cars with horsepower more than 150?,"continents, countries, car makers, model list, car names, cars data","[(281,)]",SELECT count(*) FROM cars_data WHERE horsepower  >  150
car_1,SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;,What is the number of cars with a horsepower greater than 150?,"continents, countries, car makers, model list, car names, cars data","[(281,)]",SELECT count(*) FROM cars_data WHERE horsepower  >  150
car_1,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",What is the average weight of cars each year?,"continents, countries, car makers, model list, car names, cars data","[(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]","SELECT YEAR,  avg(weight_in_kg) FROM cars_data GROUP BY YEAR"
car_1,"SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;",What is the average weight and year for each year?,"continents, countries, car makers, model list, car names, cars data","[(3441.3142857142857, 1970), (2960.344827586207, 1971), (3237.714285714286, 1972), (3419.025, 1973), (2877.925925925926, 1974), (3176.8, 1975), (3078.735294117647, 1976), (2997.3571428571427, 1977), (2861.8055555555557, 1978), (3055.344827586207, 1979), (2436.655172413793, 1980), (2532.1666666666665, 1981), (2453.548387096774, 1982)]","SELECT avg(weight_in_kg),  avg(year_of_making),  year_of_making FROM cars_data GROUP BY year_of_making"
car_1,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,Which countries in europe have at least 3 car manufacturers?,"continents, countries, car makers, model list, car names, cars data","[('france',), ('germany',)]",SELECT T2.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent_island  =  'Europe' GROUP BY T2.country_name HAVING count(*)  >=  3
car_1,SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;,What are the names of all European countries with at least 3 manufacturers?,"continents, countries, car makers, model list, car names, cars data","[('france',), ('germany',)]",SELECT T2.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent_island  =  'Europe' GROUP BY T2.country_name HAVING count(*)  >=  3
car_1,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",What is the maximum horsepower and the make of the car models with 3 cylinders?,"continents, countries, car makers, model list, car names, cars data","[('97', 'mazda rx2 coupe')]","SELECT max(T1.Horse_Power),  T2.car_make FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T1.number_of_cylinders  =  ""3"" GROUP BY T2.car_make<|eot_id|>"
car_1,"SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;",What is the largest amount of horsepower for the models with 3 cylinders and what make is it?,"continents, countries, car makers, model list, car names, cars data","[('97', 'mazda rx2 coupe')]","SELECT max(horsepower),  T1.car_maker FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id WHERE T1.num_cyls  =  3"
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;,"Which model saves the most gasoline? That is to say, have the maximum miles per gallon.","continents, countries, car makers, model list, car names, cars data","[('citroen',)]",SELECT model_name FROM model_list ORDER BY saving_gallons DESC LIMIT 1
car_1,select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;,What is the car model with the highest mpg ?,"continents, countries, car makers, model list, car names, cars data","[('citroen',)]",SELECT model_name FROM model_list ORDER BY mph DESC LIMIT 1
car_1,SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;,What is the average horsepower of the cars before 1980?,"continents, countries, car makers, model list, car names, cars data","[(111.13291139240506,)]",SELECT avg(horsepower) FROM cars_data WHERE YEAR  <  1980
car_1,select avg(horsepower) from cars_data where year  <  1980;,What is the average horsepower for all cars produced before 1980 ?,"continents, countries, car makers, model list, car names, cars data","[(111.13291139240506,)]",SELECT avg(horsepower) FROM cars_data WHERE YEAR  <  1980
car_1,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,What is the average edispl of the cars of model volvo?,"continents, countries, car makers, model list, car names, cars data","[(133.5,)]","SELECT avg(T3.edispm) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id JOIN cars_data AS T3 ON T2.model_id  =  T3.model_id WHERE T2.car_maker  =  ""volvo""<|eot_id|>"
car_1,SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';,What is the average edispl for all volvos?,"continents, countries, car makers, model list, car names, cars data","[(133.5,)]",SELECT avg(edispl) FROM cars_data WHERE maker  =  'Volkswagen'
car_1,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",What is the maximum accelerate for different number of cylinders?,"continents, countries, car makers, model list, car names, cars data","[(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]","SELECT max(accelerate),  cylinders FROM cars_data GROUP BY cylinders"
car_1,"SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;",What is the maximum accelerate for all the different cylinders?,"continents, countries, car makers, model list, car names, cars data","[(13.5, 3), (24.8, 4), (20.1, 5), (21.0, 6), (22.2, 8)]","SELECT max(accelerate),  cylinders FROM cars_data GROUP BY cylinders"
car_1,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,Which model has the most version(make) of cars?,"continents, countries, car makers, model list, car names, cars data","[('ford',)]",SELECT T1.model_name FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id GROUP BY T1.model_name ORDER BY count(*) DESC LIMIT 1
car_1,SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;,What model has the most different versions?,"continents, countries, car makers, model list, car names, cars data","[('ford',)]",SELECT T1.model_name FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id GROUP BY T1.model_name ORDER BY count(*) DESC LIMIT 1
car_1,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,How many cars have more than 4 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(195,)]",SELECT count(*) FROM cars_data WHERE cylinder_number  >  4
car_1,SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;,What is the number of cars with more than 4 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(195,)]",SELECT count(*) FROM cars_data WHERE number_of_cylinders  >  4
car_1,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,how many cars were produced in 1980?,"continents, countries, car makers, model list, car names, cars data","[(29,)]",SELECT count(*) FROM cars_data WHERE YEAR  =  1980
car_1,SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;,"In 1980, how many cars were made?","continents, countries, car makers, model list, car names, cars data","[(29,)]",SELECT sum(cars_made) FROM cars_data WHERE YEAR  =  1980
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,How many car models were produced by the maker with full name American Motor Company?,"continents, countries, car makers, model list, car names, cars data","[(1,)]","SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T1.car_maker_name  =  ""American Motor Company"""
car_1,SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';,What is the number of car models created by the car maker American Motor Company?,"continents, countries, car makers, model list, car names, cars data","[(1,)]","SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T1.car_maker_name  =  ""American Motor Company"""
car_1,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",Which makers designed more than 3 car models? List full name and the id.,"continents, countries, car makers, model list, car names, cars data","[('General Motors', 4), ('Chrysler', 6)]","SELECT T1.car_maker_name,  T2.car_maker_id FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T2.car_maker_id HAVING count(*)  >  3"
car_1,"SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;",What are the names and ids of all makers with more than 3 models?,"continents, countries, car makers, model list, car names, cars data","[('General Motors', 4), ('Chrysler', 6)]","SELECT T2.car_maker_name,  T2.car_maker_id FROM model_list AS T1 JOIN car_makers AS T2 ON T2.car_maker_id  =  T1.car_maker_id GROUP BY T2.car_maker_id HAVING count(*)  >  3"
car_1,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?,"continents, countries, car makers, model list, car names, cars data","[('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]","SELECT DISTINCT model_name FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T1.car_maker_name  =  ""General Motors"" OR T2.weight_in_kg  >  3500"
car_1,SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;,What are the different models created by either the car maker General Motors or weighed more than 3500?,"continents, countries, car makers, model list, car names, cars data","[('chevrolet',), ('buick',), ('ford',), ('plymouth',), ('pontiac',), ('amc',), ('dodge',), ('mercury',), ('oldsmobile',), ('chrysler',), ('mercedes-benz',), ('cadillac',), ('mercedes',)]",SELECT DISTINCT model FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE T1.car_maker_name  =  'General Motors' UNION SELECT model FROM cars_data WHERE weight_in_kg  >  3500
car_1,select distinct year from cars_data where weight between 3000 and 4000;,In which years cars were produced weighing no less than 3000 and no more than 4000 ?,"continents, countries, car makers, model list, car names, cars data","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]",SELECT YEAR FROM cars_data WHERE weight_in_kg BETWEEN 3000 AND 4000
car_1,select distinct year from cars_data where weight between 3000 and 4000;,What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?,"continents, countries, car makers, model list, car names, cars data","[(1970,), (1971,), (1972,), (1973,), (1974,), (1975,), (1976,), (1977,), (1978,), (1979,), (1980,), (1981,), (1982,)]",SELECT DISTINCT YEAR FROM cars_data WHERE weight  <  4000 INTERSECT SELECT DISTINCT YEAR FROM cars_data WHERE weight  >  3000
car_1,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,What is the horsepower of the car with the largest accelerate?,"continents, countries, car makers, model list, car names, cars data","[('71',)]",SELECT T1.Horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id WHERE T2.name  =  'Fastest'
car_1,SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;,What is the horsepower of the car with the greatest accelerate?,"continents, countries, car makers, model list, car names, cars data","[('71',)]",SELECT T1.horsepower FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id WHERE T2.accelerate  =  (SELECT max(T2.accelerate) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id)<|eot_id|>
car_1,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"For model volvo, how many cylinders does the car with the least accelerate have?","continents, countries, car makers, model list, car names, cars data","[(6,)]","SELECT count(*) FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id JOIN cars_data AS T3 ON T2.model_name  =  T3.model_name WHERE T1.car_maker_name  =  ""volvo"" ORDER BY T3.acceleration LIMIT 1"
car_1,SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;,"For a volvo model, how many cylinders does the version with least accelerate have?","continents, countries, car makers, model list, car names, cars data","[(6,)]",SELECT T2.cylinders FROM model_list AS T1 JOIN cars_data AS T2 ON T1.model_id  =  T2.model_id WHERE T1.car_maker  =  'volvo' AND T1.model_name  =  (SELECT model_name FROM model_list WHERE car_maker  =  'volvo' ORDER BY acceleration LIMIT 1)
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,How many cars have a larger accelerate than the car with the largest horsepower?,"continents, countries, car makers, model list, car names, cars data","[(39,)]",SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(accelerate) FROM cars_data)
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );,What is the number of cars with a greater accelerate than the one with the most horsepower?,"continents, countries, car makers, model list, car names, cars data","[(39,)]",SELECT count(*) FROM cars_data WHERE accelerate  >  (SELECT max(horsepower) FROM cars_data)
car_1,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,How many countries has more than 2 car makers ?,"continents, countries, car makers, model list, car names, cars data","[(4,), (4,), (3,), (5,)]",SELECT count(*) FROM Countries AS T1 JOIN car_makers AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  2
car_1,select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2,What is the number of countries with more than 2 car makers ?,"continents, countries, car makers, model list, car names, cars data","[(4,), (4,), (3,), (5,)]",SELECT count(*) FROM countries WHERE country_id IN ( SELECT country_id FROM car_makers GROUP BY country_id HAVING count(*)  >  2 )
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,How many cars has over 6 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(108,)]",SELECT count(*) FROM cars_data WHERE cylinder_rating  >  6
car_1,SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;,What is the number of carsw ith over 6 cylinders?,"continents, countries, car makers, model list, car names, cars data","[(108,)]",SELECT count(*) FROM cars_data WHERE num_of_cyls  >  6
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"For the cars with 4 cylinders, which model has the largest horsepower?","continents, countries, car makers, model list, car names, cars data","[('ford',)]",SELECT T2.model_name FROM cars_data AS T1 JOIN model_list AS T2 ON T1.model_id  =  T2.model_id WHERE T1.cylinder_number  =  4 INTERSECT SELECT T2.model_name FROM cars_data AS T1 JOIN model_list AS T2 ON T1.model_id  =  T2.model_id WHERE T1.horse_power  =  (SELECT max(horse_power) FROM cars_data WHERE cylinder_number  =  4)<|eot_id|>
car_1,SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;,"For all of the 4 cylinder cars, which model has the most horsepower?","continents, countries, car makers, model list, car names, cars data","[('ford',)]","SELECT T2.model_name FROM cars_data AS T1 JOIN model_list AS T2 ON T1.model_id  =  T2.model_id WHERE T1.cylinder_number  =  ""4"" GROUP BY T2.model_name ORDER BY count(*),  T1.Horse_Power DESC LIMIT 1"
car_1,"SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;","Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.","continents, countries, car makers, model list, car names, cars data","[(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]","SELECT T1.car_maker_id,  T2.car_maker_name FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id WHERE number_of_cylinders  >  3 AND horsepower  >  (SELECT min(horsepower) FROM cars_data)"
car_1,"select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;","Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?","continents, countries, car makers, model list, car names, cars data","[(79, 'mazda rx2 coupe'), (119, 'mazda rx3'), (251, 'mazda rx-4')]","SELECT T1.car_make_id,  T2.car_name FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id WHERE T1.Horse_Power  <  T1.min_Horse_Power AND T2.num_of_cylinders  <  4"
car_1,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?,"continents, countries, car makers, model list, car names, cars data","[('null',)]",SELECT max(T1.miles_per_gallon) FROM cars_data AS T1 JOIN car_names AS T2 ON T1.car_name_id  =  T2.car_name_id JOIN model_list AS T3 ON T2.model_name_id  =  T3.model_name_id WHERE T3.cylinders  =  8 OR T3.year  <  1980
car_1,select max(mpg) from cars_data where cylinders  =  8 or year  <  1980,What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?,"continents, countries, car makers, model list, car names, cars data","[('null',)]",SELECT max(mpg) FROM cars_data WHERE num_of_cyls  =  8 UNION SELECT max(mpg) FROM cars_data WHERE YEAR  <  1980
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,Which models are lighter than 3500 but not built by the 'Ford Motor Company'?,"continents, countries, car makers, model list, car names, cars data","[('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]",SELECT T3.model_name FROM cars_data AS T1 JOIN model_list AS T2 ON T1.model_id  =  T2.model_id JOIN car_names AS T3 ON T1.name_id  =  T3.name_id WHERE T1.weight_in_grams  <  3500 AND T2.car_maker_id!= (SELECT T3.car_maker_id FROM car_makers AS T3 JOIN model_list AS T2 ON T2.car_maker_id  =  T3.car_maker_id WHERE T2.model_name  =  'Focus')
car_1,SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';,What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?,"continents, countries, car makers, model list, car names, cars data","[('plymouth',), ('amc',), ('citroen',), ('buick',), ('toyota',), ('datsun',), ('volkswagen',), ('peugeot',), ('audi',), ('saab',), ('bmw',), ('chevrolet',), ('pontiac',), ('opel',), ('fiat',), ('dodge',), ('mazda',), ('volvo',), ('renault',), ('honda',), ('subaru',), ('oldsmobile',), ('mercedes-benz',), ('triumph',), ('chrysler',), ('nissan',)]",SELECT DISTINCT model FROM model_list WHERE weight_in_grams  <  3500 EXCEPT SELECT DISTINCT model FROM cars_data WHERE maker_name  =  'Ford Motor Company'
car_1,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,What are the name of the countries where there is not a single car maker?,"continents, countries, car makers, model list, car names, cars data","[('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]",SELECT T2.country_name FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T2.country_id HAVING count(*)  =  0
car_1,SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;,What are the names of the countries with no car makers?,"continents, countries, car makers, model list, car names, cars data","[('australia',), ('brazil',), ('egypt',), ('mexico',), ('new zealand',), ('nigeria',), ('russia',)]",SELECT T2.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id WHERE T1.country_id IS NULL
car_1,"select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;",Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .,"continents, countries, car makers, model list, car names, cars data","[(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]","SELECT T1.car_maker_id,  T1.car_maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id HAVING count(*)  >=  2 INTERSECT SELECT T1.car_maker_id,  T1.car_maker FROM car_makers AS T1 JOIN model_list AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id HAVING count(*)  >  3"
car_1,"SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;",What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?,"continents, countries, car makers, model list, car names, cars data","[(2, 'volkswagen'), (4, 'gm'), (5, 'ford'), (6, 'chrysler'), (8, 'nissan'), (19, 'toyota')]","SELECT T1.car_maker_id,  T2.car_maker FROM model_list AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id HAVING count(*)  >=  2 INTERSECT SELECT T1.car_maker_id,  T2.car_maker FROM cars_data AS T1 JOIN car_makers AS T2 ON T1.car_maker_id  =  T2.car_maker_id GROUP BY T1.car_maker_id HAVING sum(T1.cars_made)  >  3<|eot_id|>"
car_1,"SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';",What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?,"continents, countries, car makers, model list, car names, cars data","[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]","SELECT T1.country_id,  T1.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  3 UNION SELECT T1.country_id,  T1.country_name FROM car_names AS T1 JOIN cars_data AS T2 ON T1.car_id  =  T2.car_id JOIN model_list AS T3 ON T2.model_id  =  T3.model_id JOIN car_makers AS T4 ON T3.car_maker_id  =  T4.car_maker_id JOIN countries AS T5 ON T4.country_id  =  T5.country_id WHERE T3.model_name  =  ""fiat""<|eot_id|>"
car_1,"select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';",What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?,"continents, countries, car makers, model list, car names, cars data","[(1, 'usa'), (2, 'germany'), (4, 'japan'), (5, 'italy')]","SELECT T1.country_id,  T1.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  3 UNION SELECT T1.country_id,  T1.country_name FROM car_makers AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id JOIN model_list AS T3 ON T3.car_maker_id  =  T1.car_maker_id JOIN car_names AS T4 ON T4.model_name  =  T3.model_name WHERE T4.car_name  =  ""Fiat"""
flight_2,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","Which country does Airline ""JetBlue Airways"" belong to?","airlines, airports, flights","[('USA',)]",SELECT country FROM airlines WHERE name  =  'JetBlue Airways'
flight_2,"SELECT Country FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",What country is Jetblue Airways affiliated with?,"airlines, airports, flights","[('USA',)]",<|start_header_id|>2 SELECT country FROM airlines WHERE name  =  'Jetblue Airways'
flight_2,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""","What is the abbreviation of Airline ""JetBlue Airways""?","airlines, airports, flights","[('JetBlue',)]","SELECT T1.alid,  T1.alid FROM Airlines AS T1 JOIN Flights AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  ""JetBlue Airways"""
flight_2,"SELECT Abbreviation FROM AIRLINES WHERE Airline  =  ""JetBlue Airways""",Which abbreviation corresponds to Jetblue Airways?,"airlines, airports, flights","[('JetBlue',)]","SELECT airline_name,  airline_id FROM airlines WHERE airline_name  =  'Jetblue Airways'"
flight_2,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""","List all airline names and their abbreviations in ""USA"".","airlines, airports, flights","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]","<|start_header_id|>2
SELECT name,  airline_name FROM airlines WHERE country  =  'USA'"
flight_2,"SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  ""USA""",What are the airline names and abbreviations for airlines in the USA?,"airlines, airports, flights","[('United Airlines', 'UAL'), ('US Airways', 'USAir'), ('Delta Airlines', 'Delta'), ('Southwest Airlines', 'Southwest'), ('American Airlines', 'American'), ('Northwest Airlines', 'Northwest'), ('Continental Airlines', 'Continental'), ('JetBlue Airways', 'JetBlue'), ('Frontier Airlines', 'Frontier'), ('AirTran Airways', 'AirTran'), ('Allegiant Air', 'Allegiant'), ('Virgin America', 'Virgin')]","<|start_header_id|>2 SELECT name,  airline_name FROM airlines WHERE country  =  'USA'"
flight_2,SELECT count(*) FROM AIRLINES,How many airlines do we have?,"airlines, airports, flights","[(12,)]","<|start_header_id|>2
SELECT count(*) FROM airlines"
flight_2,SELECT count(*) FROM AIRLINES,What is the total number of airlines?,"airlines, airports, flights","[(12,)]",<|start_header_id|>2 SELECT count(*) FROM airlines
flight_2,SELECT count(*) FROM AIRPORTS,How many airports do we have?,"airlines, airports, flights","[(100,)]",SELECT count(*) FROM airports
flight_2,SELECT count(*) FROM AIRPORTS,Return the number of  airports.,"airlines, airports, flights","[(100,)]",SELECT count(*) FROM airports
flight_2,SELECT count(*) FROM FLIGHTS,How many flights do we have?,"airlines, airports, flights","[(1200,)]",SELECT count(*) FROM Flights
flight_2,SELECT count(*) FROM FLIGHTS,Return the number of flights.,"airlines, airports, flights","[(1200,)]",SELECT count(*) FROM Flights
flight_2,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",Which airline has abbreviation 'UAL'?,"airlines, airports, flights","[('United Airlines',)]","SELECT T1.alid,  T1.alid FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid WHERE T2.abbreviation  =  'UAL'<|eot_id|>"
flight_2,"SELECT Airline FROM AIRLINES WHERE Abbreviation  =  ""UAL""",Give the airline with abbreviation 'UAL'.,"airlines, airports, flights","[('United Airlines',)]",SELECT name FROM airlines WHERE airline_id  =  'UAL'
flight_2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",How many airlines are from USA?,"airlines, airports, flights","[(12,)]",SELECT count(*)FROM airlinesWHERE country  =  'USA'
flight_2,"SELECT count(*) FROM AIRLINES WHERE Country  =  ""USA""",Return the number of airlines in the USA.,"airlines, airports, flights","[(12,)]",SELECT count(*)FROM airlinesWHERE country  =  'USA'
flight_2,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",What is the airport name for airport 'AKO'?,"airlines, airports, flights","[('Colorado Plains Regional Airport ',)]",SELECT name FROM airports WHERE airport_id  =  'AKO'
flight_2,"SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  ""AKO""",Return the name of the airport with code 'AKO'.,"airlines, airports, flights","[('Colorado Plains Regional Airport ',)]",SELECT name FROM airports WHERE airport_id  =  'AKO'
flight_2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",How many flights depart from 'APG'?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE origin  =  'APG'
flight_2,"SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  ""APG""",Count the number of flights departing from 'APG'.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM Flights WHERE origin  =  'APG'
flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",How many flights have destination ATO?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM Flights WHERE destination  =  'ATO'
flight_2,"SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  ""ATO""",Count the number of flights into ATO.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.apname  =  'Ato'
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",How many flights depart from City Aberdeen?,"airlines, airports, flights","[(0,)]","SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.apid WHERE T1.city  =  ""City Aberdeen"""
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",Return the number of flights departing from Aberdeen.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE origin  =  'Aberdeen'
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",How many flights arriving in Aberdeen city?,"airlines, airports, flights","[(0,)]","SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.dst_apid WHERE city  =  ""Aberdeen"""
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  ""Aberdeen""",Return the number of flights arriving in Aberdeen.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.apname  =  'Aberdeen'
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""",How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.src_apid WHERE T1.city  =  'Aberdeen' AND T2.dst_city  =  'Ashley'<|eot_id|>
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  ""Ashley"" AND T3.City  =  ""Aberdeen""",How many flights fly from Aberdeen to Ashley?,"airlines, airports, flights","[(0,)]","SELECT count(*) FROM Flights WHERE origin  =  ""Aberdeen"" AND destination  =  ""Ashley"""
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",How many flights does airline 'JetBlue Airways' have?,"airlines, airports, flights","[(100,)]",SELECT count(*) FROM flights WHERE airline  =  'JetBlue Airways'
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = ""JetBlue Airways""",Give the number of Jetblue Airways flights.,"airlines, airports, flights","[(100,)]",SELECT count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'Jetblue Airways'
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",How many 'United Airlines' flights go to Airport 'ASY'?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM Airlines AS T1 JOIN Flights AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'United Airlines' AND T2.destination_apid  =  'ASY'
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.DestAirport  =  ""ASY""",Count the number of United Airlines flights arriving in ASY Airport.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE destination_apid  =  'ASY' AND airline_id  =  (SELECT airline_id FROM airlines WHERE name  =  'United Airlines')
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",How many 'United Airlines' flights depart from Airport 'AHD'?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.name  =  'AHD' AND T3.name  =  'United Airlines'<|eot_id|>
flight_2,"SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  ""United Airlines"" AND T2.SourceAirport  =  ""AHD""",Return the number of United Airlines flights leaving from AHD Airport.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE origin  =  'AHD' AND destination_id  =  21 AND airline_id  =  (SELECT id FROM airlines WHERE name  =  'United Airlines')
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",How many United Airlines flights go to City 'Aberdeen'?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE destination_apid  =  (SELECT apid FROM airports WHERE city  =  'Aberdeen') AND airline_id  =  (SELECT id FROM airlines WHERE name  =  'United Airlines')
flight_2,"SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  ""Aberdeen"" AND T3.Airline  =  ""United Airlines""",Count the number of United Airlines flights that arrive in Aberdeen.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM flights WHERE destination  =  'Aberdeen' AND airline  =  'United Airlines'
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,Which airline has most number of flights?,"airlines, airports, flights","[('Virgin America',)]","SELECT T1.alid,  T1.name FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid ORDER BY count(*) DESC LIMIT 1"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1,What airline serves the most flights?,"airlines, airports, flights","[('Virgin America',)]","SELECT T1.name,  count(*) FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1"
flight_2,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",Find the abbreviation and country of the airline that has fewest number of flights?,"airlines, airports, flights","[('AirTran', 'USA')]","SELECT T1.airline_name,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid ORDER BY count(*) ASC LIMIT 1"
flight_2,"SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1",What is the abbreviation of the airilne has the fewest flights and what country is it in?,"airlines, airports, flights","[('AirTran', 'USA')]","SELECT T1.alid,  T1.country FROM airlines AS T1 JOIN flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid ORDER BY count(*) ASC LIMIT 1"
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,Find all airlines that have at least 10 flights.,"airlines, airports, flights","[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]",SELECT T1.alid FROM Airlines AS T1 JOIN Flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid HAVING count(*)  >=  10
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10,Which airlines have at least 10 flights?,"airlines, airports, flights","[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]",SELECT T3.airline FROM flights AS T1 JOIN airlines AS T2 ON T1.airline_id  =  T2.alid GROUP BY T2.name HAVING count(*)  >=  10
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,Find all airlines that have fewer than 200 flights.,"airlines, airports, flights","[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]",SELECT T1.alid FROM Airlines AS T1 JOIN Flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid HAVING count(*)  <  200
flight_2,SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200,Which airlines have less than 200 flights?,"airlines, airports, flights","[('AirTran Airways',), ('Allegiant Air',), ('American Airlines',), ('Continental Airlines',), ('Delta Airlines',), ('Frontier Airlines',), ('JetBlue Airways',), ('Northwest Airlines',), ('Southwest Airlines',), ('US Airways',), ('United Airlines',), ('Virgin America',)]",SELECT T1.alid FROM Airlines AS T1 JOIN Flights AS T2 ON T1.alid  =  T2.alid GROUP BY T1.alid HAVING count(*)  <  200
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""","What are flight numbers of Airline ""United Airlines""?","airlines, airports, flights","[(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]","SELECT T1.flight_number FROM Flights AS T1 JOIN Airlines AS T2 ON T1.alid  =  T2.alid WHERE T2.name  =  ""United Airlines"""
flight_2,"SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  ""United Airlines""",Which flight numbers correspond to United Airlines flights?,"airlines, airports, flights","[(28,), (29,), (44,), (45,), (54,), (55,), (90,), (91,), (108,), (109,), (142,), (143,), (148,), (149,), (198,), (199,), (226,), (227,), (276,), (277,), (308,), (309,), (326,), (327,), (370,), (371,), (414,), (415,), (424,), (425,), (470,), (471,), (520,), (521,), (556,), (557,), (560,), (561,), (604,), (605,), (608,), (609,), (626,), (627,), (658,), (659,), (708,), (709,), (744,), (745,), (754,), (755,), (786,), (787,), (810,), (811,), (828,), (829,), (878,), (879,), (888,), (889,), (900,), (901,), (924,), (925,), (946,), (947,), (996,), (997,), (1000,), (1001,), (1026,), (1027,), (1062,), (1063,), (1068,), (1069,), (1100,), (1101,), (1144,), (1145,), (1166,), (1167,), (1168,), (1169,), (1192,), (1193,), (1208,), (1209,), (1216,), (1217,), (1250,), (1251,), (1274,), (1275,), (1284,), (1285,), (1328,), (1329,)]",SELECT T1.flight_number FROM Flights AS T1 JOIN Airlines AS T2 ON T1.airline_id  =  T2.alid WHERE T2.name  =  'United Airlines'
flight_2,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""",Find the number of flights landing in the city of Aberdeen or Abilene.,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.city  =  'Aberdeen' OR T1.city  =  'Abilene'<|eot_id|>
flight_2,"SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  ""Aberdeen"" OR T2.city  =  ""Abilene""",How many flights land in Aberdeen or Abilene?,"airlines, airports, flights","[(0,)]",SELECT count(*) FROM airports AS T1 JOIN flights AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.city  =  'Aberdeen' OR T1.city  =  'Abilene'<|eot_id|>
flight_2,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),Find the name of airports which do not have any flight in and out.,"airlines, airports, flights","[('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]",SELECT name FROM airports WHERE airport_id NOT IN(SELECT T1.airport_id FROM flights AS T1 JOIN airports AS T2 ON T1.destination_apid  =  T2.apid GROUP BY T1.airport_id HAVING count(*)  >  1)<|eot_id|>
flight_2,SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights),Which airports do not have departing or arriving flights?,"airlines, airports, flights","[('Phillips AAF ',), ('Municipal ',), ('Dyess AFB ',), ('Municipal ',), ('Virginia Highlands ',), ('Ada ',), ('Adak Island Ns ',), ('Lenawee County ',), ('Municipal ',), ('Municipal ',), ('Ainsworth ',), ('Akhiok SPB ',), ('Spb ',), ('Akiak ',), ('Colorado Plains Regional Airport ',), ('Akron/canton Regional ',), ('Fulton International ',), ('Akutan ',), ('Alakanuk ',), ('NAS ',), ('Holloman AFB ',), ('Municipal ',), ('Municipal ',), ('Albany NAS ',), ('Dougherty County ',), ('Albany International ',), ('Albany ',), ('Albert Lea ',), ('Albuquerque International ',), ('Aleknagik ',), ('Aleneva ',), ('Thomas C Russell Fld ',), ('Alexandria International ',), ('Esler Field ',), ('Alexandria ',), ('Alexandria Bay ',), ('Algona ',), ('International ',), ('George Downer ',), ('Alitak SPB ',), ('Allakaket ',), ('Alliance ',), ('Gratiot Community ',), ('Alpena County Regional ',), ('Alpine ',), ('Alton ',), ('Altus AFB ',), ('Municipal ',), ('Alyeska ',), ('Rick Husband Amarillo International ',), ('Tradewind ',), ('Ambler ',), ('Amchitka ',), ('Municipal ',), ('Ames ',), ('Zahns ',), ('Amook ',), ('Anacortes ',), ('USN Heliport ',), ('Orange County Steel Salvage Heliport ',), ('Anaktuvuk ',), ('Elmendorf Afb ',), ('Ted Stevens Anchorage International Airport ',), ('Merrill Field ',), ('Municipal ',), ('Anderson ',), ('Andrews ',), ('Angel Fire ',), ('Tri-State Steuben Cty ',), ('Angoon ',), ('Rollang Field ',), ('Aniak ',), ('Anita Bay ',), ('Municipal ',), ('Lee ',), ('Annette Island ',), ('Anniston Metropolitan ',), ('Ft Mcclellan Bus Trml ',), ('Reilly AHP ',), ('Anthony ',), ('Antlers ',), ('Anvik ',), ('Municipal ',), ('Apple Valley ',), ('Outagamie County ',), ('Municipal ',), ('Arcata ',), ('Arctic Village ',), ('Downtown ',), ('Ardmore Municipal Arpt ',), ('US Army Heliport ',), ('Artesia ',), ('Asbury Park ',), ('Ashland ',), ('Ashley ',), ('Aspen ',), ('Astoria ',), ('Athens ',), ('Ohio University ',), ('McMinn County ',)]",SELECT airport_name FROM airports EXCEPT SELECT T3.airport FROM flights AS T1 JOIN airports AS T2 ON T1.destination_airport  =  T2.airport_id JOIN airports AS T3 ON T2.airport_id  =  T3.airport_id<|eot_id|>
employee_hire_evaluation,SELECT count(*) FROM employee,How many employees are there?,"employee, shop, hiring, evaluation","[(10,)]",SELECT count(*) FROM employee
employee_hire_evaluation,SELECT count(*) FROM employee,Count the number of employees,"employee, shop, hiring, evaluation","[(10,)]",SELECT count(*) FROM employee
employee_hire_evaluation,SELECT name FROM employee ORDER BY age,Sort employee names by their age in ascending order.,"employee, shop, hiring, evaluation","[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]",SELECT T1.employee_name FROM employee AS T1 ORDER BY T1.age ASC
employee_hire_evaluation,SELECT name FROM employee ORDER BY age,List the names of employees and sort in ascending order of age.,"employee, shop, hiring, evaluation","[('George Chuter',), ('Andrew Sheridan',), ('Lee Mears',), ('Tim Payne',), ('Matt Stevens',), ('Jason Hobson',), ('Steve Borthwick',), ('Louis Deacon',), ('Phil Vickery',), ('Mark Regan',)]",SELECT employee_name FROM employee ORDER BY age ASC
employee_hire_evaluation,"SELECT count(*) ,  city FROM employee GROUP BY city",What is the number of employees from each city?,"employee, shop, hiring, evaluation","[(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]","SELECT count(*),  employee_city FROM employee GROUP BY employee_city"
employee_hire_evaluation,"SELECT count(*) ,  city FROM employee GROUP BY city",Count the number of employees for each city.,"employee, shop, hiring, evaluation","[(3, 'Bath'), (3, 'Bristol'), (1, 'Leicester'), (1, 'Sale'), (2, 'Wasps')]","SELECT count(*),  employee_city FROM employee GROUP BY employee_city"
employee_hire_evaluation,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,Which cities do more than one employee under age 30 come from?,"employee, shop, hiring, evaluation","[('Bath',)]",SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
employee_hire_evaluation,SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1,Find the cities that have more than one employee under age 30.,"employee, shop, hiring, evaluation","[('Bath',)]",SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
employee_hire_evaluation,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",Find the number of shops in each location.,"employee, shop, hiring, evaluation","[(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]","SELECT count(*),  T1.shop_location FROM SHOP AS T1 GROUP BY T1.shop_location"
employee_hire_evaluation,"SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION",How many shops are there in each location?,"employee, shop, hiring, evaluation","[(1, 'Espoo'), (1, 'Helsinki'), (1, 'Jakobstad'), (1, 'Kotka'), (1, 'Kuopio'), (1, 'Lahti'), (1, 'Mariehamn'), (1, 'Turku'), (1, 'Valkeakoski')]","SELECT count(*),  T1.shop_location FROM SHOP AS T1 GROUP BY T1.shop_location"
employee_hire_evaluation,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",Find the manager name and district of the shop whose number of products is the largest.,"employee, shop, hiring, evaluation","[('Ilkka Mäkelä', 'Lahden Stadion')]","SELECT T3.shop_manager_name,  T3.shop_district FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id JOIN employee AS T3 ON T2.manager_id  =  T3.employee_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
employee_hire_evaluation,"SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1",What are the manager name and district of the shop that sells the largest number of products?,"employee, shop, hiring, evaluation","[('Ilkka Mäkelä', 'Lahden Stadion')]","SELECT T1.shop_manager_name,  T1.shop_district FROM shop AS T1 JOIN employee AS T2 ON T2.employee_id  =  T1.shop_manager_id GROUP BY T1.shop_id ORDER BY count(*) DESC LIMIT 1"
employee_hire_evaluation,"SELECT min(Number_products) ,  max(Number_products) FROM shop",find the minimum and maximum number of products of all stores.,"employee, shop, hiring, evaluation","[(1600, 15000)]","SELECT min(num_of_products),  max(num_of_products) FROM shop"
employee_hire_evaluation,"SELECT min(Number_products) ,  max(Number_products) FROM shop",What are the minimum and maximum number of products across all the shops?,"employee, shop, hiring, evaluation","[(1600, 15000)]","SELECT min(num_of_products),  max(num_of_products) FROM shop"
employee_hire_evaluation,"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","Return the name, location and district of all shops in descending order of number of products.","employee, shop, hiring, evaluation","[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]","SELECT T1.shop_name,  T1.shop_location,  T1.shop_district FROM SHOP AS T1 ORDER BY T1.number_of_products DESC"
employee_hire_evaluation,"SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC","Sort all the shops by number products in descending order, and return the name, location and district of each shop.","employee, shop, hiring, evaluation","[('FC Lahti', 'Lahti', 'Lahden Stadion'), ('HJK', 'Helsinki', 'Finnair Stadium'), ('FC Inter', 'Turku', 'Veritas Stadion'), ('FC Honka', 'Espoo', 'Tapiolan Urheilupuisto'), ('FF Jaro', 'Jakobstad', 'Jakobstads Centralplan'), ('FC KooTeePee', 'Kotka', 'Arto Tolsa Areena'), ('FC Haka', 'Valkeakoski', 'Tehtaan kenttä'), ('KuPS', 'Kuopio', 'Magnum Areena'), ('IFK Mariehamn', 'Mariehamn', 'Wiklöf Holding Arena')]","SELECT shop_name,  shop_location,  shop_districtFROM shopORDER BY number_of_products DESC"
employee_hire_evaluation,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),Find the names of stores whose number products is more than the average number of products.,"employee, shop, hiring, evaluation","[('HJK',), ('FC Inter',), ('FC Lahti',)]",SELECT T2.shop_name FROM shop AS T1 JOIN employee AS T2 ON T1.shop_id  =  T2.works_at GROUP BY T1.shop_id HAVING count(*)  >  (SELECT avg(count(*)) FROM shop)
employee_hire_evaluation,SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop),Which shops' number products is above the average? Give me the shop names.,"employee, shop, hiring, evaluation","[('HJK',), ('FC Inter',), ('FC Lahti',)]",SELECT T2.shop_name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id WHERE T1.num_products  >  (SELECT avg(num_products) FROM shop)
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,find the name of employee who was awarded the most times in the evaluation.,"employee, shop, hiring, evaluation","[('George Chuter',)]",SELECT T1.employee_name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1,Which employee received the most awards in evaluations? Give me the employee name.,"employee, shop, hiring, evaluation","[('George Chuter',)]",SELECT T1.employee_name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY count(*) DESC LIMIT 1
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,Find the name of the employee who got the highest one time bonus.,"employee, shop, hiring, evaluation","[('Louis Deacon',)]",SELECT T1.employee_name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.one_time_bonus  =  (SELECT max(one_time_bonus) FROM evaluation)
employee_hire_evaluation,SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1,Which employee received the biggest bonus? Give me the employee name.,"employee, shop, hiring, evaluation","[('Louis Deacon',)]","SELECT T1.employee_first_name,  T1.employee_last_name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id ORDER BY sum(T2.bonus_amount) DESC LIMIT 1"
employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),Find the names of employees who never won any award in the evaluation.,"employee, shop, hiring, evaluation","[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]",SELECT employee_name FROM employee EXCEPT SELECT T1.employee_name FROM evaluation AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id WHERE T1.award_won  =  'Yes'
employee_hire_evaluation,SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation),What are the names of the employees who never received any evaluation?,"employee, shop, hiring, evaluation","[('Mark Regan',), ('Tim Payne',), ('Andrew Sheridan',), ('Phil Vickery',), ('Steve Borthwick',)]",SELECT T1.employee_name FROM employee AS T1 JOIN evaluation AS T2 ON T1.employee_id  =  T2.employee_id GROUP BY T1.employee_id HAVING count(*)  =  0
employee_hire_evaluation,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,What is the name of the shop that is hiring the largest number of employees?,"employee, shop, hiring, evaluation","[('FC Haka',)]",SELECT T3.shop_name FROM employee AS T1 JOIN hiring AS T2 ON T1.employee_id  =  T2.employee_id JOIN shop AS T3 ON T2.shop_id  =  T3.shop_id GROUP BY T2.shop_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>
employee_hire_evaluation,SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1,Which shop has the most employees? Give me the shop name.,"employee, shop, hiring, evaluation","[('FC Haka',)]",SELECT T3.shop_name FROM employee AS T1 JOIN hiring AS T2 ON T1.employee_id  =  T2.employee_id JOIN shop AS T3 ON T2.shop_id  =  T3.shop_id GROUP BY T3.shop_name ORDER BY count(*) DESC LIMIT 1<|eot_id|>
employee_hire_evaluation,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),Find the name of the shops that do not hire any employee.,"employee, shop, hiring, evaluation","[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]",SELECT T2.shop_name FROM hiring AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id WHERE T1.hiring_decision !=  'hire'
employee_hire_evaluation,SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring),Which shops run with no employees? Find the shop names,"employee, shop, hiring, evaluation","[('FC Honka',), ('KuPS',), ('IFK Mariehamn',)]","SELECT T2.shop_name FROM employee AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id WHERE T1.employee_id  =  ""No Employee"""
employee_hire_evaluation,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name",Find the number of employees hired in each shop; show the shop name as well.,"employee, shop, hiring, evaluation","[(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]","SELECT count(*),  T1.shop_name FROM shop AS T1 JOIN hiring AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T1.shop_id<|eot_id|>"
employee_hire_evaluation,"SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name","For each shop, return the number of employees working there and the name of the shop.","employee, shop, hiring, evaluation","[(2, 'FC Haka'), (1, 'FC Inter'), (1, 'FC KooTeePee'), (1, 'FC Lahti'), (1, 'FF Jaro'), (1, 'HJK')]","SELECT count(*),  T2.shop_name FROM employee AS T1 JOIN shop AS T2 ON T1.shop_id  =  T2.shop_id GROUP BY T2.shop_name<|eot_id|>"
employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,What is total bonus given in all evaluations?,"employee, shop, hiring, evaluation","[(19500.0,)]",SELECT sum(T2.bonus) FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id
employee_hire_evaluation,SELECT sum(bonus) FROM evaluation,Find the total amount of bonus given in all the evaluations.,"employee, shop, hiring, evaluation","[(19500.0,)]",SELECT sum(T1.bonus_amount) FROM evaluation AS T1 JOIN employee AS T2 ON T1.employee_id  =  T2.employee_id
employee_hire_evaluation,SELECT * FROM hiring,Give me all the information about hiring.,"employee, shop, hiring, evaluation","[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]",SELECT * FROM hiring
employee_hire_evaluation,SELECT * FROM hiring,What is all the information about hiring?,"employee, shop, hiring, evaluation","[(1, 1, '2009', 'T'), (1, 2, '2003', 'T'), (8, 3, '2011', 'F'), (4, 4, '2012', 'T'), (5, 5, '2013', 'T'), (2, 6, '2010', 'F'), (6, 7, '2008', 'T')]",SELECT * FROM hiring
employee_hire_evaluation,SELECT count(DISTINCT LOCATION) FROM shop,How many different store locations are there?,"employee, shop, hiring, evaluation","[(9,)]",SELECT count(DISTINCT shop_address) FROM shop
employee_hire_evaluation,SELECT count(DISTINCT LOCATION) FROM shop,Count the number of distinct store locations.,"employee, shop, hiring, evaluation","[(9,)]",SELECT count(DISTINCT store_location) FROM shop
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents,How many documents do we have?,"reference template types, templates, documents, paragraphs","[(15,)]",SELECT count(*) FROM documents
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents,Count the number of documents.,"reference template types, templates, documents, paragraphs","[(15,)]",SELECT count(*) FROM documents
cre_Doc_Template_Mgt,"SELECT document_id ,  document_name ,  document_description FROM Documents","List document IDs, document names, and document descriptions for all documents.","reference template types, templates, documents, paragraphs","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]","SELECT T1.document_id,  T2.document_name,  T2.document_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id"
cre_Doc_Template_Mgt,"SELECT document_id ,  document_name ,  document_description FROM Documents","What are the ids, names, and descriptions for all documents?","reference template types, templates, documents, paragraphs","[(0, 'Introduction of OS', 'n'), (1, 'Understanding DB', 'y'), (3, 'Summer Show', 'u'), (76, 'Robbin CV', 'y'), (80, 'Welcome to NY', 'h'), (82, 'Data base', 'w'), (2394, 'Customer reviews', 'y'), (3830, 'Do not panic', 'k'), (33930, 'How Google people work', 'z'), (50123, 'Learning French', 'r'), (651512, 'How to write a CV', 'f'), (801801, 'How to read a book', 'w'), (3540024, 'Palm reading', 'y'), (16514113, 'A history of Arts', 'h'), (385906526, 'About Korea', 'b')]","SELECT T1.document_id,  T2.template_name,  T2.template_description FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id"
cre_Doc_Template_Mgt,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""",What is the document name and template id for document with description with the letter 'w' in it?,"reference template types, templates, documents, paragraphs","[('Data base', 11), ('How to read a book', 4)]","SELECT T1.document_name,  T2.template_id FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_description LIKE '%w%'"
cre_Doc_Template_Mgt,"SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE ""%w%""",Return the names and template ids for documents that contain the letter w in their description.,"reference template types, templates, documents, paragraphs","[('Data base', 11), ('How to read a book', 4)]","SELECT T1.document_name,  T1.document_id FROM Documents AS T1 JOIN Templates AS T2 ON T2.template_id  =  T1.template_id WHERE T2.template_description LIKE '%w%'"
cre_Doc_Template_Mgt,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","What is the document id, template id and description for document named ""Robbin CV""?","reference template types, templates, documents, paragraphs","[(76, 20, 'y')]","SELECT T1.document_id,  T1.template_id,  T2.template_description FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id WHERE T1.document_name  =  ""Robbin CV""<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  ""Robbin CV""","Return the document id, template id, and description for the document with the name Robbin CV.","reference template types, templates, documents, paragraphs","[(76, 20, 'y')]","SELECT document_id,  template_id,  template_description FROM documents WHERE document_name  =  ""Robbin CV"""
cre_Doc_Template_Mgt,SELECT count(DISTINCT template_id) FROM Documents,How many different templates do all document use?,"reference template types, templates, documents, paragraphs","[(12,)]",SELECT count(DISTINCT T1.template_name) FROM templates AS T1 JOIN documents AS T2 ON T2.template_id  =  T1.template_id
cre_Doc_Template_Mgt,SELECT count(DISTINCT template_id) FROM Documents,Count the number of different templates used for documents.,"reference template types, templates, documents, paragraphs","[(12,)]",SELECT count(DISTINCT template_code) FROM documents
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',How many documents are using the template with type code 'PPT'?,"reference template types, templates, documents, paragraphs","[(3,)]",SELECT count(*) FROM templates AS T1 JOIN Ref_template_types AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_description  =  'PowerPoint'
cre_Doc_Template_Mgt,SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT',Count the number of documents that use the PPT template type.,"reference template types, templates, documents, paragraphs","[(3,)]","SELECT count(*) FROM templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""PPT"""
cre_Doc_Template_Mgt,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id",Show all template ids and number of documents using each template.,"reference template types, templates, documents, paragraphs","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]","SELECT T1.template_id,  count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id"
cre_Doc_Template_Mgt,"SELECT template_id ,  count(*) FROM Documents GROUP BY template_id","What are all different template ids used for documents, and how many times were each of them used?","reference template types, templates, documents, paragraphs","[(1, 1), (4, 1), (6, 1), (7, 1), (8, 1), (10, 1), (11, 2), (14, 2), (20, 1), (21, 1), (22, 1), (25, 2)]","SELECT template_id,  count(*) FROM documents GROUP BY template_id"
cre_Doc_Template_Mgt,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",What is the id and type code for the template used by the most documents?,"reference template types, templates, documents, paragraphs","[(25, 'PP')]","SELECT T1.template_id,  T1.template_type_code FROM templates AS T1 JOIN documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1",Return the id and type code of the template that is used for the greatest number of documents.,"reference template types, templates, documents, paragraphs","[(25, 'PP')]","SELECT T1.template_id,  T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
cre_Doc_Template_Mgt,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,Show ids for all templates that are used by more than one document.,"reference template types, templates, documents, paragraphs","[(11,), (14,), (25,)]",SELECT T1.template_id FROM Templates AS T1 JOIN Documents AS T2 ON T2.template_id  =  T1.template_id GROUP BY T1.template_id HAVING count(*)  >  1
cre_Doc_Template_Mgt,SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1,What are the template ids of any templates used in more than a single document?,"reference template types, templates, documents, paragraphs","[(11,), (14,), (25,)]",SELECT template_id FROM templates GROUP BY template_id HAVING count(*)  >  1
cre_Doc_Template_Mgt,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,Show ids for all templates not used by any document.,"reference template types, templates, documents, paragraphs","[(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]",SELECT template_id FROM templates EXCEPT SELECT template_id FROM documents
cre_Doc_Template_Mgt,SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents,What are the ids for templates that are not used in any documents?,"reference template types, templates, documents, paragraphs","[(0,), (9,), (15,), (16,), (18,), (19,), (23,), (24,)]",SELECT template_id FROM templates EXCEPT SELECT t1.template_id FROM templates AS t1 JOIN documents AS t2 ON t2.template_id  =  t1.template_id
cre_Doc_Template_Mgt,SELECT count(*) FROM Templates,How many templates do we have?,"reference template types, templates, documents, paragraphs","[(20,)]",SELECT count(*) FROM templates
cre_Doc_Template_Mgt,SELECT count(*) FROM Templates,Count the number of templates.,"reference template types, templates, documents, paragraphs","[(20,)]",SELECT count(*) FROM templates
cre_Doc_Template_Mgt,"SELECT template_id ,  version_number ,  template_type_code FROM Templates","Show template ids, version numbers, and template type codes for all templates.","reference template types, templates, documents, paragraphs","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]","SELECT T1.template_id,  T1.template_version_number,  T2.template_type_code FROM Templates AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code"
cre_Doc_Template_Mgt,"SELECT template_id ,  version_number ,  template_type_code FROM Templates","What are the ids, version numbers, and type codes for each template?","reference template types, templates, documents, paragraphs","[(0, 5, 'PP'), (1, 9, 'PP'), (4, 4, 'BK'), (6, 2, 'PPT'), (7, 8, 'PPT'), (8, 3, 'BK'), (9, 2, 'BK'), (10, 1, 'PPT'), (11, 6, 'BK'), (14, 7, 'AD'), (15, 9, 'CV'), (16, 5, 'CV'), (18, 5, 'PP'), (19, 7, 'AD'), (20, 6, 'BK'), (21, 9, 'AD'), (22, 0, 'PP'), (23, 2, 'BK'), (24, 8, 'PP'), (25, 5, 'PP')]","SELECT T2.template_id,  T2.template_version_number,  T2.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code"
cre_Doc_Template_Mgt,SELECT DISTINCT template_type_code FROM Templates,Show all distinct template type codes for all templates.,"reference template types, templates, documents, paragraphs","[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]",SELECT DISTINCT template_type_code FROM Templates
cre_Doc_Template_Mgt,SELECT DISTINCT template_type_code FROM Templates,What are the different template type codes?,"reference template types, templates, documents, paragraphs","[('PP',), ('BK',), ('PPT',), ('AD',), ('CV',)]",SELECT DISTINCT template_type_code FROM Ref_Template_Types
cre_Doc_Template_Mgt,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",What are the ids of templates with template type code PP or PPT?,"reference template types, templates, documents, paragraphs","[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]",SELECT template_id FROM templates WHERE template_type_code  =  'PP' OR template_type_code  =  'PPT'
cre_Doc_Template_Mgt,"SELECT template_id FROM Templates WHERE template_type_code  =  ""PP"" OR template_type_code  =  ""PPT""",Return the ids of templates that have the code PP or PPT.,"reference template types, templates, documents, paragraphs","[(0,), (1,), (6,), (7,), (10,), (18,), (22,), (24,), (25,)]",SELECT template_id FROM templates WHERE template_code  =  'PP' UNION SELECT template_id FROM templates WHERE template_code  =  'PPT'
cre_Doc_Template_Mgt,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",How many templates have template type code CV?,"reference template types, templates, documents, paragraphs","[(2,)]","SELECT count(*) FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_code  =  ""CV"""
cre_Doc_Template_Mgt,"SELECT count(*) FROM Templates WHERE template_type_code  =  ""CV""",Count the number of templates of the type CV.,"reference template types, templates, documents, paragraphs","[(2,)]",SELECT count(*) FROM Ref_template_types WHERE template_type_code  =  'CV'
cre_Doc_Template_Mgt,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",What is the version number and template type code for the template with version number later than 5?,"reference template types, templates, documents, paragraphs","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]","SELECT template_type_code,  template_version_number FROM T1 JOIN Ref_Template_Types ON T1.template_type_code  =  Ref_Template_Types.template_type_code WHERE T1.template_version_number  >  5"
cre_Doc_Template_Mgt,"SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5",Return the version numbers and template type codes of templates with a version number greater than 5.,"reference template types, templates, documents, paragraphs","[(9, 'PP'), (8, 'PPT'), (6, 'BK'), (7, 'AD'), (9, 'CV'), (7, 'AD'), (6, 'BK'), (9, 'AD'), (8, 'PP')]","SELECT T1.template_type_code,  T2.template_version_number FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_version_number  >  5<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code",Show all template type codes and number of templates for each.,"reference template types, templates, documents, paragraphs","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]","SELECT T1.template_type_code,  count(*) FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code","What are the different template type codes, and how many templates correspond to each?","reference template types, templates, documents, paragraphs","[('AD', 3), ('BK', 6), ('CV', 2), ('PP', 6), ('PPT', 3)]","SELECT T1.template_type_code,  count(*) FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code"
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,Which template type code has most number of templates?,"reference template types, templates, documents, paragraphs","[('PP',)]",SELECT T2.template_type_code FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_id  =  T2.template_type_id GROUP BY T2.template_type_code ORDER BY count(*) DESC LIMIT 1
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1,Return the type code of the template type that the most templates belong to.,"reference template types, templates, documents, paragraphs","[('PP',)]",SELECT T2.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_id  =  T2.template_type_id GROUP BY T2.template_type_code ORDER BY count(*) DESC LIMIT 1
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,Show all template type codes with less than three templates.,"reference template types, templates, documents, paragraphs","[('CV',)]",SELECT template_type_code FROM Ref_template_types GROUP BY template_type_code HAVING count(*)  <  3
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3,What are the codes of template types that have fewer than 3 templates?,"reference template types, templates, documents, paragraphs","[('CV',)]",SELECT T2.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_id  =  T2.template_type_id GROUP BY T2.template_type_code HAVING count(*)  <  3
cre_Doc_Template_Mgt,"SELECT min(Version_Number) ,  template_type_code FROM Templates",What the smallest version number and its template type code?,"reference template types, templates, documents, paragraphs","[(0, 'PP')]","SELECT min(template_version_number),  template_type_code FROM templates"
cre_Doc_Template_Mgt,"SELECT min(Version_Number) ,  template_type_code FROM Templates","Return the lowest version number, along with its corresponding template type code.","reference template types, templates, documents, paragraphs","[(0, 'PP')]","SELECT min(template_version),  template_type_code FROM Templates GROUP BY template_type_code"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""","What is the template type code of the template used by document with the name ""Data base""?","reference template types, templates, documents, paragraphs","[('BK',)]","SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.template_id  =  T3.template_id WHERE T3.document_name  =  ""Data base""<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  ""Data base""",Return the template type code of the template that is used by a document named Data base.,"reference template types, templates, documents, paragraphs","[('BK',)]","SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN Documents AS T3 ON T2.template_id  =  T3.template_id WHERE T3.document_name  =  ""Data base""<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""",Show all document names using templates with template type code BK.,"reference template types, templates, documents, paragraphs","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]","SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T2.template_id  =  T1.template_id JOIN Ref_template_types AS T3 ON T2.template_type_code  =  T3.template_type_code WHERE T3.description  =  ""Book""<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  ""BK""",What are the names of documents that use templates with the code BK?,"reference template types, templates, documents, paragraphs","[('Robbin CV',), ('Data base',), ('How to read a book',), ('Palm reading',), ('About Korea',)]",SELECT T1.document_name FROM Documents AS T1 JOIN Templates AS T2 ON T2.template_id  =  T1.template_id WHERE T2.template_code  =  'BK'
cre_Doc_Template_Mgt,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code",Show all template type codes and the number of documents using each type.,"reference template types, templates, documents, paragraphs","[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]","SELECT T2.template_type_code,  count(*) FROM Documents AS T1 JOIN Ref_Template_Types AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T2.template_type_code"
cre_Doc_Template_Mgt,"SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code","What are the different template type codes, and how many documents use each type?","reference template types, templates, documents, paragraphs","[('AD', 3), ('BK', 5), ('PP', 4), ('PPT', 3)]","SELECT T1.template_type_code,  count(*) FROM Ref_template_types AS T1 JOIN Documents AS T2 ON T2.template_type_code  =  T1.template_type_code GROUP BY T1.template_type_code"
cre_Doc_Template_Mgt,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,Which template type code is used by most number of documents?,"reference template types, templates, documents, paragraphs","[('BK',)]",SELECT T1.template_type_code FROM Ref_template_types AS T1 JOIN documents AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
cre_Doc_Template_Mgt,SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1,Return the code of the template type that is most commonly used in documents.,"reference template types, templates, documents, paragraphs","[('BK',)]",SELECT T1.template_type_code FROM Ref_template_types AS T1 JOIN Documents AS T2 ON T1.template_type_code  =  T2.template_type_code GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,Show all template type codes that are not used by any document.,"reference template types, templates, documents, paragraphs","[('CV',)]",SELECT DISTINCT template_type_code FROM Ref_Template_Types EXCEPT SELECT template_type_code FROM Documents
cre_Doc_Template_Mgt,SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id,What are the codes of template types that are not used for any document?,"reference template types, templates, documents, paragraphs","[('CV',)]",SELECT template_type_code FROM Ref_template_types EXCEPT SELECT template_type_code FROM documents
cre_Doc_Template_Mgt,"SELECT template_type_code ,  template_type_description FROM Ref_template_types",Show all template type codes and descriptions.,"reference template types, templates, documents, paragraphs","[('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]","SELECT template_type_code,  template_type_description FROM Ref_template_types"
cre_Doc_Template_Mgt,"SELECT template_type_code ,  template_type_description FROM Ref_template_types",What are the type codes and descriptions for all template types?,"reference template types, templates, documents, paragraphs","[('PPT', 'Presentation'), ('CV', 'CV'), ('AD', 'Advertisement'), ('PP', 'Paper'), ('BK', 'Book')]","SELECT T1.template_type_code,  T2.template_type_description FROM Ref_Template_Types AS T1 JOIN Ref_Template_Types_Description AS T2 ON T1.template_type_code  =  T2.template_type_code"
cre_Doc_Template_Mgt,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""","What is the template type descriptions for template type code ""AD"".","reference template types, templates, documents, paragraphs","[('Advertisement',)]","SELECT template_type_descriptions FROM Ref_template_types WHERE template_type_code  =  ""AD"""
cre_Doc_Template_Mgt,"SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  ""AD""",Return the template type description of the template type with the code AD.,"reference template types, templates, documents, paragraphs","[('Advertisement',)]","SELECT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_type_code  =  ""AD"""
cre_Doc_Template_Mgt,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","What is the template type code for template type description ""Book"".","reference template types, templates, documents, paragraphs","[('BK',)]","SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book"""
cre_Doc_Template_Mgt,"SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  ""Book""","Return the type code of the template type with the description ""Book"".","reference template types, templates, documents, paragraphs","[('BK',)]","SELECT T1.template_type_code FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T1.template_type_description  =  ""Book"""
cre_Doc_Template_Mgt,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,What are the distinct template type descriptions for the templates ever used by any document?,"reference template types, templates, documents, paragraphs","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]",SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN templates AS T2 ON T1.template_type_code  =  T2.template_type_code JOIN documents AS T3 ON T2.template_id  =  T3.template_id<|eot_id|>
cre_Doc_Template_Mgt,SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID,Return the different descriptions for templates that have been used in a document.,"reference template types, templates, documents, paragraphs","[('Presentation',), ('Paper',), ('Book',), ('Advertisement',)]",SELECT DISTINCT T1.template_type_description FROM Ref_Template_Types AS T1 JOIN Templates AS T2 ON T1.template_type_code  =  T2.template_type_code WHERE T2.template_id IN (SELECT template_id FROM documents)
cre_Doc_Template_Mgt,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""","What are the template ids with template type description ""Presentation"".","reference template types, templates, documents, paragraphs","[(6,), (7,), (10,)]","SELECT template_id FROM Ref_template_types WHERE template_type_description  =  ""Presentation"""
cre_Doc_Template_Mgt,"SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  ""Presentation""",Return the ids corresponding to templates with the description 'Presentation'.,"reference template types, templates, documents, paragraphs","[(6,), (7,), (10,)]",SELECT template_id FROM templates WHERE template_description  =  'Presentation'
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs,How many paragraphs in total?,"reference template types, templates, documents, paragraphs","[(15,)]",SELECT count(*) FROM paragraphs
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs,Count the number of paragraphs.,"reference template types, templates, documents, paragraphs","[(15,)]",SELECT count(*) FROM Paragraphs
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',How many paragraphs for the document with name 'Summer Show'?,"reference template types, templates, documents, paragraphs","[(1,)]","SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Summer Show"""
cre_Doc_Template_Mgt,SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show',Count the number of paragraphs in the document named 'Summer Show'.,"reference template types, templates, documents, paragraphs","[(1,)]","SELECT count(*) FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Summer Show"""
cre_Doc_Template_Mgt,select other_details from paragraphs where paragraph_text like 'korea',Show paragraph details for paragraph with text 'Korea ' .,"reference template types, templates, documents, paragraphs","[(None,), (None,)]","SELECT T1.paragraph_details FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id JOIN Templates AS T3 ON T2.template_id  =  T3.template_id WHERE T1.paragraph_text  =  ""Korea """
cre_Doc_Template_Mgt,select other_details from paragraphs where paragraph_text like 'korea',What are the details for the paragraph that includes the text 'Korea ' ?,"reference template types, templates, documents, paragraphs","[(None,), (None,)]",SELECT T1.paragraph_details FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text LIKE '%Korea %'
cre_Doc_Template_Mgt,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",Show all paragraph ids and texts for the document with name 'Welcome to NY'.,"reference template types, templates, documents, paragraphs","[(16615, 'Japan'), (608931827, 'Micronesia')]","SELECT T3.paragraph_id,  T3.paragraph_text FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id JOIN paragraphs AS T3 ON T2.template_id  =  T3.template_id WHERE T1.document_name  =  ""Welcome to NY""<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'",What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?,"reference template types, templates, documents, paragraphs","[(16615, 'Japan'), (608931827, 'Micronesia')]","SELECT T1.paragraph_id,  T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Welcome to NY"""
cre_Doc_Template_Mgt,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""","Show all paragraph texts for the document ""Customer reviews"".","reference template types, templates, documents, paragraphs","[('Korea',), ('Ukraine',), ('Korea',)]","SELECT T3.paragraph_text FROM documents AS T1 JOIN templates AS T2 ON T1.template_id  =  T2.template_id JOIN paragraphs AS T3 ON T2.template_id  =  T3.template_id WHERE T1.document_name  =  ""Customer reviews"""
cre_Doc_Template_Mgt,"SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  ""Customer reviews""",What are the paragraph texts for the document with the name 'Customer reviews'?,"reference template types, templates, documents, paragraphs","[('Korea',), ('Ukraine',), ('Korea',)]","SELECT T3.paragraph_text FROM documents AS T1 JOIN template_paragraphs AS T2 ON T2.template_id  =  T1.template_id JOIN paragraphs AS T3 ON T3.paragraph_id  =  T2.paragraph_id WHERE T1.document_name  =  ""Customer reviews"""
cre_Doc_Template_Mgt,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id",Show all document ids and the number of paragraphs in each document. Order by document id.,"reference template types, templates, documents, paragraphs","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]","SELECT document_id,  count(*) FROM paragraphs GROUP BY document_id ORDER BY document_id"
cre_Doc_Template_Mgt,"SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id","Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.","reference template types, templates, documents, paragraphs","[(3, 1), (80, 2), (2394, 3), (3830, 1), (33930, 1), (50123, 1), (651512, 2), (3540024, 1), (16514113, 2), (385906526, 1)]","SELECT T1.document_id,  count(*) FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY T1.document_id"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","Show all document ids, names and the number of paragraphs in each document.","reference template types, templates, documents, paragraphs","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]","SELECT T1.document_id,  T1.document_name,  count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id","What are the ids and names of each document, as well as the number of paragraphs in each?","reference template types, templates, documents, paragraphs","[(3, 'Summer Show', 1), (80, 'Welcome to NY', 2), (2394, 'Customer reviews', 3), (3830, 'Do not panic', 1), (33930, 'How Google people work', 1), (50123, 'Learning French', 1), (651512, 'How to write a CV', 2), (3540024, 'Palm reading', 1), (16514113, 'A history of Arts', 2), (385906526, 'About Korea', 1)]","SELECT T1.document_id,  T1.document_name,  count(*) FROM Documents AS T1 JOIN Paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,List all document ids with at least two paragraphs.,"reference template types, templates, documents, paragraphs","[(80,), (2394,), (651512,), (16514113,)]",SELECT T1.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id HAVING count(*)  >=  2
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2,What are the ids of documents that have 2 or more paragraphs?,"reference template types, templates, documents, paragraphs","[(80,), (2394,), (651512,), (16514113,)]",SELECT T1.document_idFROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_idGROUP BY T1.document_idHAVING count(*)  >=  2
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",What is the document id and name with greatest number of paragraphs?,"reference template types, templates, documents, paragraphs","[(2394, 'Customer reviews')]","SELECT T1.document_id,  T2.document_name FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
cre_Doc_Template_Mgt,"SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1",Return the id and name of the document with the most paragraphs.,"reference template types, templates, documents, paragraphs","[(2394, 'Customer reviews')]","SELECT T1.document_id,  T1.document_name FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,What is the document id with least number of paragraphs?,"reference template types, templates, documents, paragraphs","[(3,)]",SELECT T2.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T2.document_id ORDER BY count(*) ASC LIMIT 1
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1,Return the id of the document with the fewest paragraphs.,"reference template types, templates, documents, paragraphs","[(3,)]",SELECT T1.document_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) ASC LIMIT 1
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,What is the document id with 1 to 2 paragraphs?,"reference template types, templates, documents, paragraphs","[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]",SELECT T2.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T2.document_id HAVING count(*) BETWEEN 1 AND 2
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2,Give the ids of documents that have between one and two paragraphs.,"reference template types, templates, documents, paragraphs","[(3,), (80,), (3830,), (33930,), (50123,), (651512,), (3540024,), (16514113,), (385906526,)]",SELECT T1.document_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id HAVING count(*) BETWEEN 1 AND 2
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',Show the document id with paragraph text 'Brazil' and 'Ireland'.,"reference template types, templates, documents, paragraphs","[(16514113,)]",SELECT T1.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text  =  'Brazil' INTERSECT SELECT T1.document_id FROM paragraphs AS T1 JOIN documents AS T2 ON T1.document_id  =  T2.document_id WHERE T1.paragraph_text  =  'Ireland'
cre_Doc_Template_Mgt,SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland',What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?,"reference template types, templates, documents, paragraphs","[(16514113,)]",SELECT T1.document_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.paragraph_id WHERE T2.paragraph_text  =  'Brazil' INTERSECT SELECT T1.document_id FROM documents AS T1 JOIN paragraphs AS T2 ON T1.document_id  =  T2.paragraph_id WHERE T2.paragraph_text  =  'Ireland'<|eot_id|>
course_teach,SELECT count(*) FROM teacher,How many teachers are there?,"course, teacher, course arrange","[(7,)]",SELECT count(*) FROM teacher
course_teach,SELECT count(*) FROM teacher,What is the total count of teachers?,"course, teacher, course arrange","[(7,)]",SELECT count(*) FROM teacher
course_teach,SELECT Name FROM teacher ORDER BY Age ASC,List the names of teachers in ascending order of age.,"course, teacher, course arrange","[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]",SELECT T1.teacher_name FROM teacher AS T1 JOIN course_arrange AS T2 ON T2.teacher_id  =  T1.teacher_id ORDER BY T1.age ASC
course_teach,SELECT Name FROM teacher ORDER BY Age ASC,What are the names of the teachers ordered by ascending age?,"course, teacher, course arrange","[('Vicente Carretero',), ('Gustaaf Deloor',), ('Joseph Huts',), ('John Deloor',), ('Lucy Wong',), ('Anne Walker',), ('Kearsley Brown',)]",SELECT T1.teacher_name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id ORDER BY T1.age ASC
course_teach,"SELECT Age ,  Hometown FROM teacher",What are the age and hometown of teachers?,"course, teacher, course arrange","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]","SELECT T1.age,  T1.headquarter FROM teacher AS T1"
course_teach,"SELECT Age ,  Hometown FROM teacher",What is the age and hometown of every teacher?,"course, teacher, course arrange","[('32', 'Blackrod Urban District'), ('29', 'Bolton County Borough'), ('26', 'Farnworth Municipal Borough'), ('33', 'Horwich Urban District'), ('45', 'Kearsley Urban District'), ('41', 'Little Lever Urban District'), ('39', 'Turton Urban District')]",<|start_header_id|>teacher AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.courses_taught  =  (SELECT max(courses_taught) FROM teacher)
course_teach,"select name from teacher where hometown != ""little lever urban district""",List the name of teachers whose hometown is not `` Little Lever Urban District '' .,"course, teacher, course arrange","[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]","SELECT T2.teacher_details FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.hometown!= ""Little Lever Urban District"""
course_teach,"select name from teacher where hometown != ""little lever urban district""",What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?,"course, teacher, course arrange","[('Joseph Huts',), ('Gustaaf Deloor',), ('Vicente Carretero',), ('John Deloor',), ('Kearsley Brown',), ('Anne Walker',), ('Lucy Wong',)]",SELECT T2.teacher_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.address_hometown!= 'Little Lever Urban District'
course_teach,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,Show the name of teachers aged either 32 or 33?,"course, teacher, course arrange","[('Joseph Huts',), ('John Deloor',)]",SELECT T1.teacher_name FROM teacher AS T1 WHERE T1.teacher_age  =  32 OR T1.teacher_age  =  33
course_teach,SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33,What are the names of the teachers who are aged either 32 or 33?,"course, teacher, course arrange","[('Joseph Huts',), ('John Deloor',)]",SELECT teacher_name FROM teacher WHERE age  =  32 OR age  =  33
course_teach,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,What is the hometown of the youngest teacher?,"course, teacher, course arrange","[('Farnworth Municipal Borough',)]",SELECT T1.address FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T2.date_of_birth  =  (SELECT min(T3.date_of_birth) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN teacher AS T3 ON T2.date_of_birth  =  T3.date_of_birth)<|eot_id|>
course_teach,SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1,Where is the youngest teacher from?,"course, teacher, course arrange","[('Farnworth Municipal Borough',)]",SELECT T2.address FROM teacher AS T1 JOIN addresses AS T2 ON T1.address_id  =  T2.address_id ORDER BY T1.age DESC LIMIT 1
course_teach,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown",Show different hometown of teachers and the number of teachers from each hometown.,"course, teacher, course arrange","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]","SELECT hometown,  count(*) FROM teacher GROUP BY hometown"
course_teach,"SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown","For each hometown, how many teachers are there?","course, teacher, course arrange","[('Blackrod Urban District', 1), ('Bolton County Borough', 1), ('Farnworth Municipal Borough', 1), ('Horwich Urban District', 1), ('Kearsley Urban District', 1), ('Little Lever Urban District', 1), ('Turton Urban District', 1)]","SELECT count(*),  T1.home_town FROM teacher AS T1 JOIN course_arrange AS T2 ON T2.teacher_id  =  T1.teacher_id GROUP BY T1.home_town"
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,List the most common hometown of teachers.,"course, teacher, course arrange","[('Turton Urban District',)]",SELECT T2.address FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T2.address ORDER BY count(*) DESC LIMIT 1
course_teach,SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1,What is the most commmon hometowns for teachers?,"course, teacher, course arrange","[('Turton Urban District',)]",SELECT T1.address_hometown FROM teacher AS T1 GROUP BY T1.address_hometown ORDER BY count(*) DESC LIMIT 1
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",Show names of teachers and the courses they are arranged to teach.,"course, teacher, course arrange","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]","SELECT T2.teacher_name,  T1.course_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID",What is the name of each teacher and what course they teach?,"course, teacher, course arrange","[('Kearsley Brown', 'Math'), ('Vicente Carretero', 'Math'), ('Gustaaf Deloor', 'Science'), ('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Lucy Wong', 'Music')]","SELECT T1.course_name,  T3.teacher_name FROM course_arrange AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id JOIN teacher AS T3 ON T1.teacher_id  =  T3.teacher_id"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.,"course, teacher, course arrange","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]","SELECT T2.teacher_name,  T1.course_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id ORDER BY T2.teacher_name"
course_teach,"SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name",What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?,"course, teacher, course arrange","[('Anne Walker', 'History'), ('Anne Walker', 'Bible'), ('Gustaaf Deloor', 'Science'), ('Kearsley Brown', 'Math'), ('Lucy Wong', 'Music'), ('Vicente Carretero', 'Math')]","SELECT T1.course_name,  T3.teacher_name FROM course AS T1 JOIN course_arrange AS T2 ON T1.course_id  =  T2.course_id JOIN teacher AS T3 ON T2.teacher_id  =  T3.teacher_id ORDER BY T3.teacher_name<|eot_id|>"
course_teach,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""",Show the name of the teacher for the math course.,"course, teacher, course arrange","[('Kearsley Brown',), ('Vicente Carretero',)]",SELECT T2.teacher_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id JOIN course AS T3 ON T1.course_id  =  T3.course_id WHERE T3.course_name  = 'math'
course_teach,"SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  ""Math""",What are the names of the people who teach math courses?,"course, teacher, course arrange","[('Kearsley Brown',), ('Vicente Carretero',)]",SELECT T1.course_name FROM course AS T1 JOIN course_arrange AS T2 ON T1.course_id  =  T2.course_id JOIN teacher AS T3 ON T2.teacher_id  =  T3.teacher_id WHERE T1.course_name  =  'Math'
course_teach,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",Show names of teachers and the number of courses they teach.,"course, teacher, course arrange","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]","SELECT T1.teacher_name,  COUNT(*) FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_name"
course_teach,"SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name",What are the names of the teachers and how many courses do they teach?,"course, teacher, course arrange","[('Anne Walker', 2), ('Gustaaf Deloor', 1), ('Kearsley Brown', 1), ('Lucy Wong', 1), ('Vicente Carretero', 1)]","SELECT T2.teacher_name,  count(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id"
course_teach,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,Show names of teachers that teach at least two courses.,"course, teacher, course arrange","[('Anne Walker',)]",SELECT T2.teacher_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2
course_teach,SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2,What are the names of the teachers who teach at least two courses?,"course, teacher, course arrange","[('Anne Walker',)]",SELECT T1.teacher_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  >=  2
course_teach,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),List the names of teachers who have not been arranged to teach courses.,"course, teacher, course arrange","[('Joseph Huts',), ('John Deloor',)]",SELECT T2.teacher_name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.teacher_id  =  T2.teacher_id WHERE T1.arrange_id NOT IN (SELECT arrange_id FROM course_arrange)
course_teach,SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange),What are the names of the teachers whose courses have not been arranged?,"course, teacher, course arrange","[('Joseph Huts',), ('John Deloor',)]",SELECT T1.teacher_name FROM teacher AS T1 JOIN course_arrange AS T2 ON T1.teacher_id  =  T2.teacher_id GROUP BY T1.teacher_id HAVING count(*)  =  0
museum_visit,SELECT count(*) FROM visitor WHERE age  <  30,How many visitors below age 30 are there?,"museum, customer, visit","[(3,)]",SELECT count(*) FROM visit WHERE customer_age  <  30
museum_visit,SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC,"Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.","museum, customer, visit","[('Gonzalo Higuaín ',), ('Fernando Gago',), ('Guti Midfielder',)]",SELECT T1.customer_name FROM Customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.membership_level  >  4 ORDER BY T1.membership_level DESC
museum_visit,SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4,What is the average age of the visitors whose membership level is not higher than 4?,"museum, customer, visit","[(36.0,)]",SELECT avg(T2.customer_age) FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.membership_level  <=  4
museum_visit,"SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC","Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.","museum, customer, visit","[('Fernando Gago', 6), ('Gonzalo Higuaín ', 8), ('Guti Midfielder', 5)]","SELECT T1.museum_name,  T1.membership_level FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id WHERE T1.membership_level  >  4 ORDER BY T2.customer_age DESC"
museum_visit,"SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1",Find the id and name of the museum that has the most staff members?,"museum, customer, visit","[(1, 'Plaza Museum')]","SELECT T1.museum_id,  T1.museum_name FROM museum AS T1 ORDER BY T1.staff_num DESC LIMIT 1"
museum_visit,SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009,Find the average number of staff working for the museums that were open before 2009.,"museum, customer, visit","[(31.333333333333332,)]","SELECT avg(T1.staff_num) FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id WHERE T2.visit_date  <  ""2009-01-01"""
museum_visit,"SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'",What are the opening year and staff number of the museum named Plaza Museum?,"museum, customer, visit","[(62, '2000')]","SELECT open_year,  num_staff FROM museum WHERE museum_name  =  ""Plaza Museum"""
museum_visit,SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010),find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.,"museum, customer, visit","[('Plaza Museum',), ('Capital Plaza Museum',), ('Jefferson Development Museum',)]",SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_date  >  '2010-01-01')
museum_visit,"SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1","find the id, name and age for visitors who visited some museums more than once.","museum, customer, visit","[(3, 'Arjen Robben', 27), (5, 'Fernando Gago', 36), (6, 'Rafael van der Vaart', 25)]","SELECT T1.customer_id,  T1.customer_first_name,  T1.customer_last_name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >  1<|eot_id|>"
museum_visit,"SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1","What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?","museum, customer, visit","[('3', 'Arjen Robben', 1)]","SELECT T1.customer_id,  T2.customer_name,  T2.membership_level FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(T1.ticket_price) DESC LIMIT 1"
museum_visit,"SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1",What are the id and name of the museum visited most times?,"museum, customer, visit","[(2, 'Capital Plaza Museum')]","SELECT T3.museum_id,  T2.museum_name FROM visit AS T1 JOIN museum AS T2 ON T1.museum_id  =  T2.museum_id JOIN visit AS T3 ON T3.museum_id  =  T2.museum_id GROUP BY T3.museum_id ORDER BY count(*) DESC LIMIT 1"
museum_visit,SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit),What is the name of the museum that had no visitor yet?,"museum, customer, visit","[('Jefferson Development Museum',), ('RiverPark Museum',), ('Place Tower Museum',), ('Central City District Residential Museum',)]",SELECT T1.museum_name FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id GROUP BY T1.museum_id HAVING count(*)  =  0
museum_visit,"SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1",Find the name and age of the visitor who bought the most tickets at once.,"museum, customer, visit","[('Arjen Robben', 27)]","SELECT T1.customer_first_name,  T1.customer_last_name,  T1.age FROM customer AS T1 JOIN visit AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1"
museum_visit,"SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit",What are the average and maximum number of tickets bought in all visits?,"museum, customer, visit","[(10.5, 24)]","SELECT avg(T1.number_of_tickets),  max(T1.number_of_tickets) FROM visit AS T1"
museum_visit,SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1,What is the total ticket expense of the visitors whose membership level is 1?,"museum, customer, visit","[(570.84,)]",SELECT sum(T2.ticket_price) FROM visit AS T1 JOIN customer AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.membership_level  =  1
museum_visit,SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011,What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?,"museum, customer, visit","[('Fernando Gago',)]",SELECT T3.visit_id FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id JOIN visit AS T3 ON T3.visit_id IN (SELECT T3.visit_id FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id WHERE T1.opening_year  <  2009 INTERSECT SELECT T3.visit_id FROM museum AS T1 JOIN visit AS T2 ON T1.museum_id  =  T2.museum_id WHERE T1.opening_year  >  2011)<|eot_id|>
museum_visit,SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010),Find the number of visitors who did not visit any museum opened after 2010.,"museum, customer, visit","[(3,)]",SELECT count(*) FROM visit WHERE visit_id NOT IN (SELECT visit_id FROM visit WHERE museum_opening_year  >  2010)
museum_visit,SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008,How many museums were opened after 2013 or before 2008?,"museum, customer, visit","[(1,)]",SELECT count(*) FROM museum WHERE opened_year  >  2013 OR opened_year  <  2008
battle_death,SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured',How many ships ended up being 'Captured'?,"battle, ship, death","[(4,)]",SELECT count(*) FROM ship WHERE outcome  =  'Captured'
battle_death,"SELECT name ,  tonnage FROM ship ORDER BY name DESC",List the name and tonnage ordered by in descending alphaetical order for the names.,"battle, ship, death","[('Three Brothers', 't'), ('Mary', 't'), ('Lettice', 't'), ('HMS Avon', '391'), ('HMS Atalanta', '225'), ('Bon Accord', 't'), ('Bacchus', 't')]","SELECT name,  tonnage FROM ship ORDER BY name DESC"
battle_death,"SELECT name ,  date FROM battle","List the name, date and result of each battle.","battle, ship, death","[('Battle of Adrianople', '14 April 1205'), ('Battle of Serres', 'June 1205'), ('Battle of Rusion', '31 January 1206'), ('Battle of Rodosto', 'February 1206'), ('Battle of Messinopolis', '4 September 1207'), ('Battle of Boruy', 'June 1205'), ('Battle of Philippopolis', '31 June 1208'), ('Siege of Constantinople', '1235')]","SELECT T1.battle_name,  T1.date_battle,  T1.result FROM battle AS T1"
battle_death,"SELECT max(killed) ,  min(killed) FROM death",What is maximum and minimum death toll caused each time?,"battle, ship, death","[(29, 0)]","SELECT max(T2.death_toll),  min(T2.death_toll) FROM battle AS T1 JOIN death AS T2 ON T1.battle_id  =  T2.battle_id"
battle_death,SELECT avg(injured) FROM death,What is the average number of injuries caused each time?,"battle, ship, death","[(1.0769230769230769,)]",SELECT avg(Injured) FROM death
battle_death,"SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'",What are the death and injury situations caused by the ship with tonnage 't'?,"battle, ship, death","[(8, 0), (3, 0), (25, 0), (2, 0), (0, 0), (4, 5), (0, 0), (29, 0), (0, 0), (0, 0), (14, 0)]","SELECT T1.death_situation, T1.injury_situation FROM death AS T1 JOIN battle AS T2 ON T2.battle_id  =  T1.battle_id JOIN ship AS T3 ON T3.ship_id  =  T2.ship_id WHERE T3.tonnage  =  't'"
battle_death,"SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'",What are the name and results of the battles when the bulgarian commander is not 'Boril',"battle, ship, death","[('Battle of Adrianople', 'Bulgarian victory'), ('Battle of Serres', 'Bulgarian victory'), ('Battle of Rusion', 'Bulgarian victory'), ('Battle of Rodosto', 'Bulgarian victory'), ('Battle of Messinopolis', 'Bulgarian victory'), ('Siege of Constantinople', 'Two Year Truce')]","SELECT T1.battle_name,  T1.results FROM battle AS T1 JOIN ship AS T2 ON T1.ship_id  =  T2.ship_id JOIN death AS T3 ON T1.battle_id  =  T3.battle_id WHERE T3.nation  =  'Bulgarian' AND T3.commander!= 'Boril'"
battle_death,"SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'",What are the different ids and names of the battles that lost any 'Brig' type shipes?,"battle, ship, death","[(8, 'Siege of Constantinople'), (7, 'Battle of Philippopolis'), (6, 'Battle of Boruy'), (5, 'Battle of Messinopolis'), (4, 'Battle of Rodosto')]","SELECT DISTINCT T1.battle_id,  T2.battle_name FROM battle AS T1 JOIN ship AS T2 ON T1.ship_id  =  T2.ship_id WHERE T2.type_of_ship  =  'Brig' AND T1.outcome  =  'Lost'"
battle_death,"SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10",What are the ids and names of the battles that led to more than 10 people killed in total.,"battle, ship, death","[(5, 'Battle of Messinopolis'), (6, 'Battle of Boruy'), (8, 'Siege of Constantinople')]","SELECT T1.battle_id,  T1.battle_name FROM battle AS T1 JOIN death AS T2 ON T1.battle_id  =  T2.battle_id GROUP BY T1.battle_id HAVING sum(T2.num Killed)  >  10"
battle_death,"SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",What is the ship id and name that caused most total injuries?,"battle, ship, death","[(5, 'Three Brothers')]","SELECT T1.ship_id,  T1.ship_name FROM ship AS T1 JOIN battle AS T2 ON T2.ship_id  =  T1.ship_id JOIN death AS T3 ON T3.battle_id  =  T2.battle_id GROUP BY T1.ship_id ORDER BY sum(T3.injured) DESC LIMIT 1"
battle_death,SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I',What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?,"battle, ship, death","[('Battle of Adrianople',)]",SELECT DISTINCT T1.battle_name FROM battle AS T1 JOIN ship AS T2 ON T1.battle_id  =  T2.battle_id WHERE T2.commander  =  'Kaloyan' INTERSECT SELECT DISTINCT T1.battle_name FROM battle AS T1 JOIN ship AS T2 ON T1.battle_id  =  T2.battle_id WHERE T2.commander  =  'Baldwin I'<|eot_id|>
battle_death,SELECT count(DISTINCT RESULT) FROM battle,How many different results are there for the battles?,"battle, ship, death","[(3,)]",SELECT count(DISTINCT T1.result) FROM battle AS T1 JOIN ship AS T2 ON T1.ship_id  =  T2.ship_id
battle_death,SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );,How many battles did not lose any ship with tonnage '225'?,"battle, ship, death","[(7,)]",SELECT count(*) FROM battle WHERE battle_id NOT IN ( SELECT battle_id FROM ships WHERE tonnage  =  225 EXCEPT SELECT tonnage FROM ships )
battle_death,"SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'",List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta',"battle, ship, death","[('Siege of Constantinople', '1235')]","SELECT T1.battle_name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T2.ship_id  =  T1.ship_id WHERE T2.ship_name  =  'Lettice' INTERSECT SELECT T1.battle_name,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T2.ship_id  =  T1.ship_id WHERE T2.ship_name  =  'HMS Atalanta'<|eot_id|>"
battle_death,"SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'","Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.","battle, ship, death","[('Battle of Adrianople', 'Bulgarian victory', 'Kaloyan'), ('Battle of Rusion', 'Bulgarian victory', 'Kaloyan'), ('Battle of Serres', 'Bulgarian victory', 'Kaloyan')]","SELECT T1.battle_name,  T1.result,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.ship_id  =  T2.ship_id WHERE T2.location!= 'English Channel'"
battle_death,SELECT note FROM death WHERE note LIKE '%East%',What are the notes of the death events which has substring 'East'?,"battle, ship, death","[('East Champaran, Bihar',)]",SELECT T1.battle_notes FROM battle AS T1 JOIN death AS T2 ON T1.battle_id  =  T2.battle_id WHERE T2.battle_details LIKE '%East%'
student_transcripts_tracking,"SELECT line_1 ,  line_2 FROM addresses",what are all the addresses including line 1 and line 2?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]","SELECT T1.address_line_1,  T1.address_line_2FROM Addresses AS T1"
student_transcripts_tracking,"SELECT line_1 ,  line_2 FROM addresses",What is the first and second line for all addresses?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2294 Grant Square Apt. 235', 'Apt. 370'), ('3999 Aufderhar Ways Suite 593', 'Apt. 388'), ('67942 Carlotta Ferry Apt. 686', 'Apt. 583'), ('0144 Lamar Plaza Apt. 346', 'Suite 703'), ('858 Peggie Bypass Suite 212', 'Apt. 335'), ('16998 Mraz Lodge', 'Apt. 689'), ('193 Marlin Brook', 'Apt. 406'), ('202 Hessel Views Apt. 468', 'Apt. 305'), ('0643 Muller Vista', 'Suite 383'), ('7081 Eda Center', 'Suite 830'), ('9283 Schulist Falls Apt. 037', 'Suite 239'), ('979 Haag Shores Suite 656', 'Apt. 468'), ('492 Wilkinson Route', 'Suite 865'), ('186 Evan Motorway Apt. 409', 'Suite 079'), ('74046 Metz Walk Apt. 113', 'Suite 674')]","SELECT T1.address_line_1,  T1.address_line_2 FROM Addresses AS T1"
student_transcripts_tracking,SELECT count(*) FROM Courses,How many courses in total are listed?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(15,)]",SELECT count(*) FROM COURSES
student_transcripts_tracking,SELECT count(*) FROM Courses,How many courses are there?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(15,)]",SELECT count(*) FROM COURSES
student_transcripts_tracking,SELECT course_description FROM Courses WHERE course_name  =  'math',How is the math course described?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('q',)]",SELECT T1.course_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Math'
student_transcripts_tracking,SELECT course_description FROM Courses WHERE course_name  =  'math',What are the descriptions for all the math courses?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('q',)]","SELECT T1.course_description FROM Courses AS T1 JOIN Transcript_Contents AS T2 ON T1.course_id  =  T2.course_id JOIN Transcripts AS T3 ON T2.transcript_id  =  T3.transcript_id WHERE T1.course_name  =  ""Math"""
student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code of the address in the city Port Chelsea?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('148',)]","SELECT T1.zip_postal_code FROM Addresses AS T1 JOIN cities AS T2 ON T1.city_id  =  T2.city_id WHERE T2.city_name  =  ""Port Chelsea"""
student_transcripts_tracking,SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea',What is the zip code for Port Chelsea?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('148',)]","SELECT T2.address_zip_code FROM Addresses AS T1 JOIN Departments AS T2 ON T1.address_id  =  T2.department_address WHERE T2.department_name  =  ""Port Chelsea"""
student_transcripts_tracking,"SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1",Which department offers the most number of degrees? List department name and id.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('statistics', 8)]","SELECT T1.department_name,  T1.department_id FROM degree_programs AS T2 JOIN degree_programs_depts AS T1 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1",What is the name and id of the department with the most number of degrees ?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('statistics', 8)]","SELECT degree_programs.department_name,  degree_programs.dept_id FROM degree_programs ORDER BY number_of_degrees DESC LIMIT 1"
student_transcripts_tracking,SELECT count(DISTINCT department_id) FROM Degree_Programs,How many departments offer any degree?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(10,)]",SELECT count(DISTINCT T1.dept_id) FROM courses AS T1 JOIN degree_programs AS T2 ON T1.dept_id  =  T2.dept_id
student_transcripts_tracking,SELECT count(DISTINCT department_id) FROM Degree_Programs,How many different departments offer degrees?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(10,)]",SELECT count(DISTINCT T1.dept_name) FROM departments AS T1 JOIN degree_programs AS T2 ON T1.dept_name  =  T2.dept_name
student_transcripts_tracking,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,How many different degree names are offered?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(3,)]",SELECT count(DISTINCT T1.degree_name) FROM degree_programs AS T1 JOIN students AS T2 ON T2.degree_program_id  =  T1.degree_program_id
student_transcripts_tracking,SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs,How many different degrees are offered?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(3,)]",SELECT count(DISTINCT T1.degree) FROM degree_programs AS T1 JOIN students AS T2 ON T2.degree_program_id  =  T1.degree_program_id
student_transcripts_tracking,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',How many degrees does the engineering department offer?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(0,)]","SELECT count(*) FROM degree_programs AS T1 JOIN degree_programs_in_depts AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN depts AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  ""Engineering""<|eot_id|>"
student_transcripts_tracking,SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer',How many degrees does the engineering department have?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(0,)]","SELECT count(*) FROM degree_programs AS T1 JOIN degree_programs_in_departments AS T2 ON T1.degree_program_id  =  T2.degree_program_id JOIN departments AS T3 ON T2.department_code  =  T3.department_code WHERE T3.department_name  =  ""Engineering"""
student_transcripts_tracking,"SELECT section_name ,  section_description FROM Sections",What are the names and descriptions of all the sections?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]","SELECT T1.course_name,  T1.course_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id"
student_transcripts_tracking,"SELECT section_name ,  section_description FROM Sections",What are the names and descriptions for all the sections?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('a', 'non'), ('b', 'voluptatem'), ('c', 'qui'), ('d', 'voluptas'), ('e', 'ex'), ('f', 'doloremque'), ('g', 'provident'), ('h', 'et'), ('j', 'quis'), ('k', 'nesciunt'), ('l', 'ad'), ('o', 'et'), ('p', 'facilis'), ('u', 'reprehenderit'), ('y', 'qui')]","SELECT T1.course_name,  T1.course_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id"
student_transcripts_tracking,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",What are the names and id of courses having at most 2 sections?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]","SELECT T1.course_name,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <= 2"
student_transcripts_tracking,"SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2",What are the names and ids of every course with less than 2 sections?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('ds', 1), ('math', 2), ('en', 4), ('fr', 5), ('la', 6), ('cal', 7), ('nlp', 8), ('dl', 9), ('ml', 10), ('db', 12), ('pl', 14)]","SELECT T1.course_name,  T1.course_idFROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_idGROUP BY T1.course_idHAVING count(*)  <  2"
student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,List the section_name in reversed lexicographical order.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]",SELECT section_name FROM sections ORDER BY section_name DESC
student_transcripts_tracking,SELECT section_name FROM Sections ORDER BY section_name DESC,What are the names of the sections in reverse alphabetical order?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('y',), ('u',), ('p',), ('o',), ('l',), ('k',), ('j',), ('h',), ('g',), ('f',), ('e',), ('d',), ('c',), ('b',), ('a',)]",SELECT T1.section_name FROM SEMESTERS AS T1 JOIN SECTIONS AS T2 ON T1.semester_id  =  T2.semester_id ORDER BY T1.section_name DESC
student_transcripts_tracking,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1",What is the semester which most student registered in? Show both the name and the id.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('summer 2010', 2)]","SELECT T2.semester_name,  T2.semester_idFROM student_enrolment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_idGROUP BY T2.semester_idORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1","For each semester, what is the name and id of the one with the most students registered?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('summer 2010', 2)]","SELECT T2.semester_name,  T2.semester_id FROM student_enrolment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',What is the description of the department whose name has the substring the computer?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('error',)]",SELECT T3.department_description FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id JOIN transcript_contents AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T1.department_name LIKE '%the computer%'<|eot_id|>
student_transcripts_tracking,SELECT department_description FROM Departments WHERE department_name LIKE '%computer%',What is the department description for the one whose name has the word computer?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('error',)]",SELECT T1.department_description FROM departments AS T1 JOIN degree_programs AS T2 ON T1.department_id  =  T2.department_id WHERE T2.degree_program_name LIKE '%Computer%'
student_transcripts_tracking,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]","SELECT T2.student_first_name,  T2.student_middle_name,  T2.student_last_name,  T1.student_id FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.semester_id  =  ""Spring 2016"" AND T1.campus_id  =  ""Main"" AND T1.degree_program_id  =  ""Math"" GROUP BY T1.student_id HAVING count(*)  =  2<|eot_id|>"
student_transcripts_tracking,"SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2","What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Jarvis', 'Aaliyah', 'Carroll', 4), ('Reva', 'Golda', 'Osinski', 9), ('Jordy', 'Osborne', 'Rempel', 14)]","SELECT T1.student_first_name,  T1.student_middle_name,  T1.student_last_name,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id WHERE T2.semester_id  =  ""Spring 2016"" AND T2.courses_enrolled  =  2"
student_transcripts_tracking,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]","SELECT T4.student_first_name,  T4.student_middle_name,  T4.student_last_name FROM Student_enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_programs AS T3 ON T3.degree_program_id  =  T1.degree_program_id JOIN Students AS T4 ON T3.bachelor_degree_program_student_id  =  T4.student_id"
student_transcripts_tracking,"SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'","What are the first, middle, and last names for everybody enrolled in a Bachelors program?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Reva', 'Golda', 'Osinski'), ('Frida', 'Aisha', 'Huel'), ('Jarvis', 'Aaliyah', 'Carroll'), ('Milton', 'Vaughn', 'Christiansen'), ('Stanford', 'Mona', 'Rogahn')]","SELECT T1.student_first_name,  T1.student_middle_name,  T1.student_last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T3.degree_program_id  =  T2.degree_program_id WHERE T3.degree_program_name  =  ""Bachelor"""
student_transcripts_tracking,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,Find the kind of program which most number of students are enrolled in?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Bachelor',)]",SELECT T1.degree_program_kind FROM degree_programs AS T1 JOIN student_enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_kind ORDER BY count(*) DESC LIMIT 1
student_transcripts_tracking,SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1,What is the degree summary name that has the most number of students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Bachelor',)]",<|start_header_id|>sql SELECT T2.degree_summary_name FROM student_enrolment AS T1 JOIN degree_programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T2.degree_summary_name ORDER BY count(*) DESC LIMIT 1
student_transcripts_tracking,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",Find the program which most number of students are enrolled in. List both the id and the summary.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9, 'Bachelor')]","SELECT T1.degree_program_id,  T2.degree_program_summary FROM student_enrolment AS T1 JOIN degree_programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1",What is the program id and the summary of the degree that has the most students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9, 'Bachelor')]","SELECT T1.degree_program_id,  T3.degree_program_summary FROM Student_enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_programs AS T3 ON T3.degree_program_id  =  T1.enrolled_in GROUP BY T1.enrolled_in ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(7, 'Frida', 'Aisha', 'Huel', 3, 7)]","SELECT T1.student_id,  count(*),  T1.student_first_name,  T1.student_middle_name,  T1.student_last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1","What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(7, 'Frida', 'Aisha', 'Huel', 3, 7)]","SELECT T1.student_id,  count(*),  T2.student_first_name,  T2.student_middle_name,  T2.student_last_name FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),Which semesters do not have any student enrolled? List the semester name.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]",SELECT T2.semester_name FROM student_enrolment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id HAVING count(*)  =  0
student_transcripts_tracking,SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment ),What is the name of the semester with no students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('fall 2010',), ('spring 2013',), ('spring 2014',), ('spring 2016',), ('spring 2017',), ('winter 2018',)]",SELECT T2.semester_name FROM student_enrolment AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T2.semester_id HAVING count(*)  =  0
student_transcripts_tracking,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,What are all the course names of the courses which ever have students enrolled in?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]",SELECT T4.course_name FROM student_enrolment AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id JOIN courses AS T3 ON T2.course_id  =  T3.course_id JOIN transcript_contents AS T4 ON T4.course_id  =  T3.course_id WHERE T4.rolename  =  'Student' GROUP BY T4.course_id
student_transcripts_tracking,SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id,What are the names of all courses that have some students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('la',), ('pl',), ('ai',), ('math',), ('ml',), ('os',), ('en',), ('nlp',), ('rs',), ('db',)]",SELECT T3.course_name FROM student_enrolment AS T1 JOIN student_enrolment_courses AS T2 ON T1.transcript_id  =  T2.transcript_id JOIN courses AS T3 ON T2.course_id  =  T3.course_id
student_transcripts_tracking,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,What's the name of the course with most number of enrollments?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('rs',)]",SELECT T3.course_name FROM student_enrolment AS T1 JOIN student_enrolment_courses AS T2 ON T1.enrolment_id  =  T2.enrolment_id JOIN courses AS T3 ON T2.course_id  =  T3.course_id GROUP BY T3.course_name ORDER BY count(*) DESC LIMIT 1
student_transcripts_tracking,SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1,What is the name of the course with the most students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('rs',)]",SELECT T3.course_name FROM student_enrolment AS T1 JOIN student_enrolment_courses AS T2 ON T1.enrolment_id = T2.enrolment_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_name ORDER BY count(*) DESC LIMIT 1
student_transcripts_tracking,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Gleichner',), ('Weimann',)]",SELECT T1.student_last_name FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN addresses AS T3 ON T3.address_id  =  T2.address_id WHERE T3.state_province_county  =  'North Carolina' EXCEPT SELECT T1.student_last_name FROM students AS T1 JOIN degree_programs AS T2 ON T1.degree_program_id  =  T2.degree_program_id<|eot_id|>
student_transcripts_tracking,SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id,What are the last name of the students who live in North Carolina but have not registered in any degree programs?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Gleichner',), ('Weimann',)]","SELECT T1.student_last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.address_id = T2.address_id WHERE T2.state_province_county = ""North Carolina"" EXCEPT SELECT T1.student_last_name FROM Student_enrolment AS T1 JOIN Degree_programs AS T2 ON T1.degree_program_id = T2.degree_program_id"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",Show the date and id of the transcript with at least 2 course results.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]","SELECT T1.date_transcript_request,  T1.transcript_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2",What is the date and id of the transcript with at least 2 courses listed?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2013-06-30 13:01:40', 5), ('2010-12-13 10:55:15', 6), ('1975-05-06 12:04:47', 8), ('1998-11-22 12:18:29', 15)]","SELECT T1.date_transcript_submitted,  T1.transcript_id FROM transcripts AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"
student_transcripts_tracking,SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward',What is the phone number of the man with the first name Timmothy and the last name Ward?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('(096)889-8954x524',)]","SELECT T1.address_phone FROM Addresses AS T1 JOIN People AS T2 ON T1.address_id  =  T2.address_id WHERE T2.person_first_name  =  ""Timmothy"" AND T2.person_last_name  =  ""Ward"""
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","Who is the first student to register? List the first name, middle name and last name.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy', 'Anna', 'Ward')]","SELECT T2.student_first_name,  T2.student_middle_name,  T2.student_last_name FROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id = T2.student_id ORDER BY T1.date_of_enrolment ASC LIMIT 1"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1","What is the first, middle, and last name of the first student to register?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy', 'Anna', 'Ward')]","SELECT T2.student_first_name,  T2.student_middle_name,  T2.student_last_name FROM Student_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.registration_date ASC LIMIT 1"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","Who is the earliest graduate of the school? List the first name, middle name and last name.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy', 'Anna', 'Ward')]","SELECT T2.student_first_name,  T2.student_middle_name,  T2.student_last_nameFROM student_enrolment AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_idWHERE T1.graduate_status_code  =  'Graduated'ORDER BY T1.date_of_graduation ASC LIMIT 1<|eot_id|>"
student_transcripts_tracking,"SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1","What is the first, middle, and last name of the earliest school graduate?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy', 'Anna', 'Ward')]","SELECT T2.student_first_name,  T2.student_middle_name,  T2.student_last_name FROM Student_Transcripts AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T1.graduate_date  =  (SELECT min(graduate_date) FROM Student_Transcripts)"
student_transcripts_tracking,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,Whose permanent address is different from his or her current address? List his or her first name.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]",SELECT T2.student_first_name FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T1.permanent_address_id!= T1.current_address_id
student_transcripts_tracking,SELECT first_name FROM Students WHERE current_address_id != permanent_address_id,What is the first name of the student whose permanent address is different from his or her current one?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Timmothy',), ('Hobart',), ('Warren',), ('Jarvis',), ('Stanford',), ('Frida',), ('Delaney',), ('Reva',), ('Helga',), ('Gregg',), ('Orrin',), ('Deon',), ('Jordy',), ('Jett',)]",SELECT T1.student_first_name FROM students AS T1 JOIN addresses AS T2 ON T1.permanent_address_other_city_code  =  T2.address_city_code WHERE T1.permanent_address_state_province_county!= T1.current_address_state_province_county
student_transcripts_tracking,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1",Which address holds the most number of students currently? List the address id and all lines.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9, '0643 Muller Vista', 'Suite 383')]","SELECT T1.address_line_1,  T1.address_line_2,  T1.address_line_3 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,"SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1","What is the id, line 1, and line 2 of the address with the most students?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9, '0643 Muller Vista', 'Suite 383')]","SELECT T1.address_id,  T2.address_line_1,  T2.address_line_2 FROM Students AS T1 JOIN Addresses AS T2 ON T1.address_id  =  T2.address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"
student_transcripts_tracking,SELECT avg(transcript_date) FROM Transcripts,"On average, when were the transcripts printed?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(1989.9333333333334,)]",SELECT avg(T2.date_transcript_printed) FROM transcripts AS T1 JOIN semesters AS T2 ON T1.semester_id  =  T2.semester_id
student_transcripts_tracking,SELECT avg(transcript_date) FROM Transcripts,What is the average transcript date?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(1989.9333333333334,)]",SELECT avg(transcript_date) FROM transcripts
student_transcripts_tracking,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1",When is the first transcript released? List the date and details.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('1975-05-06 12:04:47', None)]","SELECT date_transcript_released,  transcript_details FROM transcripts ORDER BY date_transcript_released ASC LIMIT 1"
student_transcripts_tracking,"SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1","What is the earliest date of a transcript release, and what details can you tell me?","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('1975-05-06 12:04:47', None)]","SELECT T1.date_transcript_released,  T2.student_details FROM transcripts AS T1 JOIN students AS T2 ON T1.student_id  =  T2.student_id ORDER BY T1.date_transcript_released ASC LIMIT 1"
student_transcripts_tracking,SELECT count(*) FROM Transcripts,How many transcripts are released?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(15,)]",SELECT count(*) FROM transcripts
student_transcripts_tracking,SELECT count(*) FROM Transcripts,How many transcripts are listed?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(15,)]",SELECT count(*) FROM transcripts
student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,What is the last transcript release date?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2013-06-30 13:01:40',)]",SELECT max(T1.transcript_release_date) FROM transcripts AS T1
student_transcripts_tracking,SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1,When was the last transcript released?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('2013-06-30 13:01:40',)]",SELECT max(creation_date) FROM transcripts
student_transcripts_tracking,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(4, 0)]","SELECT count(*),  T1.transcript_id,  T1.course_enrolment_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.course_enrolment_id ORDER BY count(*) DESC LIMIT 1<|eot_id|>"
student_transcripts_tracking,"SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1",What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(4, 0)]","SELECT max(T1.course_id),  T2.course_enrolment_id FROM Transcripts AS T1 JOIN Transcript_Contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.course_id"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1","Show the date of the transcript which shows the least number of results, also list the id.","addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('1975-10-28 15:16:51', 2)]","SELECT T1.transcript_id,  T1.date_of_transcript FROM TRANSCRIPTS AS T1 JOIN transcript_contents AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
student_transcripts_tracking,"SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1",What is the date and id of the transcript with the least number of results?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('1975-10-28 15:16:51', 2)]","SELECT T1.date_transcript_created,  T1.transcript_id FROM transcripts AS T1 GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"
student_transcripts_tracking,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',Find the semester when both Master students and Bachelor students got enrolled in.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(13,)]","SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id = ""Master"" INTERSECT SELECT T1.semester_name FROM semesters AS T1 JOIN student_enrolment AS T2 ON T1.semester_id = T2.semester_id WHERE T2.degree_program_id = ""Bachelor"""
student_transcripts_tracking,SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor',What is the id of the semester that had both Masters and Bachelors students enrolled?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(13,)]",SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id JOIN degree_programs AS T3 ON T3.degree_program_id  =  T2.degree_program_id WHERE T3.degree_program_name  =  'Masters' INTERSECT SELECT T1.semester_id FROM Semesters AS T1 JOIN Student_enrolment AS T2 ON T1.semester_id  =  T2.semester_id JOIN degree_programs AS T3 ON T3.degree_program_id  =  T2.degree_program_id WHERE T3.degree_program_name  =  'Bachelors'<|eot_id|>
student_transcripts_tracking,SELECT count(DISTINCT current_address_id) FROM Students,How many different addresses do the students currently live?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9,)]",SELECT count(DISTINCT T2.address_details) FROM students AS T1 JOIN addresses AS T2 ON T1.current_address_able = T2.address_id
student_transcripts_tracking,SELECT count(DISTINCT current_address_id) FROM Students,What are the different addresses that have students living there?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[(9,)]",SELECT DISTINCT T1.address_details FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.address_id
student_transcripts_tracking,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,List all the student details in reversed lexicographical order.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]",SELECT T2.student_details FROM students AS T1 JOIN student_enrolment AS T2 ON T1.student_id  =  T2.student_id ORDER BY T2.student_details DESC
student_transcripts_tracking,SELECT other_student_details FROM Students ORDER BY other_student_details DESC,What other details can you tell me about students in reverse alphabetical order?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('voluptatem',), ('rerum',), ('quia',), ('qui',), ('omnis',), ('omnis',), ('non',), ('nesciunt',), ('laborum',), ('facilis',), ('et',), ('dolorum',), ('autem',), ('atque',), ('assumenda',)]",SELECT student_details FROM students ORDER BY student_details DESC
student_transcripts_tracking,SELECT section_description FROM Sections WHERE section_name  =  'h',Describe the section h.,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('et',)]",SELECT T1.course_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id WHERE T2.section_id  =  'h'
student_transcripts_tracking,SELECT section_description FROM Sections WHERE section_name  =  'h',What is the description for the section named h?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('et',)]","SELECT T1.course_description FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id WHERE T2.course_name  =  ""h"""
student_transcripts_tracking,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Jarvis',)]","SELECT student_first_name FROM Students WHERE country_code  =  ""Haiti"" UNION SELECT student_first_name FROM Students WHERE student_cell_phone_number  =  ""09700166582"""
student_transcripts_tracking,select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582',What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?,"addresses, courses, departments, degree programs, sections, semesters, students, student enrolment, student enrolment courses, transcripts, transcript contents","[('Jarvis',)]","SELECT T2.student_first_name FROM students AS T1 JOIN addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.country_code  =  ""Haiti"" AND T1.long_term_residence_address  =  ""Yes"" UNION SELECT T2.student_first_name FROM students AS T1 JOIN addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T1.cell_phone_number  =  ""09700166582""<|eot_id|>"
tvshow,SELECT Title FROM Cartoon ORDER BY title,List the title of all cartoons in alphabetical order.,"tv channel, tv series, cartoon","[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]",SELECT cartoon_title FROM cartoon ORDER BY cartoon_title ASC
tvshow,SELECT Title FROM Cartoon ORDER BY title,What are the titles of the cartoons sorted alphabetically?,"tv channel, tv series, cartoon","[('Dawn of the Dead Man!',), ('Day of the Dark Knight!',), ('Deep Cover for Batman!',), ('Enter the Outsiders!',), ('Evil Under the Sea!',), ('Fall of the Blue Beetle!',), ('Invasion of the Secret Santas!',), ('Journey to the Center of the Bat!',), ('Return of the Fearsome Fangs!',), ('Terror on Dinosaur Island!',), ('The Eyes of Despero!',), ('The Rise of the Blue Beetle!',)]",SELECT cartoon_title FROM cartoon ORDER BY cartoon_title ASC
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";","List all cartoon directed by ""Ben Jones"".","tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]","SELECT T1.cartoon_title FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.cartoon_id  =  T2.cartoon_id WHERE T2.series_directed_by  =  ""Ben Jones"""
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"";",What are the names of all cartoons directed by Ben Jones?,"tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Day of the Dark Knight!',), ('Dawn of the Dead Man!',), ('The Eyes of Despero!',)]",SELECT cartoon_name FROM cartoon WHERE director  =  'Ben Jones'
tvshow,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";","How many cartoons were written by ""Joseph Kuhr""?","tv channel, tv series, cartoon","[(2,)]","SELECT count(*) FROM cartoon WHERE created_by  =  ""Joseph Kuhr"""
tvshow,"SELECT count(*) FROM Cartoon WHERE Written_by = ""Joseph Kuhr"";",What is the number of cartoones written by Joseph Kuhr?,"tv channel, tv series, cartoon","[(2,)]","SELECT count(*) FROM cartoon WHERE writer  =  ""Joseph Kuhr"""
tvshow,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",list all cartoon titles and their directors ordered by their air date,"tv channel, tv series, cartoon","[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]","SELECT cartoon_title,  director FROM cartoon ORDER BY date_launched"
tvshow,"SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date",What is the name and directors of all the cartoons that are ordered by air date?,"tv channel, tv series, cartoon","[('Invasion of the Secret Santas!', 'Brandon Vietti'), ('Evil Under the Sea!', 'Michael Chang'), ('Return of the Fearsome Fangs!', 'Brandon Vietti'), ('Deep Cover for Batman!', 'Michael Chang'), ('The Eyes of Despero!', 'Ben Jones'), ('Dawn of the Dead Man!', 'Ben Jones'), ('Day of the Dark Knight!', 'Ben Jones'), ('Fall of the Blue Beetle!', 'Brandon Vietti'), ('Journey to the Center of the Bat!', 'Michael Chang'), ('Enter the Outsiders!', 'Michael Chang'), ('The Rise of the Blue Beetle!', 'Ben Jones'), ('Terror on Dinosaur Island!', 'Brandon Vietti')]","SELECT T2.cartoon_name,  T2.cartoon_director FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.channel_id  =  T2.channel_id ORDER BY date_ordering_by"
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";","List the title of all cartoon directed by ""Ben Jones"" or ""Brandon Vietti"".","tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]","SELECT title FROM cartoon WHERE director  =  ""Ben Jones"" OR director  =  ""Brandon Vietti"""
tvshow,"SELECT Title FROM Cartoon WHERE Directed_by = ""Ben Jones"" OR Directed_by = ""Brandon Vietti"";",What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?,"tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Terror on Dinosaur Island!',), ('Day of the Dark Knight!',), ('Invasion of the Secret Santas!',), ('Dawn of the Dead Man!',), ('Fall of the Blue Beetle!',), ('The Eyes of Despero!',), ('Return of the Fearsome Fangs!',)]",SELECT cartoon_title FROM cartoon WHERE director  =  'Ben Jones' OR director  =  'Brandon Vietti'
tvshow,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",Which country has the most of TV Channels? List the country and number of TV Channels it has.,"tv channel, tv series, cartoon","[('Italy', 12)]","SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1"
tvshow,"SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;",What is the country with the most number of TV Channels and how many does it have?,"tv channel, tv series, cartoon","[('Italy', 12)]","SELECT country,  count(*) FROM tv_channel GROUP BY country ORDER BY count(*) DESC LIMIT 1"
tvshow,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",List the number of different series names and contents in the TV Channel table.,"tv channel, tv series, cartoon","[(15, 1)]","SELECT count(DISTINCT T2.series_name),  count(DISTINCT T2.series_description) FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.tv_series_id  =  T2.tv_series_id<|eot_id|>"
tvshow,"SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;",How many different series and contents are listed in the TV Channel table?,"tv channel, tv series, cartoon","[(15, 1)]","SELECT count(DISTINCT series_name),  count(DISTINCT series_content) FROM tv_channel"
tvshow,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";","What is the content of TV Channel with serial name ""Sky Radio""?","tv channel, tv series, cartoon","[('music',)]","SELECT T2.channel_content FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.series_name  =  ""Sky Radio"""
tvshow,"SELECT Content FROM TV_Channel WHERE series_name = ""Sky Radio"";",What is the content of the series Sky Radio?,"tv channel, tv series, cartoon","[('music',)]","<|start_header_id|>series  =  ""Sky Radio"""
tvshow,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";","What is the Package Option of TV Channel with serial name ""Sky Radio""?","tv channel, tv series, cartoon","[('Sky Famiglia',)]","SELECT T1.package_option FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id WHERE T2.tv_series_name  =  ""Sky Radio"""
tvshow,"SELECT Package_Option FROM TV_Channel WHERE series_name = ""Sky Radio"";",What are the Package Options of the TV Channels whose series names are Sky Radio?,"tv channel, tv series, cartoon","[('Sky Famiglia',)]","SELECT T1.package_option FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.tv_series_id  =  T2.tv_series_id WHERE T2.series_name  =  ""Sky Radio"""
tvshow,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",How many TV Channel using language English?,"tv channel, tv series, cartoon","[(3,)]",SELECT count(*) FROM tv_channel WHERE channel_language  =  'English'
tvshow,"SELECT count(*) FROM TV_Channel WHERE LANGUAGE = ""English"";",How many TV Channels use the English language?,"tv channel, tv series, cartoon","[(3,)]",SELECT count(*) FROM tv_channel WHERE channel_language  =  'English'
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",List the language used least number of TV Channel. List language and number of TV Channel.,"tv channel, tv series, cartoon","[('English', 3)]","SELECT T1.language,  count(*) FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.language ORDER BY count(*) ASC LIMIT 1"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;",What are the languages used by the least number of TV Channels and how many channels use it?,"tv channel, tv series, cartoon","[('English', 3)]","SELECT T1.language,  count(*) FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id GROUP BY T1.language ORDER BY count(*) ASC LIMIT 1"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE",List each language and the number of TV Channels using it.,"tv channel, tv series, cartoon","[('English', 3), ('Italian', 12)]","<|start_header_id|>SELECT language,  count(*) FROM tv_channel GROUP BY language"
tvshow,"SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE","For each language, list the number of TV Channels that use it.","tv channel, tv series, cartoon","[('English', 3), ('Italian', 12)]","SELECT language,  count(*) FROM tv_channel GROUP BY language"
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","What is the TV Channel that shows the cartoon ""The Rise of the Blue Beetle!""? List the TV Channel's series name.","tv channel, tv series, cartoon","[('Sky Radio',)]","SELECT T1.series_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.channel_id  =  T2.channel_id WHERE T2.cartoon_name  =  ""The Rise of the Blue Beetle!"""
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = ""The Rise of the Blue Beetle!"";","What is the series name of the TV Channel that shows the cartoon ""The Rise of the Blue Beetle""?","tv channel, tv series, cartoon","[('Sky Radio',)]","SELECT T3.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id JOIN cartoon AS T3 ON T2.cartoon_id  =  T3.cartoon_id WHERE T3.cartoon_name  =  ""The Rise of the Blue Beetle""<|eot_id|>"
tvshow,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","List the title of all  Cartoons showed on TV Channel with series name ""Sky Radio"".","tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]","SELECT T3.cartoon_title FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id JOIN cartoon AS T3 ON T2.series_id  =  T3.series_id WHERE T2.series_name  =  ""Sky Radio"""
tvshow,"SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","What is the title of all the cartools that are on the TV Channel with the series name ""Sky Radio""?","tv channel, tv series, cartoon","[('The Rise of the Blue Beetle!',), ('Return of the Fearsome Fangs!',)]","SELECT T3.cartoon_title FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id JOIN cartoon AS T3 ON T2.series_id  =  T3.series_id WHERE T2.series_name  =  ""Sky Radio"""
tvshow,SELECT Episode FROM TV_series ORDER BY rating,List the Episode of all TV series sorted by rating.,"tv channel, tv series, cartoon","[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]",SELECT episode FROM tv_series ORDER BY rating
tvshow,SELECT Episode FROM TV_series ORDER BY rating,What are all of the episodes ordered by ratings?,"tv channel, tv series, cartoon","[('The Hanged Man',), ('Double Down',), ('Home By Another Way',), ('Keepers',), ('Emily',), ('Blowback',), ('The Legend of Dylan McCleen',), ('Winterland',), ('The Year of the Rabbit',), ('Game Three',), ('Friendly Skies',), ('A Love of a Lifetime',)]",SELECT episode FROM tv_series ORDER BY ratings_in_percent
tvshow,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",List top 3 highest Rating  TV series. List the TV series's Episode and Rating.,"tv channel, tv series, cartoon","[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]","SELECT T1.Episode,  T1.Rating FROM tv_series AS T1 JOIN (SELECT Rating,  max(Rating) FROM tv_series GROUP BY Rating ORDER BY max(Rating) DESC LIMIT 3) AS T2 ON T1.Rating  =  T2.Rating<|eot_id|>"
tvshow,"SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;",What are 3 most highly rated episodes in the TV series table and what were those ratings?,"tv channel, tv series, cartoon","[('A Love of a Lifetime', '5.8'), ('Friendly Skies', '5.3'), ('Game Three', '4.4')]","SELECT T1.episode_name,  T1.rating FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id ORDER BY T1.rating DESC LIMIT 3"
tvshow,"SELECT max(SHARE) , min(SHARE) FROM TV_series;",What is minimum and maximum share of TV series?,"tv channel, tv series, cartoon","[(9.0, 5.0)]","<|start_header_id|>cartoon AS T1 JOIN tv_series AS T2 ON T1.series_id  =  T2.series_id WHERE T1.cartoon_name  =  ""Dragon Ball"""
tvshow,"SELECT max(SHARE) , min(SHARE) FROM TV_series;",What is the maximum and minimum share for the TV series?,"tv channel, tv series, cartoon","[(9.0, 5.0)]","SELECT max(T1.share_of_total_viewers),  min(T1.share_of_total_viewers) FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id"
tvshow,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","What is the air date of TV series with Episode ""A Love of a Lifetime""?","tv channel, tv series, cartoon","[('September 24, 2007',)]","SELECT T2.air_date FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.episode  =  ""A Love of a Lifetime"""
tvshow,"SELECT Air_Date FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","When did the episode ""A Love of a Lifetime"" air?","tv channel, tv series, cartoon","[('September 24, 2007',)]","SELECT episode_air_date FROM tv_series WHERE episode_title  =  ""A Love of a Lifetime"""
tvshow,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","What is Weekly Rank of TV series with Episode ""A Love of a Lifetime""?","tv channel, tv series, cartoon","[(43.0,)]","SELECT T2.Weekly_Rank FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.Episode  =  ""A Love of a Lifetime"""
tvshow,"SELECT Weekly_Rank FROM TV_series WHERE Episode = ""A Love of a Lifetime"";","What is the weekly rank for the episode ""A Love of a Lifetime""?","tv channel, tv series, cartoon","[(43.0,)]","SELECT T2.weekly_rank FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.series_name  =  ""A Love of a Lifetime"""
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","What is the TV Channel of TV series with Episode ""A Love of a Lifetime""? List the TV Channel's series name.","tv channel, tv series, cartoon","[('Sky Radio',)]","SELECT T1.channel_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id WHERE T2.episode  =  ""A Love of a Lifetime"""
tvshow,"SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = ""A Love of a Lifetime"";","What is the name of the series that has the episode ""A Love of a Lifetime""?","tv channel, tv series, cartoon","[('Sky Radio',)]","SELECT T2.series_name FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.series_name  =  ""A Love of a Lifetime"""
tvshow,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","List the Episode of all  TV series showed on TV Channel with series name ""Sky Radio"".","tv channel, tv series, cartoon","[('A Love of a Lifetime',), ('Keepers',)]","SELECT T3.episode FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id JOIN cartoon AS T3 ON T2.cartoon_id  =  T3.cartoon_id WHERE T2.channel_name  =  ""Sky Radio"""
tvshow,"SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = ""Sky Radio"";","What is the episode for the TV series named ""Sky Radio""?","tv channel, tv series, cartoon","[('A Love of a Lifetime',), ('Keepers',)]","SELECT T2.episode FROM tv_series AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.show_name  =  ""Sky Radio"""
tvshow,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",Find the number of cartoons directed by each of the listed directors.,"tv channel, tv series, cartoon","[(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]","SELECT count(*),  T1.directed_by FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.series_id  =  T2.series_id GROUP BY T2.directed_by"
tvshow,"SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by",How many cartoons did each director create?,"tv channel, tv series, cartoon","[(4, 'Ben Jones'), (4, 'Brandon Vietti'), (4, 'Michael Chang')]",<|start_header_id|>cartoon AS T1 JOIN cartoon AS T2 ON T1.cartoon_director  =  T2.cartoon_director GROUP BY T1.cartoon_director
tvshow,"select production_code ,  channel from cartoon order by original_air_date desc limit 1",Find the production code and channel of the most recently aired cartoon .,"tv channel, tv series, cartoon","[(102.0, '701')]","SELECT T2.cartoon_production_code,  T1.channel_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.channel_id  =  T2.channel_id ORDER BY T2.cartoon_air_date DESC LIMIT 1"
tvshow,"select production_code ,  channel from cartoon order by original_air_date desc limit 1",What is the produdction code and channel of the most recent cartoon ?,"tv channel, tv series, cartoon","[(102.0, '701')]","SELECT T2.production_code,  T1.channel_name FROM tv_channel AS T1 JOIN cartoon AS T2 ON T1.channel_id  =  T2.channel_id ORDER BY T2.year DESC LIMIT 1"
tvshow,"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""",Find the package choice and series name of the TV channel that has high definition TV.,"tv channel, tv series, cartoon","[('Sky Famiglia + Sky HD', 'MTV Live HD')]","SELECT T2.package_choice,  T2.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.series_id  =  T2.series_id WHERE T1.high_definition_channel  =  'Yes'"
tvshow,"SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  ""yes""",What are the package options and the name of the series for the TV Channel that supports high definition TV?,"tv channel, tv series, cartoon","[('Sky Famiglia + Sky HD', 'MTV Live HD')]","SELECT T1.channel_package,  T3.series_name FROM tv_channel AS T1 JOIN tv_series AS T2 ON T1.channel_id  =  T2.channel_id JOIN tv_series AS T3 ON T2.series_id  =  T3.series_id WHERE T1.supports_high_defination  =  'Yes'<|eot_id|>"
tvshow,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',which countries' tv channels are playing some cartoon written by Todd Casey?,"tv channel, tv series, cartoon","[('United Kingdom',), ('Italy',)]","SELECT T3.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.writer  =  ""Todd Casey"""
tvshow,SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that have cartoons on TV that were written by Todd Casey?,"tv channel, tv series, cartoon","[('United Kingdom',), ('Italy',)]","SELECT T2.country FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id WHERE T1.writer  =  ""Todd Casey"""
tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',which countries' tv channels are not playing any cartoon written by Todd Casey?,"tv channel, tv series, cartoon","[('Poland',)]","SELECT country FROM tv_channel EXCEPT SELECT T1.country FROM tv_series AS T1 JOIN cartoon AS T2 ON T2.cartoon_id  =  T1.cartoon_id WHERE T2.writer  =  ""Todd Casey"""
tvshow,SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey',What are the countries that are not playing cartoons written by Todd Casey?,"tv channel, tv series, cartoon","[('Poland',)]",SELECT DISTINCT country FROM tv_channel EXCEPT SELECT DISTINCT country FROM cartoon WHERE writer  =  'Todd Casey'
tvshow,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?,"tv channel, tv series, cartoon","[('MTV Dance', 'United Kingdom')]","SELECT T3.series_name,  T3.country FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.series_id  =  T2.series_id JOIN tv_series AS T3 ON T2.id  =  T3.id WHERE T1.directed_by  =  ""Ben Jones"" OR T1.directed_by  =  ""Michael Chang"""
tvshow,"SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'",What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?,"tv channel, tv series, cartoon","[('MTV Dance', 'United Kingdom')]","SELECT T1.cartoon_series_name,  T1.country FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.cartoon_series_id  =  T2.series_id WHERE T2.creator  =  'Ben Jones' INTERSECT SELECT T1.cartoon_series_name,  T1.country FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.cartoon_series_id  =  T2.series_id WHERE T2.creator  =  'Michael Chang'<|eot_id|>"
tvshow,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",find the pixel aspect ratio and nation of the tv channels that do not use English.,"tv channel, tv series, cartoon","[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]","SELECT pixel_aspect_ratio,  nation FROM tv_channel WHERE primary_language!= 'English'"
tvshow,"SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'",What is the pixel aspect ratio and country of origin for all TV channels that do not use English?,"tv channel, tv series, cartoon","[('4:3', 'Italy'), ('4:3', 'Italy'), ('4:3 / 16:9', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3', 'Italy'), ('16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3 / 16:9', 'Italy'), ('4:3', 'Italy'), ('4:3', 'Italy')]","SELECT pixel_aspect_ratio,  country_of_origin FROM tv_channel WHERE languages_of_operation!= 'English'"
tvshow,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,find id of the tv channels that from the countries where have more than two tv channels.,"tv channel, tv series, cartoon","[('700',)]",SELECT channel_id FROM tv_channel GROUP BY country HAVING count(*)  >  2
tvshow,SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2,What are the ids of all tv channels that have more than 2 TV channels?,"tv channel, tv series, cartoon","[('700',)]",SELECT channel_id FROM tv_channel GROUP BY channel_id HAVING count(*)  >  2
tvshow,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',find the id of tv channels that do not play any cartoon directed by Ben Jones.,"tv channel, tv series, cartoon","[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]","SELECT channel_id FROM tv_channel EXCEPT SELECT T1.channel_id FROM tv_series AS T1 JOIN cartoon AS T2 ON T1.series_id  =  T2.series_id WHERE T2.directed_by  =  ""Ben Jones"""
tvshow,SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones',What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?,"tv channel, tv series, cartoon","[('701',), ('703',), ('705',), ('706',), ('708',), ('709',), ('713',), ('714',), ('715',), ('717',), ('719',)]","SELECT channel_id FROM tv_channel EXCEPT SELECT T1.channel_id FROM cartoon AS T1 JOIN tv_series AS T2 ON T1.tv_series_id  =  T2.tv_series_id JOIN tv_channel AS T3 ON T2.tv_channel_id  =  T3.tv_channel_id WHERE T2.tv_series_directed_by  =  ""Ben Jones""<|eot_id|>"
tvshow,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),find the package option of the tv channel that do not have any cartoon directed by Ben Jones.,"tv channel, tv series, cartoon","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]","SELECT T3.package_option FROM cartoon AS T1 JOIN tv_channel AS T2 ON T1.channel_id  =  T2.channel_id JOIN tv_series AS T3 ON T3.series_id  =  T1.series_id WHERE T1.directed_by!= ""Ben Jones"""
tvshow,SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'),What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?,"tv channel, tv series, cartoon","[('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('no ( FTV )',), ('Sky Famiglia + Sky HD',), ('no ( FTV )',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',), ('Sky Famiglia',)]",SELECT package_option FROM tv_channel EXCEPT SELECT t3.package_option FROM cartoons AS t1 JOIN tv_series AS t2 ON t1.series_id  =  t2.series_id JOIN tv_channel AS t3 ON t2.channel_id  =  t3.channel_id WHERE t2.creator  =  'Ben Jones'
poker_player,SELECT count(*) FROM poker_player,How many poker players are there?,"poker player, people","[(5,)]",SELECT count(*) FROM poker_player
poker_player,SELECT count(*) FROM poker_player,Count the number of poker players.,"poker player, people","[(5,)]",SELECT count(*) FROM poker_player
poker_player,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,List the earnings of poker players in descending order.,"poker player, people","[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]",SELECT earning_from_poker FROM poker_player ORDER BY earning_from_poker DESC
poker_player,SELECT Earnings FROM poker_player ORDER BY Earnings DESC,"What are the earnings of poker players, ordered descending by value?","poker player, people","[(596462.0,), (476090.0,), (189233.0,), (142800.0,), (104871.0,)]",SELECT T1.earnings FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id ORDER BY T1.earnings DESC
poker_player,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",List the final tables made and the best finishes of poker players.,"poker player, people","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]","SELECT T1.poker_player_name,  T1.final_table_made FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id"
poker_player,"SELECT Final_Table_Made ,  Best_Finish FROM poker_player",What are the final tables made and best finishes for all poker players?,"poker player, people","[(42.0, 1.0), (10.0, 2.0), (21.0, 1.0), (19.0, 2.0), (26.0, 3.0)]","SELECT T1.final_table_made,  T1.best_finish FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id"
poker_player,SELECT avg(Earnings) FROM poker_player,What is the average earnings of poker players?,"poker player, people","[(301891.2,)]",SELECT avg(T1.earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id
poker_player,SELECT avg(Earnings) FROM poker_player,Return the average earnings across all poker players.,"poker player, people","[(301891.2,)]",SELECT avg(T2.earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id
poker_player,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,What is the money rank of the poker player with the highest earnings?,"poker player, people","[(58.0,)]",SELECT T1.money_rank FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id ORDER BY T2.earnings DESC LIMIT 1
poker_player,SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1,Return the money rank of the player with the greatest earnings.,"poker player, people","[(58.0,)]",SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
poker_player,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,What is the maximum number of final tables made among poker players with earnings less than 200000?,"poker player, people","[(26.0,)]",SELECT max(T1.final_table_count) FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id WHERE T1.earnings  <  200000<|eot_id|>
poker_player,SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000,Return the maximum final tables made across all poker players who have earnings below 200000.,"poker player, people","[(26.0,)]",SELECT max(T1.final_tables) FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id WHERE T2.earnings  <  200000
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,What are the names of poker players?,"poker player, people","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",SELECT T1.poker_player_name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID,Return the names of all the poker players.,"poker player, people","[('Aleksey Ostapenko',), ('Teodor Salparov',), ('Yevgeni Sivozhelez',), ('Maksim Botin',), ('Semen Poltavskiy',)]",SELECT T2.person_name FROM poker_player AS T1 JOIN people AS T2 ON T1.person_id  =  T2.person_id
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,What are the names of poker players whose earnings is higher than 300000?,"poker player, people","[('Aleksey Ostapenko',), ('Maksim Botin',)]",SELECT T1.poker_player_name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id WHERE T1.earnings  >  300000
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000,Give the names of poker players who have earnings above 300000.,"poker player, people","[('Aleksey Ostapenko',), ('Maksim Botin',)]",SELECT T2.player_name FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id WHERE T1.earnings  >  300000
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,List the names of poker players ordered by the final tables made in ascending order.,"poker player, people","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]",SELECT T1.poker_player_name FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id ORDER BY T1.final_table DESC
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made,"What are the names of poker players, ordered ascending by the number of final tables they have made?","poker player, people","[('Teodor Salparov',), ('Maksim Botin',), ('Yevgeni Sivozhelez',), ('Semen Poltavskiy',), ('Aleksey Ostapenko',)]",SELECT T1.poker_player_name FROM poker_player AS T1 JOIN people AS T2 ON T1.poker_player_id  =  T2.people_id ORDER BY T1.final_table DESC
poker_player,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,What is the birth date of the poker player with the lowest earnings?,"poker player, people","[('August 8, 1986',)]",SELECT T2.date_of_birth FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id ORDER BY T1.earnings ASC LIMIT 1<|eot_id|>
poker_player,SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1,Return the birth date of the poker player with the lowest earnings.,"poker player, people","[('August 8, 1986',)]",SELECT T2.birth_date FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id ORDER BY T1.earnings ASC LIMIT 1
poker_player,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,What is the money rank of the tallest poker player?,"poker player, people","[(68.0,)]",SELECT T1.money_rank FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id ORDER BY T2.height DESC LIMIT 1
poker_player,SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1,Return the money rank of the poker player with the greatest height.,"poker player, people","[(68.0,)]",SELECT T1.money_rank FROM poker_player AS T1 JOIN people AS T2 ON T1.people_id  =  T2.people_id ORDER BY T2.height DESC LIMIT 1
poker_player,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,What is the average earnings of poker players with height higher than 200?,"poker player, people","[(309445.0,)]",SELECT avg(T1.earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id WHERE T2.height  >  200<|eot_id|>
poker_player,SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200,Give average earnings of poker players who are taller than 200.,"poker player, people","[(309445.0,)]",SELECT avg(T1.earnings) FROM poker_player AS T1 JOIN people AS T2 ON T1.player_id  =  T2.people_id WHERE T2.height  >  200<|eot_id|>
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,What are the names of poker players in descending order of earnings?,"poker player, people","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]",SELECT T2.person_name FROM poker_player AS T1 JOIN people AS T2 ON T1.person_id  =  T2.person_id ORDER BY T1.earnings DESC
poker_player,SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC,Return the names of poker players sorted by their earnings descending.,"poker player, people","[('Maksim Botin',), ('Aleksey Ostapenko',), ('Teodor Salparov',), ('Semen Poltavskiy',), ('Yevgeni Sivozhelez',)]",SELECT T2.person_name FROM poker_player AS T1 JOIN people AS T2 ON T1.person_id  =  T2.person_id ORDER BY T1.earnings DESC
poker_player,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",What are different nationalities of people and the corresponding number of people from each nation?,"poker player, people","[('Bulgaria', 1), ('Russia', 6)]","SELECT nationalities,  count(*) FROM people GROUP BY nationalities"
poker_player,"SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality",How many people are there of each nationality?,"poker player, people","[('Bulgaria', 1), ('Russia', 6)]","SELECT Nationality,  COUNT(*) FROM People GROUP BY Nationality"
poker_player,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,What is the most common nationality of people?,"poker player, people","[('Russia',)]",SELECT T2.nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id GROUP BY T2.nationality ORDER BY count(*) DESC LIMIT 1
poker_player,SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1,Give the nationality that is most common across all people.,"poker player, people","[('Russia',)]",SELECT T2.nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id GROUP BY T2.nationality ORDER BY count(*) DESC LIMIT 1
poker_player,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,What are the nationalities that are shared by at least two people?,"poker player, people","[('Russia',)]",SELECT T2.nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id GROUP BY T2.nationality HAVING count(*)  >=  2<|eot_id|>
poker_player,SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2,Return the nationalities for which there are two or more people.,"poker player, people","[('Russia',)]",SELECT T2.nationality FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id GROUP BY T2.nationality HAVING count(*)  >=  2<|eot_id|>
poker_player,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC",List the names and birth dates of people in ascending alphabetical order of name.,"poker player, people","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]","SELECT T2.person_name,  T2.date_of_birth FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id ORDER BY T2.person_name ASC"
poker_player,"SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC","What are the names and birth dates of people, ordered by their names in alphabetical order?","poker player, people","[('Aleksey Ostapenko', 'May 26, 1986'), ('Maksim Botin', 'July 14, 1983'), ('Roman Bragin', 'April 17, 1987'), ('Semen Poltavskiy', 'February 8, 1981'), ('Sergey Grankin', 'January 22, 1987'), ('Teodor Salparov', 'August 16, 1982'), ('Yevgeni Sivozhelez', 'August 8, 1986')]","SELECT T2.person_name,  T2.date_of_birth FROM poker_player AS T1 JOIN people AS T2 ON T1.person_id  =  T2.person_id ORDER BY T2.person_name"
poker_player,"SELECT Name FROM people WHERE Nationality != ""Russia""","Show names of people whose nationality is not ""Russia"".","poker player, people","[('Teodor Salparov',)]","SELECT T2.person_name FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id WHERE T1.nationality!= ""Russia"""
poker_player,"SELECT Name FROM people WHERE Nationality != ""Russia""",What are the names of people who are not from Russia?,"poker player, people","[('Teodor Salparov',)]",SELECT T2.person_name FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id WHERE T1.country_of_birth!= 'Russia'
poker_player,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),List the names of people that are not poker players.,"poker player, people","[('Roman Bragin',), ('Sergey Grankin',)]",SELECT T2.person_name FROM people AS T1 JOIN poker_player AS T2 ON T1.people_id  =  T2.people_id WHERE T1.people_id DOES NOT EXIST
poker_player,SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player),What are the names of people who do not play poker?,"poker player, people","[('Roman Bragin',), ('Sergey Grankin',)]",SELECT T2.person_name FROM poker_player AS T1 JOIN people AS T2 ON T1.person_id  =  T2.person_id WHERE T1.poker_player_id  =  0 UNION SELECT T1.person_name FROM people AS T1 EXCEPT SELECT T2.person_name FROM poker_player AS T2 JOIN people AS T1 ON T2.person_id  =  T1.person_id<|eot_id|>
poker_player,SELECT count(DISTINCT Nationality) FROM people,How many distinct nationalities are there?,"poker player, people","[(2,)]",SELECT count(DISTINCT nationality) FROM people
poker_player,SELECT count(DISTINCT Nationality) FROM people,Count the number of different nationalities.,"poker player, people","[(2,)]",SELECT count(DISTINCT nationality) FROM people
voter_1,SELECT count(*) FROM area_code_state,How many states are there?,"area code state, contestants, votes","[(305,)]",SELECT count(*) FROM area_code_state
voter_1,"SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC","List the contestant numbers and names, ordered by contestant name descending.","area code state, contestants, votes","[(2, 'Tabatha Gehling'), (8, 'Nita Coster'), (11, 'Loraine NygrenTania Mattioli'), (9, 'Kurt Walser'), (3, 'Kelly Clauss'), (6, 'Jessie Eichman'), (4, 'Jessie Alloway'), (10, 'Ericka Dieter'), (1, 'Edwina Burnam'), (7, 'Allie Rogalski'), (5, 'Alana Bregman')]","SELECT contestant_number,  contestant_name FROM contestants ORDER BY contestant_name DESC"
voter_1,"SELECT vote_id ,  phone_number ,  state FROM votes","List the vote ids, phone numbers and states of all votes.","area code state, contestants, votes","[(1, 7182887233, 'NY'), (2, 7148407040, 'NY'), (3, 6209222712, 'CA'), (5, 5112677315, 'NJ\n')]","SELECT T1.vote_id,  T2.area_code_phone_number,  T3.state_details FROM VOTES AS T1 JOIN Area_Code_State AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id JOIN Contestants AS T3 ON T1.contested_contestant_id  =  T3.contested_contestant_id"
voter_1,"SELECT max(area_code) ,  min(area_code) FROM area_code_state",What are the maximum and minimum values of area codes?,"area code state, contestants, votes","[(989, 201)]","SELECT max(area_code),  min(area_code) FROM Area_Code_State"
voter_1,SELECT max(created) FROM votes WHERE state  =  'CA',What is last date created of votes from the state 'CA'?,"area code state, contestants, votes","[('2018-03-09 19:03:39',)]","SELECT max(T2.date_created) FROM VOTES AS T1 JOIN Area_Codes_State AS T2 ON T1.state_id  =  T2.state_id WHERE T2.state_name  =  ""CA"""
voter_1,SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway',What are the names of the contestants whose names are not 'Jessie Alloway',"area code state, contestants, votes","[('Edwina Burnam',), ('Tabatha Gehling',), ('Kelly Clauss',), ('Alana Bregman',), ('Jessie Eichman',), ('Allie Rogalski',), ('Nita Coster',), ('Kurt Walser',), ('Ericka Dieter',), ('Loraine NygrenTania Mattioli',)]","SELECT contestant_name FROM Contestants WHERE contestant_name!= ""Jessie Alloway"""
voter_1,"SELECT DISTINCT state ,  created FROM votes",What are the distinct states and create time of all votes?,"area code state, contestants, votes","[('NY', '2018-03-09 19:03:21'), ('NY', '2018-03-09 19:03:36'), ('CA', '2018-03-09 19:03:39'), ('NJ\n', '2018-03-09 19:03:40')]","SELECT DISTINCT T2.state_name,  T1.creation_time FROM Area_Code_State AS T1 JOIN Votes AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id"
voter_1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2",What are the contestant numbers and names of the contestants who had at least two votes?,"area code state, contestants, votes","[(3, 'Kelly Clauss')]","SELECT T1.contestant_number,  T1.contestant_name FROM Contestants AS T1 JOIN VOTES AS T2 ON T1.contestant_id  =  T2.contestant_id GROUP BY T1.contestant_id HAVING count(*)  >=  2"
voter_1,"SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1","Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?","area code state, contestants, votes","[(2, 'Tabatha Gehling')]","SELECT T1.contestant_number,  T2.contestant_name FROM Votes AS T1 JOIN Contestants AS T2 ON T1.contestant_id  =  T2.contestant_id WHERE T1.vote_outcome  =  ""Yes"" GROUP BY T1.contestant_id ORDER BY count(*) ASC LIMIT 1"
voter_1,SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA',What are the number of votes from state 'NY' or 'CA'?,"area code state, contestants, votes","[(3,)]",SELECT sum(T1.Vote_Cast) FROM VOTES AS T1 JOIN Area_Code_State AS T2 ON T1.State_id  =  T2.Area_Code_State_id WHERE T2.State  =  'NY' OR T2.State  =  'CA'
voter_1,SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes ),How many contestants did not get voted?,"area code state, contestants, votes","[(8,)]",SELECT count(*) FROM contestants WHERE contestant_id NOT IN (SELECT contestant_id FROM VOTES)
voter_1,SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1,What is the area code in which the most voters voted?,"area code state, contestants, votes","[(212,)]",SELECT T1.area_code FROM Area_Code_State AS T1 JOIN VOTES AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
voter_1,"SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'","What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?","area code state, contestants, votes","[('2018-03-09 19:03:21', 'NY', 7182887233)]","SELECT T1.area_code_state_create_date,  T1.state,  T1.area_code_phone FROM Area_Code_State AS T1 JOIN VOTES AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id JOIN Contestants AS T3 ON T2.contestant_id  =  T3.contestant_id WHERE T3.contestant_details  =  ""Tabatha Gehling"""
voter_1,SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss',List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.,"area code state, contestants, votes","[(212,), (315,), (347,), (516,), (518,), (585,), (607,), (631,), (646,), (716,), (718,), (845,), (914,), (917,)]",SELECT T1.area_code FROM Area_Code_State AS T1 JOIN VOTES AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id JOIN CONTTESTANTS AS T3 ON T2.contestant_id  =  T3.contestant_id WHERE T3.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T1.area_code FROM Area_Code_State AS T1 JOIN VOTES AS T2 ON T1.area_code_state_id  =  T2.area_code_state_id JOIN CONTTESTANTS AS T3 ON T2.contestant_id  =  T3.contestant_id WHERE T3.contestant_name  =  'Kelly Clauss'<|eot_id|>
voter_1,"select contestant_name from contestants where contestant_name like ""%al%""",Return the names of the contestants whose names contain the substring 'Al' .,"area code state, contestants, votes","[('Jessie Alloway',), ('Alana Bregman',), ('Allie Rogalski',), ('Kurt Walser',)]",SELECT contestant_name FROM contestants WHERE contestant_name LIKE '%Al%'
world_1,SELECT Name FROM country WHERE IndepYear  >  1950,What are the names of all the countries that became independent after 1950?,"city, sqlite sequence, country, countrylanguage","[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]",SELECT country_name FROM country WHERE independence_year  >  1950
world_1,SELECT Name FROM country WHERE IndepYear  >  1950,Give the names of the nations that were founded after 1950.,"city, sqlite sequence, country, countrylanguage","[('Angola',), ('United Arab Emirates',), ('Armenia',), ('Antigua and Barbuda',), ('Azerbaijan',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Barbados',), ('Brunei',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Algeria',), ('Eritrea',), ('Estonia',), ('Fiji Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('Georgia',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Grenada',), ('Guyana',), ('Croatia',), ('Jamaica',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('Kuwait',), ('Laos',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Lesotho',), ('Lithuania',), ('Latvia',), ('Morocco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Namibia',), ('Niger',), ('Nigeria',), ('Nauru',), ('Oman',), ('Palau',), ('Papua New Guinea',), ('Qatar',), ('Russian Federation',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Singapore',), ('Solomon Islands',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tajikistan',), ('Turkmenistan',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Tuvalu',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Vanuatu',), ('Samoa',), ('Zambia',), ('Zimbabwe',)]",SELECT country_name FROM country WHERE date_of.Foundation  >  1950
world_1,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",How many countries have a republic as their form of government?,"city, sqlite sequence, country, countrylanguage","[(122,)]",SELECT count(*) FROM country WHERE country_form  =  'Republic'
world_1,"SELECT count(*) FROM country WHERE GovernmentForm  =  ""Republic""",How many countries have governments that are republics?,"city, sqlite sequence, country, countrylanguage","[(122,)]",SELECT count(DISTINCT government_form) FROM country WHERE government_form  = 'republic'
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",What is the total surface area of the countries in the Caribbean region?,"city, sqlite sequence, country, countrylanguage","[(234423.0,)]",SELECT sum(surface_area) FROM country WHERE region  =  'Caribbean'
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Region  =  ""Caribbean""",How much surface area do the countires in the Carribean cover together?,"city, sqlite sequence, country, countrylanguage","[(234423.0,)]",SELECT sum(surface_area) FROM country WHERE continent  =  'Caribbean'
world_1,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",Which continent is Anguilla in?,"city, sqlite sequence, country, countrylanguage","[('North America',)]",SELECT T1.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' AND T1.country_name  =  'Anguilla'
world_1,"SELECT Continent FROM country WHERE Name  =  ""Anguilla""",What is the continent name which Anguilla belongs to?,"city, sqlite sequence, country, countrylanguage","[('North America',)]",SELECT T3.continent FROM world_1.country AS T1 JOIN world_1.countrylanguage AS T2 ON T2.country_id  =  T1.country_id JOIN world_1.country AS T3 ON T3.country_name  =  'Anguilla'<|eot_id|>
world_1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""",Which region is the city Kabul located in?,"city, sqlite sequence, country, countrylanguage","[('Southern and Central Asia',)]",SELECT T2.region FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.city_name  =  'Kabul'
world_1,"SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  ""Kabul""",What region is Kabul in?,"city, sqlite sequence, country, countrylanguage","[('Southern and Central Asia',)]",SELECT T2.region FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.city_name  =  'Kabul'
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1",Which language is the most popular in Aruba?,"city, sqlite sequence, country, countrylanguage","[('Papiamento',)]",SELECT language FROM countrylanguage WHERE country  =  'Aruba' GROUP BY language ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba"" ORDER BY Percentage DESC LIMIT 1",What language is predominantly spoken in Aruba?,"city, sqlite sequence, country, countrylanguage","[('Papiamento',)]",SELECT language FROM countrylanguage WHERE country_id IN ( SELECT country_id FROM country WHERE name  =  'Aruba' ) GROUP BY language ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""",What are the population and life expectancies in Brazil?,"city, sqlite sequence, country, countrylanguage","[(170115000, 62.9)]","SELECT T1.city_population,  T1.life_expectancy FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country_name  =  'Brazil'"
world_1,"SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  ""Brazil""",Give me Brazil’s population and life expectancies.,"city, sqlite sequence, country, countrylanguage","[(170115000, 62.9)]","SELECT T2.city_population,  T2.life_expectancy FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country_name  =  'Brazil'"
world_1,"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""",What are the region and population of Angola?,"city, sqlite sequence, country, countrylanguage","[(12878000, 'Central Africa')]","SELECT T2.region,  T2.city_population FROM city AS T1 JOIN country AS T2 ON T2.country_id  =  T1.country_id WHERE T2.country_name  =  'Angola'"
world_1,"SELECT Population ,  Region FROM country WHERE Name  =  ""Angola""",What region does Angola belong to and what is its population?,"city, sqlite sequence, country, countrylanguage","[(12878000, 'Central Africa')]","SELECT T2.region,  T1.city_population FROM city AS T1 JOIN country AS T2 ON T2.country_id  =  T1.country_id WHERE T2.country_name  =  'Angola'"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",What is the average expected life expectancy for countries in the region of Central Africa?,"city, sqlite sequence, country, countrylanguage","[(50.31111111111111,)]",SELECT avg(T1.life_expectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' AND T1.region  =  'Central Africa'
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Region  =  ""Central Africa""",How long is the people’s average life expectancy in Central Africa?,"city, sqlite sequence, country, countrylanguage","[(50.31111111111111,)]",SELECT avg(T2.life_expectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.region  =  'Central Africa'
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",What is the name of country that has the shortest life expectancy in Asia?,"city, sqlite sequence, country, countrylanguage","[('Afghanistan',)]",SELECT name FROM country WHERE life_expectancy  =  (SELECT min(life_expectancy) FROM country WHERE continent  =  'Asia')
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia"" ORDER BY LifeExpectancy LIMIT 1",Give the name of the country in Asia with the lowest life expectancy.,"city, sqlite sequence, country, countrylanguage","[('Afghanistan',)]",SELECT T2.country_name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language_id  =  1 AND T2.continent  =  'Asia' GROUP BY T2.country_name ORDER BY avg(T1.life_expectancy) LIMIT 1
world_1,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""",What is the total population and maximum GNP in Asia?,"city, sqlite sequence, country, countrylanguage","[(3705025700, 3787042.0)]","SELECT sum(T1.population),  max(T1.gnp) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'Mandarin' INTERSECT SELECT sum(T1.population),  max(T1.gnp) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'English' INTERSECT SELECT sum(T1.population),  max(T1.gnp) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'Spanish' INTERSECT SELECT sum(T1.population),  max(T1.gnp) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'French'<|eot_id|>"
world_1,"SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  ""Asia""","How many people live in Asia, and what is the largest GNP among them?","city, sqlite sequence, country, countrylanguage","[(3705025700, 3787042.0)]","SELECT sum(T1.population),  max(T1.gnp) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'Asian'"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",What is the average life expectancy in African countries that are republics?,"city, sqlite sequence, country, countrylanguage","[(50.84347826086956,)]",SELECT avg(T2.life_expectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent  =  'Africa' AND T2政府_type  =  'Republic'
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  ""Africa"" AND GovernmentForm  =  ""Republic""",Give the average life expectancy for countries in Africa which are republics?,"city, sqlite sequence, country, countrylanguage","[(50.84347826086956,)]",SELECT avg(T1.life_expectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Africa' AND T1政府_type  =  'Republic'
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",What is the total surface area of the continents Asia and Europe?,"city, sqlite sequence, country, countrylanguage","[(54930138.9,)]",SELECT sum(surface_area) FROM country WHERE continent  =  'Asia' OR continent  =  'Europe'
world_1,"SELECT sum(SurfaceArea) FROM country WHERE Continent  =  ""Asia"" OR Continent  =  ""Europe""",Give the total surface area covered by countries in Asia or Europe.,"city, sqlite sequence, country, countrylanguage","[(54930138.9,)]",SELECT sum(surface_area)FROM countryWHERE continent  =  'Asia' OR continent  =  'Europe'
world_1,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",How many people live in Gelderland district?,"city, sqlite sequence, country, countrylanguage","[(545548,)]",SELECT sum(city.population) FROM city WHERE district  =  'Gelderland'
world_1,"SELECT sum(Population) FROM city WHERE District  =  ""Gelderland""",What is the total population of Gelderland district?,"city, sqlite sequence, country, countrylanguage","[(545548,)]",SELECT sum(city_population) FROM city WHERE district  =  'Gelderland'
world_1,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""",What is the average GNP and total population in all nations whose government is US territory?,"city, sqlite sequence, country, countrylanguage","[(510.3333333333333, 329000)]","SELECT avg(T1.gnp),  avg(T1.population) FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'English' AND T1政府  =  'United States territory'"
world_1,"SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  ""US Territory""",Give the mean GNP and total population of nations which are considered US territory.,"city, sqlite sequence, country, countrylanguage","[(510.3333333333333, 329000)]","SELECT avg(T1.gnp),  avg(T1.population)FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id WHERE T2.language  =  'English' AND T1.territory  =  'United States'<|eot_id|>"
world_1,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,How many unique languages are spoken in the world?,"city, sqlite sequence, country, countrylanguage","[(457,)]",SELECT count(DISTINCT language) FROM countrylanguage
world_1,SELECT count(DISTINCT LANGUAGE) FROM countrylanguage,What is the number of distinct languages used around the world?,"city, sqlite sequence, country, countrylanguage","[(457,)]",SELECT count(DISTINCT language) FROM countrylanguage
world_1,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",How many type of governments are in Africa?,"city, sqlite sequence, country, countrylanguage","[(10,)]",SELECT count(DISTINCT government_form) FROM country WHERE continent  =  'Africa'
world_1,"SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  ""Africa""",How many different forms of governments are there in Africa?,"city, sqlite sequence, country, countrylanguage","[(10,)]",SELECT count(DISTINCT governments) FROM country WHERE continent  =  'Africa'
world_1,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""",What is the total number of languages used in Aruba?,"city, sqlite sequence, country, countrylanguage","[(4,)]",SELECT count(*) FROM countrylanguage WHERE country_id IN (SELECT country_id FROM country WHERE country_name  =  'Aruba')
world_1,"SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Aruba""",How many languages are spoken in Aruba?,"city, sqlite sequence, country, countrylanguage","[(4,)]",SELECT count(*) FROM countrylanguage WHERE country_id IN (SELECT country_id FROM country WHERE name  =  'Aruba')
world_1,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",How many official languages does Afghanistan have?,"city, sqlite sequence, country, countrylanguage","[(2,)]",SELECT count(*) FROM countrylanguage WHERE official-language  =  'Afghanistan'
world_1,"SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  ""Afghanistan"" AND IsOfficial  =  ""T""",How many official languages are spoken in Afghanistan?,"city, sqlite sequence, country, countrylanguage","[(2,)]",SELECT count(*) FROM countrylanguage WHERE country_id  =  'Afghanistan' AND official_language  =  1
world_1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,What is name of the country that speaks the largest number of languages?,"city, sqlite sequence, country, countrylanguage","[('United States',)]",SELECT T2.country_name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY count(*) DESC LIMIT 1
world_1,SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1,Give the name of the nation that uses the greatest amount of languages.,"city, sqlite sequence, country, countrylanguage","[('United States',)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY count(*) DESC LIMIT 1
world_1,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,Which continent has the most diverse languages?,"city, sqlite sequence, country, countrylanguage","[('Africa',)]",SELECT continent FROM countrylanguage GROUP BY continent ORDER BY count(*) DESC LIMIT 1
world_1,SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1,Which continent speaks the most languages?,"city, sqlite sequence, country, countrylanguage","[('Africa',)]",SELECT T3.continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id JOIN city AS T3 ON T3.city_id  =  T2.city_id GROUP BY T3.continent ORDER BY count(*) DESC LIMIT 1<|eot_id|>
world_1,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")",How many countries speak both English and Dutch?,"city, sqlite sequence, country, countrylanguage","[(3,)]",SELECT count(DISTINCT country_id) FROM countrylanguage WHERE language  =  'English' INTERSECT SELECT count(DISTINCT country_id) FROM countrylanguage WHERE language  =  'Dutch'
world_1,"SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"")",What is the number of nations that use English and Dutch?,"city, sqlite sequence, country, countrylanguage","[(3,)]",SELECT count(*) FROM countrylanguage WHERE languages  =  'english' INTERSECT SELECT count(*) FROM countrylanguage WHERE languages  =  'dutch'
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""",What are the names of nations speak both English and French?,"city, sqlite sequence, country, countrylanguage","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' INTERSECT SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'French'<|eot_id|>
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French""",Give the names of nations that speak both English and French.,"city, sqlite sequence, country, countrylanguage","[('Canada',), ('Monaco',), ('Seychelles',), ('United States',), ('Vanuatu',), ('Virgin Islands, U.S.',)]",SELECT T2.country_name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language  =  'English' INTERSECT SELECT T2.country_name FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language  =  'French'<|eot_id|>
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",What are the names of nations where both English and French are official languages?,"city, sqlite sequence, country, countrylanguage","[('Canada',), ('Seychelles',), ('Vanuatu',)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'english' INTERSECT SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'French'<|eot_id|>
world_1,"SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""French"" AND T2.IsOfficial  =  ""T""",Give the names of countries with English and French as official languages.,"city, sqlite sequence, country, countrylanguage","[('Canada',), ('Seychelles',), ('Vanuatu',)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' INTERSECT SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'French'<|eot_id|>
world_1,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""",What is the number of distinct continents where Chinese is spoken?,"city, sqlite sequence, country, countrylanguage","[(4,)]","SELECT count(DISTINCT continent) FROM countrylanguage WHERE language  =  ""Chinese"""
world_1,"SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Chinese""",How many continents speak Chinese?,"city, sqlite sequence, country, countrylanguage","[(4,)]","SELECT count(DISTINCT T3.continent) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id JOIN countrylanguage AS T3 ON T3.country_id  =  T3.country_id WHERE T1.language  =  ""Chinese"""
world_1,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""",What are the regions that use English or Dutch?,"city, sqlite sequence, country, countrylanguage","[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]",SELECT DISTINCT region FROM country WHERE languages  =  'English' OR languages  =  'Dutch'
world_1,"SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" OR T2.Language  =  ""Dutch""",Which regions speak Dutch or English?,"city, sqlite sequence, country, countrylanguage","[('Caribbean',), ('Polynesia',), ('Australia and New Zealand',), ('Western Europe',), ('Middle East',), ('Central America',), ('North America',), ('Southeast Asia',), ('Nordic Countries',), ('South America',), ('British Islands',), ('Southern Europe',), ('Micronesia',), ('Eastern Asia',), ('Southern Africa',), ('Southern and Central Asia',), ('Western Africa',), ('Eastern Africa',), ('Micronesia/Caribbean',), ('Melanesia',)]",SELECT region FROM country WHERE language  =  'Dutch' UNION SELECT region FROM country WHERE language  =  'English'
world_1,"SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND IsOfficial  =  ""T"" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""Dutch"" AND IsOfficial  =  ""T""",Which countries have either English or Dutch as an official language?,"city, sqlite sequence, country, countrylanguage","[('ABW', 'Aruba', 'North America', 'Caribbean', 193.0, None, 103000, 78.4, 828.0, 793.0, 'Aruba', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 129, 'AW', 'ABW', 'Dutch', 'T', 5.3), ('AIA', 'Anguilla', 'North America', 'Caribbean', 96.0, None, 8000, 76.1, 63.2, None, 'Anguilla', 'Dependent Territory of the UK', 'Elisabeth II', 62, 'AI', 'AIA', 'English', 'T', 0.0), ('ANT', 'Netherlands Antilles', 'North America', 'Caribbean', 800.0, None, 217000, 74.7, 1941.0, None, 'Nederlandse Antillen', 'Nonmetropolitan Territory of The Netherlands', 'Beatrix', 33, 'AN', 'ANT', 'Dutch', 'T', 0.0), ('ASM', 'American Samoa', 'Oceania', 'Polynesia', 199.0, None, 68000, 75.1, 334.0, None, 'Amerika Samoa', 'US Territory', 'George W. Bush', 54, 'AS', 'ASM', 'English', 'T', 3.1), ('ATG', 'Antigua and Barbuda', 'North America', 'Caribbean', 442.0, 1981, 68000, 70.5, 612.0, 584.0, 'Antigua and Barbuda', 'Constitutional Monarchy', 'Elisabeth II', 63, 'AG', 'ATG', 'English', 'T', 0.0), ('AUS', 'Australia', 'Oceania', 'Australia and New Zealand', 7741220.0, 1901, 18886000, 79.8, 351182.0, 392911.0, 'Australia', 'Constitutional Monarchy, Federation', 'Elisabeth II', 135, 'AU', 'AUS', 'English', 'T', 81.2), ('BEL', 'Belgium', 'Europe', 'Western Europe', 30518.0, 1830, 10239000, 77.8, 249704.0, 243948.0, 'België/Belgique', 'Constitutional Monarchy, Federation', 'Albert II', 179, 'BE', 'BEL', 'Dutch', 'T', 59.2), ('BLZ', 'Belize', 'North America', 'Central America', 22696.0, 1981, 241000, 70.9, 630.0, 616.0, 'Belize', 'Constitutional Monarchy', 'Elisabeth II', 185, 'BZ', 'BLZ', 'English', 'T', 50.8), ('BMU', 'Bermuda', 'North America', 'North America', 53.0, None, 65000, 76.9, 2328.0, 2190.0, 'Bermuda', 'Dependent Territory of the UK', 'Elisabeth II', 191, 'BM', 'BMU', 'English', 'T', 100.0), ('BRB', 'Barbados', 'North America', 'Caribbean', 430.0, 1966, 270000, 73.0, 2223.0, 2186.0, 'Barbados', 'Constitutional Monarchy', 'Elisabeth II', 174, 'BB', 'BRB', 'English', 'T', 0.0), ('CAN', 'Canada', 'North America', 'North America', 9970610.0, 1867, 31147000, 79.4, 598862.0, 625626.0, 'Canada', 'Constitutional Monarchy, Federation', 'Elisabeth II', 1822, 'CA', 'CAN', 'English', 'T', 60.4), ('CCK', 'Cocos (Keeling) Islands', 'Oceania', 'Australia and New Zealand', 14.0, None, 600, None, 0.0, None, 'Cocos (Keeling) Islands', 'Territory of Australia', 'Elisabeth II', 2317, 'CC', 'CCK', 'English', 'T', 0.0), ('CXR', 'Christmas Island', 'Oceania', 'Australia and New Zealand', 135.0, None, 2500, None, 0.0, None, 'Christmas Island', 'Territory of Australia', 'Elisabeth II', 1791, 'CX', 'CXR', 'English', 'T', 0.0), ('CYM', 'Cayman Islands', 'North America', 'Caribbean', 264.0, None, 38000, 78.9, 1263.0, 1186.0, 'Cayman Islands', 'Dependent Territory of the UK', 'Elisabeth II', 553, 'KY', 'CYM', 'English', 'T', 0.0), ('FLK', 'Falkland Islands', 'South America', 'South America', 12173.0, None, 2000, None, 0.0, None, 'Falkland Islands', 'Dependent Territory of the UK', 'Elisabeth II', 763, 'FK', 'FLK', 'English', 'T', 0.0), ('GBR', 'United Kingdom', 'Europe', 'British Islands', 242900.0, 1066, 59623400, 77.7, 1378330.0, 1296830.0, 'United Kingdom', 'Constitutional Monarchy', 'Elisabeth II', 456, 'GB', 'GBR', 'English', 'T', 97.3), ('GIB', 'Gibraltar', 'Europe', 'Southern Europe', 6.0, None, 25000, 79.0, 258.0, None, 'Gibraltar', 'Dependent Territory of the UK', 'Elisabeth II', 915, 'GI', 'GIB', 'English', 'T', 88.9), ('GUM', 'Guam', 'Oceania', 'Micronesia', 549.0, None, 168000, 77.8, 1197.0, 1136.0, 'Guam', 'US Territory', 'George W. Bush', 921, 'GU', 'GUM', 'English', 'T', 37.5), ('HKG', 'Hong Kong', 'Asia', 'Eastern Asia', 1075.0, None, 6782000, 79.5, 166448.0, 173610.0, 'Xianggang/Hong Kong', 'Special Administrative Region of China', 'Jiang Zemin', 937, 'HK', 'HKG', 'English', 'T', 2.2), ('IRL', 'Ireland', 'Europe', 'British Islands', 70273.0, 1921, 3775100, 76.8, 75921.0, 73132.0, 'Ireland/Éire', 'Republic', 'Mary McAleese', 1447, 'IE', 'IRL', 'English', 'T', 98.4), ('KNA', 'Saint Kitts and Nevis', 'North America', 'Caribbean', 261.0, 1983, 38000, 70.7, 299.0, None, 'Saint Kitts and Nevis', 'Constitutional Monarchy', 'Elisabeth II', 3064, 'KN', 'KNA', 'English', 'T', 0.0), ('LCA', 'Saint Lucia', 'North America', 'Caribbean', 622.0, 1979, 154000, 72.3, 571.0, None, 'Saint Lucia', 'Constitutional Monarchy', 'Elisabeth II', 3065, 'LC', 'LCA', 'English', 'T', 20.0), ('LSO', 'Lesotho', 'Africa', 'Southern Africa', 30355.0, 1966, 2153000, 50.8, 1061.0, 1161.0, 'Lesotho', 'Constitutional Monarchy', 'Letsie III', 2437, 'LS', 'LSO', 'English', 'T', 0.0), ('MHL', 'Marshall Islands', 'Oceania', 'Micronesia', 181.0, 1990, 64000, 65.5, 97.0, None, 'Marshall Islands/Majol', 'Republic', 'Kessai Note', 2507, 'MH', 'MHL', 'English', 'T', 0.0), ('MLT', 'Malta', 'Europe', 'Southern Europe', 316.0, 1964, 380200, 77.9, 3512.0, 3338.0, 'Malta', 'Republic', 'Guido de Marco', 2484, 'MT', 'MLT', 'English', 'T', 2.1), ('MNP', 'Northern Mariana Islands', 'Oceania', 'Micronesia', 464.0, None, 78000, 75.5, 0.0, None, 'Northern Mariana Islands', 'Commonwealth of the US', 'George W. Bush', 2913, 'MP', 'MNP', 'English', 'T', 4.8), ('MSR', 'Montserrat', 'North America', 'Caribbean', 102.0, None, 11000, 78.0, 109.0, None, 'Montserrat', 'Dependent Territory of the UK', 'Elisabeth II', 2697, 'MS', 'MSR', 'English', 'T', 0.0), ('NFK', 'Norfolk Island', 'Oceania', 'Australia and New Zealand', 36.0, None, 2000, None, 0.0, None, 'Norfolk Island', 'Territory of Australia', 'Elisabeth II', 2806, 'NF', 'NFK', 'English', 'T', 0.0), ('NIU', 'Niue', 'Oceania', 'Polynesia', 260.0, None, 2000, None, 0.0, None, 'Niue', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 2805, 'NU', 'NIU', 'English', 'T', 0.0), ('NLD', 'Netherlands', 'Europe', 'Western Europe', 41526.0, 1581, 15864000, 78.3, 371362.0, 360478.0, 'Nederland', 'Constitutional Monarchy', 'Beatrix', 5, 'NL', 'NLD', 'Dutch', 'T', 95.6), ('NRU', 'Nauru', 'Oceania', 'Micronesia', 21.0, 1968, 12000, 60.8, 197.0, None, 'Naoero/Nauru', 'Republic', 'Bernard Dowiyogo', 2728, 'NR', 'NRU', 'English', 'T', 7.5), ('NZL', 'New Zealand', 'Oceania', 'Australia and New Zealand', 270534.0, 1907, 3862000, 77.8, 54669.0, 64960.0, 'New Zealand/Aotearoa', 'Constitutional Monarchy', 'Elisabeth II', 3499, 'NZ', 'NZL', 'English', 'T', 87.0), ('PLW', 'Palau', 'Oceania', 'Micronesia', 459.0, 1994, 19000, 68.6, 105.0, None, 'Belau/Palau', 'Republic', 'Kuniwo Nakamura', 2881, 'PW', 'PLW', 'English', 'T', 3.2), ('SHN', 'Saint Helena', 'Africa', 'Western Africa', 314.0, None, 6000, 76.8, 0.0, None, 'Saint Helena', 'Dependent Territory of the UK', 'Elisabeth II', 3063, 'SH', 'SHN', 'English', 'T', 0.0), ('SYC', 'Seychelles', 'Africa', 'Eastern Africa', 455.0, 1976, 77000, 70.4, 536.0, 539.0, 'Sesel/Seychelles', 'Republic', 'France-Albert René', 3206, 'SC', 'SYC', 'English', 'T', 3.8), ('TCA', 'Turks and Caicos Islands', 'North America', 'Caribbean', 430.0, None, 17000, 73.3, 96.0, None, 'The Turks and Caicos Islands', 'Dependent Territory of the UK', 'Elisabeth II', 3423, 'TC', 'TCA', 'English', 'T', 0.0), ('TKL', 'Tokelau', 'Oceania', 'Polynesia', 12.0, None, 2000, None, 0.0, None, 'Tokelau', 'Nonmetropolitan Territory of New Zealand', 'Elisabeth II', 3333, 'TK', 'TKL', 'English', 'T', 0.0), ('TON', 'Tonga', 'Oceania', 'Polynesia', 650.0, 1970, 99000, 67.9, 146.0, 170.0, 'Tonga', 'Monarchy', ""Taufa'ahau Tupou IV"", 3334, 'TO', 'TON', 'English', 'T', 0.0), ('TUV', 'Tuvalu', 'Oceania', 'Polynesia', 26.0, 1978, 12000, 66.3, 6.0, None, 'Tuvalu', 'Constitutional Monarchy', 'Elisabeth II', 3424, 'TV', 'TUV', 'English', 'T', 0.0), ('UMI', 'United States Minor Outlying Islands', 'Oceania', 'Micronesia/Caribbean', 16.0, None, 0, None, 0.0, None, 'United States Minor Outlying Islands', 'Dependent Territory of the US', 'George W. Bush', None, 'UM', 'UMI', 'English', 'T', 0.0), ('USA', 'United States', 'North America', 'North America', 9363520.0, 1776, 278357000, 77.1, 8510700.0, 8110900.0, 'United States', 'Federal Republic', 'George W. Bush', 3813, 'US', 'USA', 'English', 'T', 86.2), ('VCT', 'Saint Vincent and the Grenadines', 'North America', 'Caribbean', 388.0, 1979, 114000, 72.3, 285.0, None, 'Saint Vincent and the Grenadines', 'Constitutional Monarchy', 'Elisabeth II', 3066, 'VC', 'VCT', 'English', 'T', 0.0), ('VGB', 'Virgin Islands, British', 'North America', 'Caribbean', 151.0, None, 21000, 75.4, 612.0, 573.0, 'British Virgin Islands', 'Dependent Territory of the UK', 'Elisabeth II', 537, 'VG', 'VGB', 'English', 'T', 0.0), ('VIR', 'Virgin Islands, U.S.', 'North America', 'Caribbean', 347.0, None, 93000, 78.1, 0.0, None, 'Virgin Islands of the United States', 'US Territory', 'George W. Bush', 4067, 'VI', 'VIR', 'English', 'T', 81.7), ('VUT', 'Vanuatu', 'Oceania', 'Melanesia', 12189.0, 1980, 190000, 60.6, 261.0, 246.0, 'Vanuatu', 'Republic', 'John Bani', 3537, 'VU', 'VUT', 'English', 'T', 28.3), ('WSM', 'Samoa', 'Oceania', 'Polynesia', 2831.0, 1962, 180000, 69.2, 141.0, 157.0, 'Samoa', 'Parlementary Monarchy', 'Malietoa Tanumafili II', 3169, 'WS', 'WSM', 'English', 'T', 0.6), ('ZAF', 'South Africa', 'Africa', 'Southern Africa', 1221037.0, 1910, 40377000, 51.1, 116729.0, 129092.0, 'South Africa', 'Republic', 'Thabo Mbeki', 716, 'ZA', 'ZAF', 'English', 'T', 8.5), ('ZWE', 'Zimbabwe', 'Africa', 'Eastern Africa', 390757.0, 1980, 11669000, 37.8, 5951.0, 8670.0, 'Zimbabwe', 'Republic', 'Robert G. Mugabe', 4068, 'ZW', 'ZWE', 'English', 'T', 2.2)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'english' UNION SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'dutch'<|eot_id|>
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",Which language is the most popular on the Asian continent?,"city, sqlite sequence, country, countrylanguage","[('Arabic',)]",SELECT language FROM countrylanguage WHERE continent  =  'Asia' GROUP BY language ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  ""Asia"" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1",What is the language that is used by the largest number of Asian nations?,"city, sqlite sequence, country, countrylanguage","[('Arabic',)]",SELECT language FROM countrylanguage WHERE country_id IN (SELECT id FROM country WHERE continent  =  'Asia') GROUP BY language ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1",Which languages are spoken by only one country in republic governments?,"city, sqlite sequence, country, countrylanguage","[('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tandjile',), ('Temne',), ('Teso',), ('Thai',), ('Tigre',), ('Tikar',), ('Tongan',), ('Tripuri',), ('Tswa',), ('Tukulor',), ('Turkana',), ('Turkmenian',), ('Ukrainian and Russian',), ('Urdu',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Watyi',), ('Xhosa',), ('Yao',), ('Zande',), ('Zenaga',), ('Zulu',), ('[South]Mande',)]",SELECT language FROM countrylanguage WHERE countries  =  'Republik' GROUP BY language HAVING count(*)  =  1
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  ""Republic"" GROUP BY T2.Language HAVING COUNT(*)  =  1",What languages are only used by a single country with a republic government?,"city, sqlite sequence, country, countrylanguage","[('Abhyasi',), ('Acholi',), ('Adja',), ('Aizo',), ('Ambo',), ('Amhara',), ('Ami',), ('Ane',), ('Arabic-French',), ('Arabic-French-English',), ('Araucan',), ('Assyrian',), ('Atayal',), ('Bajad',), ('Balante',), ('Bali',), ('Balochi',), ('Bambara',), ('Bamileke-bamum',), ('Banda',), ('Banja',), ('Bariba',), ('Bassa',), ('Batakki',), ('Bemba',), ('Bengali',), ('Berberi',), ('Bhojpuri',), ('Bicol',), ('Bilin',), ('Bislama',), ('Boa',), ('Brahui',), ('Bubi',), ('Bugi',), ('Bullom-sherbro',), ('Burmese',), ('Buryat',), ('Busansi',), ('Cakchiquel',), ('Caprivi',), ('Cebuano',), ('Chaga and Pare',), ('Chakma',), ('Chewa',), ('Chichewa',), ('Chin',), ('Chuabo',), ('Comorian',), ('Comorian-Arabic',), ('Comorian-French',), ('Comorian-Swahili',), ('Comorian-madagassi',), ('Cuna',), ('Czech',), ('Czech and Moravian',), ('Dagara',), ('Dariganga',), ('Dhivehi',), ('Dorbet',), ('Duala',), ('Dyula',), ('Embera',), ('Fijian',), ('Fon',), ('Friuli',), ('Ga-adangme',), ('Gagauzi',), ('Ganda',), ('Garifuna',), ('Garo',), ('Gbaya',), ('Georgiana',), ('Gio',), ('Gisu',), ('Gogo',), ('Gorane',), ('Grebo',), ('Guaymí',), ('Gur',), ('Gurage',), ('Gusii',), ('Ha',), ('Hadareb',), ('Hadjarai',), ('Haiti Creole',), ('Hakka',), ('Hassaniya',), ('Hausa',), ('Haya',), ('Hebrew',), ('Hehet',), ('Herero',), ('Hiligaynon',), ('Hindko',), ('Icelandic',), ('Ilocano',), ('Irish',), ('Javanese',), ('Kabyé',), ('Kachin',), ('Kalenjin',), ('Kamba',), ('Kanem-bornu',), ('Kanuri',), ('Karakalpak',), ('Karen',), ('Kavango',), ('Kayah',), ('Kekchí',), ('Khasi',), ('Khoekhoe',), ('Kiga',), ('Kikuyu',), ('Kirgiz',), ('Kirundi',), ('Kissi',), ('Kono-vai',), ('Korean',), ('Kotokoli',), ('Kuranko',), ('Lango',), ('Lao',), ('Lao-Soung',), ('Latvian',), ('Limba',), ('Lozi',), ('Luba',), ('Luchazi',), ('Lugbara',), ('Luguru',), ('Luhya',), ('Luimbe-nganguela',), ('Luo',), ('Luvale',), ('Madura',), ('Maguindanao',), ('Maka',), ('Makonde',), ('Makua',), ('Maltese',), ('Mam',), ('Mandara',), ('Mandarin Chinese',), ('Mandjia',), ('Mandyako',), ('Mano',), ('Maranao',), ('Marathi',), ('Marendje',), ('Marma',), ('Marshallese',), ('Masai',), ('Masana',), ('Mayo-kebbi',), ('Mboshi',), ('Mbum',), ('Mbundu',), ('Mende',), ('Meru',), ('Min',), ('Minangkabau',), ('Mixed Languages',), ('Moba',), ('Mon',), ('Mon-khmer',), ('Mongo',), ('Mongolian',), ('Moravian',), ('Mpongwe',), ('Nahua',), ('Nama',), ('Naudemba',), ('Nauru',), ('Ngala and Bangi',), ('Ngbaka',), ('Ngoni',), ('Nkole',), ('Northsotho',), ('Nsenga',), ('Nyakusa',), ('Nyamwesi',), ('Nyaneka-nkhumbi',), ('Nyika',), ('Oromo',), ('Osseetti',), ('Ouaddai',), ('Ovambo',), ('Ovimbundu',), ('Paiwan',), ('Palau',), ('Pampango',), ('Pangasinan',), ('Pashto',), ('Persian',), ('Philippene Languages',), ('Pilipino',), ('Punjabi',), ('Punu',), ('Punu-sira-nzebi',), ('Quiché',), ('Rakhine',), ('Rapa nui',), ('Ronga',), ('Rundi',), ('Saame',), ('Saho',), ('Sango',), ('Santhali',), ('Saraiki',), ('Sardinian',), ('Sena',), ('Senufo and Minianka',), ('Serer',), ('Seselwa',), ('Shambala',), ('Shan',), ('Sidamo',), ('Silesiana',), ('Sinaberberi',), ('Sindhi',), ('Singali',), ('Soga',), ('Somba',), ('Songhai',), ('Songhai-zerma',), ('Soqutri',), ('Southsotho',), ('Sranantonga',), ('Sumo',), ('Sunda',), ('Susu',), ('Swazi',), ('Swedish',), ('Tandjile',), ('Temne',), ('Teso',), ('Thai',), ('Tigre',), ('Tikar',), ('Tongan',), ('Tripuri',), ('Tswa',), ('Tukulor',), ('Turkana',), ('Turkmenian',), ('Ukrainian and Russian',), ('Urdu',), ('Venda',), ('Walaita',), ('Waray-waray',), ('Watyi',), ('Xhosa',), ('Yao',), ('Zande',), ('Zenaga',), ('Zulu',), ('[South]Mande',)]",SELECT language FROM countrylanguage WHERE government LIKE 'Republic' GROUP BY language HAVING count(*)  =  1
world_1,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1",Find the city with the largest population that uses English.,"city, sqlite sequence, country, countrylanguage","[('New York', 8008278)]",SELECT city FROM city WHERE population  =  (SELECT max(population) FROM city) AND city_language  =  'English'
world_1,"SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  ""English"" ORDER BY T1.Population DESC LIMIT 1",What is the most populace city that speaks English?,"city, sqlite sequence, country, countrylanguage","[('New York', 8008278)]",SELECT T1.city_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'english' GROUP BY T1.city_name ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","Find the name, population and expected life length of asian country with the largest area?","city, sqlite sequence, country, countrylanguage","[('China', 1277558000, 71.4)]","SELECT T1.city_name,  T1.city_population,  T1.expected_life FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.region  =  'Asia' ORDER BY T2.area DESC LIMIT 1"
world_1,"SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  ""Asia"" ORDER BY SurfaceArea DESC LIMIT 1","What are the name, population, and life expectancy of the largest Asian country by land?","city, sqlite sequence, country, countrylanguage","[('China', 1277558000, 71.4)]","SELECT T1.city_name,  T1.city_population,  T1.life_expectancy FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent  =  'Asia' ORDER BY T2.land_area DESC LIMIT 1"
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")",What is average life expectancy in the countries where English is not the official language?,"city, sqlite sequence, country, countrylanguage","[(65.48270270270272,)]",SELECT avg(T1.life_expectancy) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language !=  'English'
world_1,"SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"" AND T2.IsOfficial  =  ""T"")",Give the mean life expectancy of countries in which English is not the official language.,"city, sqlite sequence, country, countrylanguage","[(65.48270270270272,)]",SELECT avg(T2.life_expectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language_isu =  'English' EXCEPT SELECT avg(T2.life_expectancy) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language_isu =  'English'
world_1,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")",What is the total number of people living in the nations that do not use English?,"city, sqlite sequence, country, countrylanguage","[(5451331150,)]",SELECT sum(city_population) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language!= 'english'
world_1,"SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  ""English"")",How many people live in countries that do not speak English?,"city, sqlite sequence, country, countrylanguage","[(5451331150,)]",SELECT count(*) FROM country WHERE language!= 'english'
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""",What is the official language spoken in the country whose head of state is Beatrix?,"city, sqlite sequence, country, countrylanguage","[('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]",SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.head_of_state  =  'Beatrix'
world_1,"SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  ""Beatrix"" AND T2.IsOfficial  =  ""T""",What is the official language used in the country the name of whose head of state is Beatrix.,"city, sqlite sequence, country, countrylanguage","[('Dutch',), ('Dutch',), ('Papiamento',), ('Dutch',)]",SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.head_of_state  =  'Beatrix'
world_1,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""",What is the total number of unique official languages spoken in the countries that are founded before 1930?,"city, sqlite sequence, country, countrylanguage","[(40,)]",SELECT count(DISTINCT official_language) FROM countrylanguage WHERE country_id IN (SELECT country_id FROM country WHERE founded  <  1930)
world_1,"SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  ""T""","For the countries founded before 1930, what is the total number of distinct official languages?","city, sqlite sequence, country, countrylanguage","[(40,)]",SELECT count(DISTINCT T1.languages) FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.founded  <  1930
world_1,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",What are the countries that have greater surface area than any country in Europe?,"city, sqlite sequence, country, countrylanguage","[('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Turks and Caicos Islands',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Tokelau',), ('Turkmenistan',), ('East Timor',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('United States Minor Outlying Islands',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vietnam',), ('Vanuatu',), ('Wallis and Futuna',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]",SELECT country_name FROM country WHERE surface_area  >  (SELECT max(surface_area) FROM country WHERE continent  =  'Europe')
world_1,"SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  ""Europe"")",Which countries have greater area than that of any country in Europe?,"city, sqlite sequence, country, countrylanguage","[('Aruba',), ('Afghanistan',), ('Angola',), ('Anguilla',), ('Albania',), ('Andorra',), ('Netherlands Antilles',), ('United Arab Emirates',), ('Argentina',), ('Armenia',), ('American Samoa',), ('Antarctica',), ('French Southern territories',), ('Antigua and Barbuda',), ('Australia',), ('Austria',), ('Azerbaijan',), ('Burundi',), ('Belgium',), ('Benin',), ('Burkina Faso',), ('Bangladesh',), ('Bulgaria',), ('Bahrain',), ('Bahamas',), ('Bosnia and Herzegovina',), ('Belarus',), ('Belize',), ('Bermuda',), ('Bolivia',), ('Brazil',), ('Barbados',), ('Brunei',), ('Bhutan',), ('Bouvet Island',), ('Botswana',), ('Central African Republic',), ('Canada',), ('Cocos (Keeling) Islands',), ('Switzerland',), ('Chile',), ('China',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Cook Islands',), ('Colombia',), ('Comoros',), ('Cape Verde',), ('Costa Rica',), ('Cuba',), ('Christmas Island',), ('Cayman Islands',), ('Cyprus',), ('Czech Republic',), ('Germany',), ('Djibouti',), ('Dominica',), ('Denmark',), ('Dominican Republic',), ('Algeria',), ('Ecuador',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Spain',), ('Estonia',), ('Ethiopia',), ('Finland',), ('Fiji Islands',), ('Falkland Islands',), ('France',), ('Faroe Islands',), ('Micronesia, Federated States of',), ('Gabon',), ('United Kingdom',), ('Georgia',), ('Ghana',), ('Gibraltar',), ('Guinea',), ('Guadeloupe',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('Greece',), ('Grenada',), ('Greenland',), ('Guatemala',), ('French Guiana',), ('Guam',), ('Guyana',), ('Hong Kong',), ('Heard Island and McDonald Islands',), ('Honduras',), ('Croatia',), ('Haiti',), ('Hungary',), ('Indonesia',), ('India',), ('British Indian Ocean Territory',), ('Ireland',), ('Iran',), ('Iraq',), ('Iceland',), ('Israel',), ('Italy',), ('Jamaica',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kenya',), ('Kyrgyzstan',), ('Cambodia',), ('Kiribati',), ('Saint Kitts and Nevis',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Saint Lucia',), ('Liechtenstein',), ('Sri Lanka',), ('Lesotho',), ('Lithuania',), ('Luxembourg',), ('Latvia',), ('Macao',), ('Morocco',), ('Monaco',), ('Moldova',), ('Madagascar',), ('Maldives',), ('Mexico',), ('Marshall Islands',), ('Macedonia',), ('Mali',), ('Malta',), ('Myanmar',), ('Mongolia',), ('Northern Mariana Islands',), ('Mozambique',), ('Mauritania',), ('Montserrat',), ('Martinique',), ('Mauritius',), ('Malawi',), ('Malaysia',), ('Mayotte',), ('Namibia',), ('New Caledonia',), ('Niger',), ('Norfolk Island',), ('Nigeria',), ('Nicaragua',), ('Niue',), ('Netherlands',), ('Norway',), ('Nepal',), ('Nauru',), ('New Zealand',), ('Oman',), ('Pakistan',), ('Panama',), ('Pitcairn',), ('Peru',), ('Philippines',), ('Palau',), ('Papua New Guinea',), ('Poland',), ('Puerto Rico',), ('North Korea',), ('Portugal',), ('Paraguay',), ('Palestine',), ('French Polynesia',), ('Qatar',), ('Réunion',), ('Romania',), ('Russian Federation',), ('Rwanda',), ('Saudi Arabia',), ('Sudan',), ('Senegal',), ('Singapore',), ('South Georgia and the South Sandwich Islands',), ('Saint Helena',), ('Svalbard and Jan Mayen',), ('Solomon Islands',), ('Sierra Leone',), ('El Salvador',), ('San Marino',), ('Somalia',), ('Saint Pierre and Miquelon',), ('Sao Tome and Principe',), ('Suriname',), ('Slovakia',), ('Slovenia',), ('Sweden',), ('Swaziland',), ('Seychelles',), ('Syria',), ('Turks and Caicos Islands',), ('Chad',), ('Togo',), ('Thailand',), ('Tajikistan',), ('Tokelau',), ('Turkmenistan',), ('East Timor',), ('Tonga',), ('Trinidad and Tobago',), ('Tunisia',), ('Turkey',), ('Tuvalu',), ('Taiwan',), ('Tanzania',), ('Uganda',), ('Ukraine',), ('United States Minor Outlying Islands',), ('Uruguay',), ('United States',), ('Uzbekistan',), ('Saint Vincent and the Grenadines',), ('Venezuela',), ('Virgin Islands, British',), ('Virgin Islands, U.S.',), ('Vietnam',), ('Vanuatu',), ('Wallis and Futuna',), ('Samoa',), ('Yemen',), ('Yugoslavia',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]",SELECT country_name FROM country WHERE area  >  (SELECT max(area) FROM country WHERE continent  =  'Europe')
world_1,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  ""Asia"")",What are the African countries that have a  population less than any country in Asia?,"city, sqlite sequence, country, countrylanguage","[('Angola',), ('Burundi',), ('Benin',), ('Burkina Faso',), ('Botswana',), ('Central African Republic',), ('Côte d’Ivoire',), ('Cameroon',), ('Congo, The Democratic Republic of the',), ('Congo',), ('Comoros',), ('Cape Verde',), ('Djibouti',), ('Algeria',), ('Egypt',), ('Eritrea',), ('Western Sahara',), ('Ethiopia',), ('Gabon',), ('Ghana',), ('Guinea',), ('Gambia',), ('Guinea-Bissau',), ('Equatorial Guinea',), ('British Indian Ocean Territory',), ('Kenya',), ('Liberia',), ('Libyan Arab Jamahiriya',), ('Lesotho',), ('Morocco',), ('Madagascar',), ('Mali',), ('Mozambique',), ('Mauritania',), ('Mauritius',), ('Malawi',), ('Mayotte',), ('Namibia',), ('Niger',), ('Nigeria',), ('Réunion',), ('Rwanda',), ('Sudan',), ('Senegal',), ('Saint Helena',), ('Sierra Leone',), ('Somalia',), ('Sao Tome and Principe',), ('Swaziland',), ('Seychelles',), ('Chad',), ('Togo',), ('Tunisia',), ('Tanzania',), ('Uganda',), ('South Africa',), ('Zambia',), ('Zimbabwe',)]",SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Africa' INTERSECT SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Asia' EXCEPT SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Asia' AND T1.population  >  (SELECT min(T1.population) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Africa')<|eot_id|>
world_1,"SELECT Name FROM country WHERE Continent  =  ""Africa""  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  ""Asia"")",Which African countries have a smaller population than that of any country in Asia?,"city, sqlite sequence, country, countrylanguage","[('British Indian Ocean Territory',), ('Mayotte',), ('Saint Helena',), ('Sao Tome and Principe',), ('Seychelles',)]",SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Africa' EXCEPT SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Asia'
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  ""Africa"")",Which Asian countries have a population that is larger than any country in Africa?,"city, sqlite sequence, country, countrylanguage","[('Bangladesh',), ('China',), ('Indonesia',), ('India',), ('Japan',), ('Pakistan',)]",SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' AND T1.region  =  'Asia' INTERSECT SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English' AND T1.region  =  'Africa'<|eot_id|>
world_1,"SELECT Name FROM country WHERE Continent  =  ""Asia""  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  ""Africa"")",What are the Asian countries which have a population larger than that of any country in Africa?,"city, sqlite sequence, country, countrylanguage","[('Afghanistan',), ('United Arab Emirates',), ('Armenia',), ('Azerbaijan',), ('Bangladesh',), ('Bahrain',), ('Brunei',), ('Bhutan',), ('China',), ('Cyprus',), ('Georgia',), ('Hong Kong',), ('Indonesia',), ('India',), ('Iran',), ('Iraq',), ('Israel',), ('Jordan',), ('Japan',), ('Kazakstan',), ('Kyrgyzstan',), ('Cambodia',), ('South Korea',), ('Kuwait',), ('Laos',), ('Lebanon',), ('Sri Lanka',), ('Macao',), ('Maldives',), ('Myanmar',), ('Mongolia',), ('Malaysia',), ('Nepal',), ('Oman',), ('Pakistan',), ('Philippines',), ('North Korea',), ('Palestine',), ('Qatar',), ('Saudi Arabia',), ('Singapore',), ('Syria',), ('Thailand',), ('Tajikistan',), ('Turkmenistan',), ('East Timor',), ('Turkey',), ('Taiwan',), ('Uzbekistan',), ('Vietnam',), ('Yemen',)]",SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Asia' INTERSECT SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T1.region  =  'Africa'
world_1,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",What are the country codes for countries that do not speak English?,"city, sqlite sequence, country, countrylanguage","[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]",SELECT country_code FROM country WHERE language!= 'english'
world_1,"SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",Return the country codes for countries that do not speak English.,"city, sqlite sequence, country, countrylanguage","[('AFG',), ('AGO',), ('ALB',), ('AND',), ('ARE',), ('ARG',), ('ARM',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHS',), ('BIH',), ('BLR',), ('BOL',), ('BRA',), ('BTN',), ('BWA',), ('CAF',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GEO',), ('GHA',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUY',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRN',), ('IRQ',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KOR',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LIE',), ('LKA',), ('LTU',), ('LUX',), ('LVA',), ('MAR',), ('MDA',), ('MDG',), ('MEX',), ('MKD',), ('MLI',), ('MMR',), ('MNG',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NLD',), ('NPL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PNG',), ('POL',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKM',), ('TMP',), ('TUN',), ('TUR',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('UZB',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YEM',), ('YUG',), ('ZMB',)]",SELECT country_code FROM country EXCEPT SELECT country_code FROM countrylanguage WHERE language  =  'english'
world_1,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""",What are the country codes of countries where people use languages other than English?,"city, sqlite sequence, country, countrylanguage","[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]",SELECT country_codeFROM countrylanguageWHERE language!= 'english'
world_1,"SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != ""English""",Give the country codes for countries in which people speak langauges that are not English.,"city, sqlite sequence, country, countrylanguage","[('ABW',), ('AFG',), ('AGO',), ('ALB',), ('AND',), ('ANT',), ('ARE',), ('ARG',), ('ARM',), ('ASM',), ('ATG',), ('AUS',), ('AUT',), ('AZE',), ('BDI',), ('BEL',), ('BEN',), ('BFA',), ('BGD',), ('BGR',), ('BHR',), ('BHS',), ('BIH',), ('BLR',), ('BLZ',), ('BOL',), ('BRA',), ('BRB',), ('BRN',), ('BTN',), ('BWA',), ('CAF',), ('CAN',), ('CCK',), ('CHE',), ('CHL',), ('CHN',), ('CIV',), ('CMR',), ('COD',), ('COG',), ('COK',), ('COL',), ('COM',), ('CPV',), ('CRI',), ('CUB',), ('CXR',), ('CYP',), ('CZE',), ('DEU',), ('DJI',), ('DMA',), ('DNK',), ('DOM',), ('DZA',), ('ECU',), ('EGY',), ('ERI',), ('ESH',), ('ESP',), ('EST',), ('ETH',), ('FIN',), ('FJI',), ('FRA',), ('FRO',), ('FSM',), ('GAB',), ('GBR',), ('GEO',), ('GHA',), ('GIB',), ('GIN',), ('GLP',), ('GMB',), ('GNB',), ('GNQ',), ('GRC',), ('GRD',), ('GRL',), ('GTM',), ('GUF',), ('GUM',), ('GUY',), ('HKG',), ('HND',), ('HRV',), ('HTI',), ('HUN',), ('IDN',), ('IND',), ('IRL',), ('IRN',), ('IRQ',), ('ISL',), ('ISR',), ('ITA',), ('JAM',), ('JOR',), ('JPN',), ('KAZ',), ('KEN',), ('KGZ',), ('KHM',), ('KIR',), ('KNA',), ('KOR',), ('KWT',), ('LAO',), ('LBN',), ('LBR',), ('LBY',), ('LCA',), ('LIE',), ('LKA',), ('LSO',), ('LTU',), ('LUX',), ('LVA',), ('MAC',), ('MAR',), ('MCO',), ('MDA',), ('MDG',), ('MDV',), ('MEX',), ('MHL',), ('MKD',), ('MLI',), ('MLT',), ('MMR',), ('MNG',), ('MNP',), ('MOZ',), ('MRT',), ('MTQ',), ('MUS',), ('MWI',), ('MYS',), ('MYT',), ('NAM',), ('NCL',), ('NER',), ('NGA',), ('NIC',), ('NIU',), ('NLD',), ('NOR',), ('NPL',), ('NRU',), ('NZL',), ('OMN',), ('PAK',), ('PAN',), ('PCN',), ('PER',), ('PHL',), ('PLW',), ('PNG',), ('POL',), ('PRI',), ('PRK',), ('PRT',), ('PRY',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('ROM',), ('RUS',), ('RWA',), ('SAU',), ('SDN',), ('SEN',), ('SGP',), ('SJM',), ('SLB',), ('SLE',), ('SLV',), ('SMR',), ('SOM',), ('SPM',), ('STP',), ('SUR',), ('SVK',), ('SVN',), ('SWE',), ('SWZ',), ('SYC',), ('SYR',), ('TCD',), ('TGO',), ('THA',), ('TJK',), ('TKL',), ('TKM',), ('TMP',), ('TON',), ('TTO',), ('TUN',), ('TUR',), ('TUV',), ('TWN',), ('TZA',), ('UGA',), ('UKR',), ('URY',), ('USA',), ('UZB',), ('VAT',), ('VCT',), ('VEN',), ('VIR',), ('VNM',), ('VUT',), ('WLF',), ('WSM',), ('YEM',), ('YUG',), ('ZAF',), ('ZMB',), ('ZWE',)]",SELECT country_code FROM countrylanguage WHERE language!= 'english'
world_1,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",What are the codes of the countries that do not speak English and whose government forms are not Republic?,"city, sqlite sequence, country, countrylanguage","[('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]",SELECT country_code FROM country WHERE government_form!= 'Republic' EXCEPT SELECT country_code FROM countrylanguage WHERE language  =  'english'
world_1,"SELECT Code FROM country WHERE GovernmentForm != ""Republic"" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  ""English""",Return the codes of countries that do not speak English and do not have Republics for governments.,"city, sqlite sequence, country, countrylanguage","[('AFG',), ('AND',), ('ARE',), ('ARG',), ('ATA',), ('ATF',), ('AUT',), ('AZE',), ('BEL',), ('BHS',), ('BIH',), ('BRA',), ('BTN',), ('BVT',), ('CHE',), ('CHN',), ('CUB',), ('DEU',), ('ESH',), ('ESP',), ('FRO',), ('FSM',), ('GLP',), ('GRD',), ('GRL',), ('GUF',), ('HMD',), ('IND',), ('IOT',), ('IRN',), ('JAM',), ('JOR',), ('KHM',), ('LBY',), ('LIE',), ('LUX',), ('MAR',), ('MDG',), ('MEX',), ('MTQ',), ('MYT',), ('NCL',), ('NGA',), ('NLD',), ('NPL',), ('OMN',), ('PCN',), ('PNG',), ('PRK',), ('PSE',), ('PYF',), ('QAT',), ('REU',), ('RUS',), ('SAU',), ('SDN',), ('SGS',), ('SJM',), ('SLB',), ('SPM',), ('SWE',), ('SWZ',), ('THA',), ('TMP',), ('VAT',), ('VEN',), ('VNM',), ('WLF',), ('YUG',)]",SELECT country_code FROM country EXCEPT SELECT country_code FROM countrylanguage UNION SELECT country_code FROM country WHERE government_form  =  'Republic'
world_1,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),Which cities are in European countries where English is not the official language?,"city, sqlite sequence, country, countrylanguage","[('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]",SELECT T1.city_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.region  =  'Europe' EXCEPT SELECT T1.city_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id JOIN countrylanguage AS T3 ON T2.country_id  =  T3.country_id WHERE T3.language  =  'english'
world_1,SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English'),What are the names of cities in Europe for which English is not the official language?,"city, sqlite sequence, country, countrylanguage","[('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Apeldoorn',), ('Nijmegen',), ('Enschede',), ('Haarlem',), ('Almere',), ('Arnhem',), ('Zaanstad',), ('´s-Hertogenbosch',), ('Amersfoort',), ('Maastricht',), ('Dordrecht',), ('Leiden',), ('Haarlemmermeer',), ('Zoetermeer',), ('Emmen',), ('Zwolle',), ('Ede',), ('Delft',), ('Heerlen',), ('Alkmaar',), ('Tirana',), ('Andorra la Vella',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Bruxelles [Brussel]',), ('Brugge',), ('Schaerbeek',), ('Namur',), ('Mons',), ('Sarajevo',), ('Banja Luka',), ('Zenica',), ('Sofija',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Stara Zagora',), ('Pleven',), ('Sliven',), ('Dobric',), ('Šumen',), ('Madrid',), ('Barcelona',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Salamanca',), ('Albacete',), ('Getafe',), ('Cádiz',), ('Alcorcón',), ('Huelva',), ('León',), ('Castellón de la Plana [Castell',), ('Badajoz',), ('[San Cristóbal de] la Laguna',), ('Logroño',), ('Santa Coloma de Gramenet',), ('Tarragona',), ('Lleida (Lérida)',), ('Jaén',), ('Ourense (Orense)',), ('Mataró',), ('Algeciras',), ('Marbella',), ('Barakaldo',), ('Dos Hermanas',), ('Santiago de Compostela',), ('Torrejón de Ardoz',), ('Tórshavn',), ('Longyearbyen',), ('Reykjavík',), ('Roma',), ('Milano',), ('Napoli',), ('Torino',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Perugia',), ('Foggia',), ('Reggio nell´ Emilia',), ('Salerno',), ('Ravenna',), ('Ferrara',), ('Rimini',), ('Syrakusa',), ('Sassari',), ('Monza',), ('Bergamo',), ('Pescara',), ('Latina',), ('Vicenza',), ('Terni',), ('Forlì',), ('Trento',), ('Novara',), ('Piacenza',), ('Ancona',), ('Lecce',), ('Bolzano',), ('Catanzaro',), ('La Spezia',), ('Udine',), ('Torre del Greco',), ('Andria',), ('Brindisi',), ('Giugliano in Campania',), ('Pisa',), ('Barletta',), ('Arezzo',), ('Alessandria',), ('Cesena',), ('Pesaro',), ('Wien',), ('Graz',), ('Linz',), ('Salzburg',), ('Innsbruck',), ('Klagenfurt',), ('Beograd',), ('Novi Sad',), ('Niš',), ('Priština',), ('Kragujevac',), ('Podgorica',), ('Subotica',), ('Prizren',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Patras',), ('Peristerion',), ('Herakleion',), ('Kallithea',), ('Larisa',), ('Zagreb',), ('Split',), ('Rijeka',), ('Osijek',), ('Riga',), ('Daugavpils',), ('Liepaja',), ('Schaan',), ('Vaduz',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('Šiauliai',), ('Panevezys',), ('Luxembourg [Luxemburg/Lëtzebuerg]',), ('Skopje',), ('Chisinau',), ('Tiraspol',), ('Balti',), ('Bender (Tîghina)',), ('Monte-Carlo',), ('Monaco-Ville',), ('Oslo',), ('Bergen',), ('Trondheim',), ('Stavanger',), ('Bærum',), ('Lisboa',), ('Porto',), ('Amadora',), ('Coímbra',), ('Braga',), ('Warszawa',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Ruda Slaska',), ('Rybnik',), ('Walbrzych',), ('Tychy',), ('Dabrowa Górnicza',), ('Plock',), ('Elblag',), ('Opole',), ('Gorzów Wielkopolski',), ('Wloclawek',), ('Chorzów',), ('Tarnów',), ('Zielona Góra',), ('Koszalin',), ('Legnica',), ('Kalisz',), ('Grudziadz',), ('Slupsk',), ('Jastrzebie-Zdrój',), ('Jaworzno',), ('Jelenia Góra',), ('Paris',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Grenoble',), ('Angers',), ('Dijon',), ('Brest',), ('Le Mans',), ('Clermont-Ferrand',), ('Amiens',), ('Aix-en-Provence',), ('Limoges',), ('Nîmes',), ('Tours',), ('Villeurbanne',), ('Metz',), ('Besançon',), ('Caen',), ('Orléans',), ('Mulhouse',), ('Rouen',), ('Boulogne-Billancourt',), ('Perpignan',), ('Nancy',), ('Roubaix',), ('Argenteuil',), ('Tourcoing',), ('Montreuil',), ('Bucuresti',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Baia Mare',), ('Buzau',), ('Satu Mare',), ('Botosani',), ('Piatra Neamt',), ('Râmnicu Vâlcea',), ('Suceava',), ('Drobeta-Turnu Severin',), ('Târgoviste',), ('Focsani',), ('Târgu Jiu',), ('Tulcea',), ('Resita',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Linköping',), ('Västerås',), ('Örebro',), ('Norrköping',), ('Helsingborg',), ('Jönköping',), ('Umeå',), ('Lund',), ('Borås',), ('Sundsvall',), ('Gävle',), ('Berlin',), ('Hamburg',), ('Munich [München]',), ('Köln',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Oldenburg',), ('Neuss',), ('Heidelberg',), ('Darmstadt',), ('Paderborn',), ('Potsdam',), ('Würzburg',), ('Regensburg',), ('Recklinghausen',), ('Göttingen',), ('Bremerhaven',), ('Wolfsburg',), ('Bottrop',), ('Remscheid',), ('Heilbronn',), ('Pforzheim',), ('Offenbach am Main',), ('Ulm',), ('Ingolstadt',), ('Gera',), ('Salzgitter',), ('Cottbus',), ('Reutlingen',), ('Fürth',), ('Siegen',), ('Koblenz',), ('Moers',), ('Bergisch Gladbach',), ('Zwickau',), ('Hildesheim',), ('Witten',), ('Schwerin',), ('Erlangen',), ('Kaiserslautern',), ('Trier',), ('Jena',), ('Iserlohn',), ('Gütersloh',), ('Marl',), ('Lünen',), ('Düren',), ('Ratingen',), ('Velbert',), ('Esslingen am Neckar',), ('Serravalle',), ('San Marino',), ('Bratislava',), ('Košice',), ('Prešov',), ('Ljubljana',), ('Maribor',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Oulu',), ('Lahti',), ('Zürich',), ('Geneve',), ('Basel',), ('Bern',), ('Lausanne',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Frederiksberg',), ('Praha',), ('Brno',), ('Ostrava',), ('Plzen',), ('Olomouc',), ('Liberec',), ('Ceské Budejovice',), ('Hradec Králové',), ('Ústí nad Labem',), ('Pardubice',), ('Kyiv',), ('Harkova [Harkiv]',), ('Dnipropetrovsk',), ('Donetsk',), ('Odesa',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Nikopol',), ('Berdjansk',), ('Pavlograd',), ('Sjeverodonetsk',), ('Slovjansk',), ('Uzgorod',), ('Altševsk',), ('Lysytšansk',), ('Jevpatorija',), ('Kamjanets-Podilskyi',), ('Jenakijeve',), ('Krasnyi Lutš',), ('Stahanov',), ('Oleksandrija',), ('Konotop',), ('Kostjantynivka',), ('Berdytšiv',), ('Izmajil',), ('Šostka',), ('Uman',), ('Brovary',), ('Mukatševe',), ('Budapest',), ('Debrecen',), ('Miskolc',), ('Szeged',), ('Pécs',), ('Györ',), ('Nyiregyháza',), ('Kecskemét',), ('Székesfehérvár',), ('Minsk',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Bobruisk',), ('Baranovitši',), ('Borisov',), ('Pinsk',), ('Orša',), ('Mozyr',), ('Novopolotsk',), ('Lida',), ('Soligorsk',), ('Molodetšno',), ('Città del Vaticano',), ('Moscow',), ('St Petersburg',), ('Novosibirsk',), ('Nizni Novgorod',), ('Jekaterinburg',), ('Samara',), ('Omsk',), ('Kazan',), ('Ufa',), ('Tšeljabinsk',), ('Rostov-na-Donu',), ('Perm',), ('Volgograd',), ('Voronez',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Kovrov',), ('Nahodka',), ('Ussurijsk',), ('Salavat',), ('Mytištši',), ('Kolomna',), ('Elektrostal',), ('Murom',), ('Kolpino',), ('Norilsk',), ('Almetjevsk',), ('Novomoskovsk',), ('Dimitrovgrad',), ('Pervouralsk',), ('Himki',), ('Balašiha',), ('Nevinnomyssk',), ('Pjatigorsk',), ('Korolev',), ('Serpuhov',), ('Odintsovo',), ('Orehovo-Zujevo',), ('Kamyšin',), ('Novotšeboksarsk',), ('Tšerkessk',), ('Atšinsk',), ('Magadan',), ('Mitšurinsk',), ('Kislovodsk',), ('Jelets',), ('Seversk',), ('Noginsk',), ('Velikije Luki',), ('Novokuibyševsk',), ('Neftekamsk',), ('Leninsk-Kuznetski',), ('Oktjabrski',), ('Sergijev Posad',), ('Arzamas',), ('Kiseljovsk',), ('Novotroitsk',), ('Obninsk',), ('Kansk',), ('Glazov',), ('Solikamsk',), ('Sarapul',), ('Ust-Ilimsk',), ('Štšolkovo',), ('Mezduretšensk',), ('Usolje-Sibirskoje',), ('Elista',), ('Novošahtinsk',), ('Votkinsk',), ('Kyzyl',), ('Serov',), ('Zelenodolsk',), ('Zeleznodoroznyi',), ('Kinešma',), ('Kuznetsk',), ('Uhta',), ('Jessentuki',), ('Tobolsk',), ('Neftejugansk',), ('Bataisk',), ('Nojabrsk',), ('Balašov',), ('Zeleznogorsk',), ('Zukovski',), ('Anzero-Sudzensk',), ('Bugulma',), ('Novouralsk',), ('Puškin',), ('Vorkuta',), ('Derbent',), ('Kirovo-Tšepetsk',), ('Krasnogorsk',), ('Klin',), ('Tšaikovski',), ('Novyi Urengoi',), ('Tallinn',), ('Tartu',)]",SELECT T1.city_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.region  =  'Europe' EXCEPT SELECT T1.city_name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'English'
world_1,"SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  ""Asia""",Return the different names of cities that are in Asia and for which Chinese is the official language.,"city, sqlite sequence, country, countrylanguage","[('Shanghai',), ('Peking',), ('Chongqing',), ('Tianjin',), ('Wuhan',), ('Harbin',), ('Shenyang',), ('Kanton [Guangzhou]',), ('Chengdu',), ('Nanking [Nanjing]',), ('Changchun',), ('Xi´an',), ('Dalian',), ('Qingdao',), ('Jinan',), ('Hangzhou',), ('Zhengzhou',), ('Shijiazhuang',), ('Taiyuan',), ('Kunming',), ('Changsha',), ('Nanchang',), ('Fuzhou',), ('Lanzhou',), ('Guiyang',), ('Ningbo',), ('Hefei',), ('Urumtši [Ürümqi]',), ('Anshan',), ('Fushun',), ('Nanning',), ('Zibo',), ('Qiqihar',), ('Jilin',), ('Tangshan',), ('Baotou',), ('Shenzhen',), ('Hohhot',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Ulanhot',), ('Korla',), ('Wanxian',), ('Rui´an',), ('Zhoushan',), ('Liangcheng',), ('Jiaozhou',), ('Taizhou',), ('Taonan',), ('Pingdu',), ('Ji´an',), ('Longkou',), ('Langfang',), ('Zhoukou',), ('Suining',), ('Yulin',), ('Jinhua',), ('Liu´an',), ('Shuangcheng',), ('Suizhou',), ('Ankang',), ('Weinan',), ('Longjing',), ('Da´an',), ('Lengshuijiang',), ('Laiyang',), ('Xianning',), ('Dali',), ('Anda',), ('Jincheng',), ('Longyan',), ('Xichang',), ('Wendeng',), ('Hailun',), ('Binzhou',), ('Linhe',), ('Wuwei',), ('Duyun',), ('Mishan',), ('Shangrao',), ('Changji',), ('Meixian',), ('Yushu',), ('Tiefa',), ('Huai´an',), ('Leiyang',), ('Zalantun',), ('Weihai',), ('Loudi',), ('Qingzhou',), ('Qidong',), ('Huaihua',), ('Luohe',), ('Chuzhou',), ('Kaiyuan',), ('Linqing',), ('Chaohu',), ('Laohekou',), ('Dujiangyan',), ('Zhumadian',), ('Linchuan',), ('Jiaonan',), ('Sanmenxia',), ('Heyuan',), ('Manzhouli',), ('Lhasa',), ('Lianyuan',), ('Kuytun',), ('Puqi',), ('Hongjiang',), ('Qinzhou',), ('Renqiu',), ('Yuyao',), ('Guigang',), ('Kaili',), ('Yan´an',), ('Beihai',), ('Xuangzhou',), ('Quzhou',), ('Yong´an',), ('Zixing',), ('Liyang',), ('Yizheng',), ('Yumen',), ('Liling',), ('Yuncheng',), ('Shanwei',), ('Cixi',), ('Yuanjiang',), ('Bozhou',), ('Jinchang',), ('Fu´an',), ('Suqian',), ('Shishou',), ('Hengshui',), ('Danjiangkou',), ('Fujin',), ('Sanya',), ('Guangshui',), ('Huangshan',), ('Xingcheng',), ('Zhucheng',), ('Kunshan',), ('Haining',), ('Pingliang',), ('Fuqing',), ('Xinzhou',), ('Jieyang',), ('Zhangjiagang',), ('Tong Xian',), ('Ya´an',), ('Emeishan',), ('Enshi',), ('Bose',), ('Yuzhou',), ('Tumen',), ('Putian',), ('Linhai',), ('Xilin Hot',), ('Shaowu',), ('Junan',), ('Huaying',), ('Pingyi',), ('Huangyan',), ('Singapore',)]",SELECT DISTINCT T1.city_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.region  =  'Asia' INTERSECT SELECT DISTINCT T1.city_name FROM city AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'Chinese'<|eot_id|>
world_1,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","What are the name, independence year, and surface area of the country with the smallest population?","city, sqlite sequence, country, countrylanguage","[('Antarctica', 13120000.0, None)]","SELECT T1.country_name,  T1.independence_year,  T1.surface_area FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language_isofficial  =  'T' GROUP BY T1.country_id ORDER BY count(*) ASC LIMIT 1"
world_1,"SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1","Give the name, year of independence, and surface area of the country that has the lowest population.","city, sqlite sequence, country, countrylanguage","[('Antarctica', 13120000.0, None)]","SELECT T1.name,  T1.independent_year,  T1.surface_area FROM country AS T1 JOIN city AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY count(*) ASC LIMIT 1"
world_1,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","What are the population, name and leader of the country with the largest area?","city, sqlite sequence, country, countrylanguage","[('Russian Federation', 146934000, 'Vladimir Putin')]",SELECT max(area) FROM country
world_1,"SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1","Give the name, population, and head of state for the country that has the largest area.","city, sqlite sequence, country, countrylanguage","[('Russian Federation', 146934000, 'Vladimir Putin')]","SELECT T1.country_name,  T1.country_population,  T1.head_of_state FROM country AS T1 JOIN countrylanguage AS T2 ON T2.country_id  =  T1.country_id GROUP BY T1.country_id ORDER BY T1.country_area DESC LIMIT 1"
world_1,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2",Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.,"city, sqlite sequence, country, countrylanguage","[(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]","SELECT country_name,  count(*) FROM countrylanguage GROUP BY country_name HAVING count(*)  >=  3"
world_1,"SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2","What are the names of countries that speak more than 2 languages, as well as how many languages they speak?","city, sqlite sequence, country, countrylanguage","[(5, 'Afghanistan'), (3, 'Albania'), (3, 'American Samoa'), (4, 'Andorra'), (9, 'Angola'), (3, 'Argentina'), (4, 'Aruba'), (8, 'Australia'), (8, 'Austria'), (4, 'Azerbaijan'), (7, 'Bangladesh'), (4, 'Belarus'), (6, 'Belgium'), (4, 'Belize'), (7, 'Benin'), (3, 'Bhutan'), (4, 'Bolivia'), (5, 'Botswana'), (5, 'Brazil'), (4, 'Brunei'), (4, 'Bulgaria'), (6, 'Burkina Faso'), (3, 'Burundi'), (4, 'Cambodia'), (8, 'Cameroon'), (12, 'Canada'), (6, 'Central African Republic'), (8, 'Chad'), (4, 'Chile'), (12, 'China'), (5, 'Colombia'), (5, 'Comoros'), (6, 'Congo'), (10, 'Congo, The Democratic Republic of the'), (4, 'Costa Rica'), (8, 'Czech Republic'), (5, 'Côte d’Ivoire'), (7, 'Denmark'), (3, 'Djibouti'), (6, 'Eritrea'), (5, 'Estonia'), (7, 'Ethiopia'), (5, 'Finland'), (6, 'France'), (3, 'French Polynesia'), (4, 'Gabon'), (5, 'Gambia'), (6, 'Georgia'), (6, 'Germany'), (6, 'Ghana'), (5, 'Guam'), (5, 'Guatemala'), (7, 'Guinea'), (6, 'Guinea-Bissau'), (3, 'Guyana'), (4, 'Honduras'), (5, 'Hong Kong'), (6, 'Hungary'), (12, 'India'), (9, 'Indonesia'), (10, 'Iran'), (5, 'Iraq'), (3, 'Israel'), (8, 'Italy'), (6, 'Japan'), (3, 'Jordan'), (6, 'Kazakstan'), (10, 'Kenya'), (7, 'Kyrgyzstan'), (4, 'Laos'), (6, 'Latvia'), (3, 'Lebanon'), (3, 'Lesotho'), (8, 'Liberia'), (3, 'Liechtenstein'), (5, 'Lithuania'), (5, 'Luxembourg'), (4, 'Macao'), (5, 'Macedonia'), (4, 'Malawi'), (6, 'Malaysia'), (6, 'Mali'), (6, 'Mauritania'), (6, 'Mauritius'), (3, 'Mayotte'), (6, 'Mexico'), (6, 'Micronesia, Federated States of'), (5, 'Moldova'), (4, 'Monaco'), (6, 'Mongolia'), (10, 'Mozambique'), (8, 'Myanmar'), (8, 'Namibia'), (5, 'Nauru'), (7, 'Nepal'), (4, 'Netherlands'), (3, 'Netherlands Antilles'), (3, 'New Caledonia'), (4, 'Nicaragua'), (5, 'Niger'), (10, 'Nigeria'), (6, 'Northern Mariana Islands'), (5, 'Norway'), (8, 'Pakistan'), (4, 'Palau'), (6, 'Panama'), (4, 'Paraguay'), (3, 'Peru'), (10, 'Philippines'), (4, 'Poland'), (6, 'Romania'), (12, 'Russian Federation'), (5, 'Réunion'), (3, 'Samoa'), (6, 'Senegal'), (3, 'Seychelles'), (8, 'Sierra Leone'), (3, 'Singapore'), (5, 'Slovakia'), (3, 'Slovenia'), (3, 'Solomon Islands'), (11, 'South Africa'), (4, 'Spain'), (3, 'Sri Lanka'), (10, 'Sudan'), (6, 'Sweden'), (4, 'Switzerland'), (6, 'Taiwan'), (3, 'Tajikistan'), (11, 'Tanzania'), (6, 'Thailand'), (8, 'Togo'), (3, 'Trinidad and Tobago'), (3, 'Tunisia'), (3, 'Turkey'), (4, 'Turkmenistan'), (3, 'Tuvalu'), (10, 'Uganda'), (7, 'Ukraine'), (3, 'United Kingdom'), (12, 'United States'), (6, 'Uzbekistan'), (3, 'Vanuatu'), (3, 'Venezuela'), (9, 'Vietnam'), (3, 'Virgin Islands, U.S.'), (6, 'Yugoslavia'), (6, 'Zambia'), (4, 'Zimbabwe')]","SELECT T1.country_name,  count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id HAVING count(*)  >  2"
world_1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",Find the number of cities in each district whose population is greater than the average population of cities?,"city, sqlite sequence, country, countrylanguage","[(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]","SELECT count(*),  district FROM city WHERE city_population  >  (SELECT avg(city_population) FROM city) GROUP BY district"
world_1,"SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District",How many cities in each district have a population that is above the average population across all cities?,"city, sqlite sequence, country, countrylanguage","[(1, 'Abidjan'), (1, 'Abu Dhabi'), (1, 'Adana'), (1, 'Addis Abeba'), (1, 'Aden'), (1, 'Aguascalientes'), (1, 'Ahal'), (2, 'Aichi'), (1, 'Alagoas'), (2, 'Alberta'), (1, 'Aleksandria'), (1, 'Aleppo'), (1, 'Alger'), (1, 'Almaty Qalasy'), (1, 'Altai'), (1, 'Amazonas'), (1, 'Amman'), (1, 'Anambra & Enugu & Eb'), (2, 'Andalusia'), (5, 'Andhra Pradesh'), (5, 'Anhui'), (1, 'Ankara'), (1, 'Antalya'), (1, 'Antananarivo'), (1, 'Antioquia'), (1, 'Antwerpen'), (1, 'Aragonia'), (1, 'Aragua'), (1, 'Arequipa'), (3, 'Arizona'), (1, 'Arkangeli'), (1, 'Ashanti'), (1, 'Assam'), (1, 'Astrahan'), (1, 'Asunción'), (1, 'Atlantique'), (1, 'Atlántico'), (1, 'Attika'), (1, 'Auckland'), (1, 'Baden-Württemberg'), (1, 'Baghdad'), (2, 'Bahia'), (2, 'Baijeri'), (3, 'Baja California'), (1, 'Baki'), (1, 'Bali'), (1, 'Baluchistan'), (1, 'Bamako'), (1, 'Banaadir'), (1, 'Bangkok'), (1, 'Bangui'), (1, 'Baskimaa'), (1, 'Basra'), (1, 'Baškortostan'), (1, 'Beirut'), (1, 'Bengasi'), (1, 'Berliini'), (1, 'Bihar'), (1, 'Bishkek shaary'), (1, 'Blantyre'), (2, 'Bolívar'), (1, 'Bratislava'), (1, 'Brazzaville'), (1, 'Bremen'), (1, 'British Colombia'), (1, 'Brjansk'), (1, 'Budapest'), (12, 'Buenos Aires'), (1, 'Bukarest'), (1, 'Bulawayo'), (1, 'Burjatia'), (1, 'Bursa'), (8, 'California'), (1, 'Callao'), (1, 'Campania'), (1, 'Canary Islands'), (2, 'Cap-Vert'), (1, 'Carabobo'), (1, 'Casablanca'), (1, 'Ceará'), (2, 'Central'), (2, 'Central Java'), (1, 'Central Macedonia'), (1, 'Central Serbia'), (1, 'Central Visayas'), (1, 'Centre'), (1, 'Chandigarh'), (1, 'Chari-Baguirmi'), (2, 'Chhatisgarh'), (1, 'Chiapas'), (4, 'Chiba'), (2, 'Chihuahua'), (1, 'Chisinau'), (1, 'Chittagong'), (1, 'Chollabuk'), (1, 'Chongqing'), (1, 'Chungchongbuk'), (2, 'Coahuila de Zaragoza'), (1, 'Coast'), (1, 'Cochabamba'), (2, 'Colorado'), (1, 'Conakry'), (1, 'Constantine'), (1, 'Cortés'), (1, 'Córdoba'), (1, 'Damascus'), (1, 'Dar es Salaam'), (1, 'Delhi'), (1, 'Dhaka'), (1, 'District of Columbia'), (1, 'Distrito Central'), (4, 'Distrito Federal'), (1, 'Distrito Nacional'), (1, 'Diyarbakir'), (1, 'Djibouti'), (2, 'Dnipropetrovsk'), (1, 'Doha'), (1, 'Dolnoslaskie'), (3, 'Donetsk'), (1, 'Dubai'), (1, 'Durango'), (1, 'East Azerbaidzan'), (2, 'East Java'), (1, 'East Kasai'), (1, 'Eastern Cape'), (1, 'Ehime'), (1, 'Emilia-Romagna'), (7, 'England'), (1, 'Esfahan'), (1, 'Eskisehir'), (1, 'Estuaire'), (1, 'Fars'), (1, 'Federaatio'), (2, 'Florida'), (2, 'Fujian'), (2, 'Fukuoka'), (1, 'Fukushima'), (1, 'Fès-Boulemane'), (1, 'Gansu'), (7, 'Gauteng'), (1, 'Gaza'), (1, 'Gaziantep'), (1, 'Georgia'), (1, 'Gifu'), (1, 'Gilan'), (1, 'Giza'), (1, 'Goiás'), (1, 'Gomel'), (1, 'Grad Sofija'), (1, 'Grad Zagreb'), (1, 'Greater Accra'), (3, 'Guanajuato'), (4, 'Guangdong'), (3, 'Guangxi'), (1, 'Guatemala'), (1, 'Guayas'), (1, 'Guerrero'), (2, 'Guizhou'), (5, 'Gujarat'), (1, 'Habarovsk'), (1, 'Hainan'), (1, 'Haiphong'), (1, 'Hamadan'), (1, 'Hamburg'), (1, 'Hamgyong N'), (1, 'Hamgyong P'), (1, 'Hanoi'), (1, 'Harare'), (1, 'Harjumaa'), (1, 'Harkova'), (1, 'Haryana'), (1, 'Haute-Zaïre'), (1, 'Hawaii'), (6, 'Hebei'), (9, 'Heilongjiang'), (7, 'Henan'), (1, 'Herson'), (1, 'Hessen'), (1, 'Hims'), (2, 'Hiroshima'), (1, 'Hlavní mesto Praha'), (1, 'Ho Chi Minh City'), (2, 'Hokkaido'), (1, 'Hongkong'), (1, 'Horad Minsk'), (1, 'Hsinchu'), (4, 'Hubei'), (4, 'Hunan'), (4, 'Hyogo'), (1, 'Illinois'), (1, 'Inchon'), (1, 'Indiana'), (3, 'Inner Mongolia'), (1, 'Irbil'), (1, 'Irkutsk'), (1, 'Ishikawa'), (1, 'Islamabad'), (1, 'Istanbul'), (1, 'Ivanovo'), (1, 'Izmir'), (1, 'Içel'), (1, 'Jakarta Raya'), (3, 'Jalisco'), (1, 'Jambi'), (1, 'Jammu and Kashmir'), (1, 'Jaroslavl'), (1, 'Jerusalem'), (2, 'Jharkhand'), (7, 'Jiangsu'), (2, 'Jiangxi'), (4, 'Jilin'), (1, 'Jizní Morava'), (1, 'Kabol'), (1, 'Kadiogo'), (1, 'Kaduna'), (1, 'Kagoshima'), (1, 'Kairo'), (1, 'Kalimantan Barat'), (1, 'Kalimantan Selatan'), (1, 'Kalimantan Timur'), (1, 'Kaliningrad'), (5, 'Kanagawa'), (1, 'Kano & Jigawa'), (1, 'Kaohsiung'), (3, 'Karnataka'), (1, 'Karotegin'), (1, 'Katalonia'), (1, 'Kaunas'), (1, 'Kayseri'), (1, 'Keelung'), (2, 'Kemerovo'), (3, 'Kerala'), (1, 'Kerman'), (1, 'Kermanshah'), (3, 'Khartum'), (1, 'Khorasan'), (1, 'Khulna'), (1, 'Khuzestan'), (1, 'Kinshasa'), (1, 'Kiova'), (1, 'Kirov'), (1, 'Konya'), (1, 'Kouilou'), (1, 'Kowloon and New Kowl'), (2, 'Krasnodar'), (1, 'Krasnojarsk'), (1, 'Kujawsko-Pomorskie'), (1, 'Kumamoto'), (1, 'Kurgan'), (1, 'Kursk'), (4, 'KwaZulu-Natal'), (1, 'Kwangju'), (1, 'Kwara & Kogi'), (7, 'Kyonggi'), (1, 'Kyongsangbuk'), (3, 'Kyongsangnam'), (1, 'Kyoto'), (1, 'København'), (1, 'La Habana'), (1, 'La Libertad'), (2, 'La Paz'), (1, 'Lagos'), (1, 'Lambayeque'), (1, 'Lampung'), (1, 'Lara'), (1, 'Latium'), (1, 'Leinster'), (12, 'Liaoning'), (1, 'Liguria'), (1, 'Lilongwe'), (1, 'Lima'), (1, 'Lipetsk'), (2, 'Lisboa'), (1, 'Littoral'), (1, 'Lodzkie'), (1, 'Lombardia'), (1, 'Loreto'), (1, 'Louisiana'), (1, 'Luanda'), (1, 'Lubelskie'), (1, 'Lugansk'), (1, 'Lusaka'), (1, 'Luxor'), (1, 'Lviv'), (1, 'Macau'), (5, 'Madhya Pradesh'), (1, 'Madrid'), (1, 'Maekel'), (1, 'Magdalena'), (13, 'Maharashtra'), (1, 'Malopolskie'), (1, 'Managua'), (1, 'Mandalay'), (1, 'Manitoba'), (2, 'Maputo'), (1, 'Maranhão'), (1, 'Maritime'), (1, 'Markazi'), (1, 'Marrakech-Tensift-Al'), (1, 'Maryland'), (1, 'Massachusetts'), (1, 'Mato Grosso'), (1, 'Mato Grosso do Sul'), (1, 'Mazowieckie'), (1, 'Medina'), (3, 'Mekka'), (1, 'Meknès-Tafilalet'), (1, 'Michigan'), (1, 'Michoacán de Ocampo'), (1, 'Midi-Pyrénées'), (4, 'Minas Gerais'), (1, 'Minnesota'), (1, 'Miranda'), (1, 'Missouri'), (1, 'Miyagi'), (1, 'Mogiljov'), (1, 'Montevideo'), (1, 'Montserrado'), (1, 'Moscow (City)'), (1, 'Murcia'), (1, 'Murmansk'), (1, 'Mykolajiv'), (9, 'México'), (1, 'Nagano'), (1, 'Nagasaki'), (1, 'Nairobi'), (1, 'Namangan'), (1, 'Nampo-si'), (1, 'Nara'), (12, 'National Capital Reg'), (1, 'Nebraska'), (1, 'Nevada'), (1, 'New Mexico'), (1, 'New South Wales'), (1, 'New York'), (1, 'Newmaa'), (1, 'Niamey'), (1, 'Niedersachsen'), (1, 'Niigata'), (1, 'Ninawa'), (1, 'Ningxia'), (1, 'Nizni Novgorod'), (1, 'Noord-Holland'), (7, 'Nordrhein-Westfalen'), (1, 'Norte de Santander'), (1, 'North Carolina'), (1, 'Northern Mindanao'), (1, 'Nothwest Border Prov'), (1, 'Nouakchott'), (1, 'Novosibirsk'), (3, 'Nuevo León'), (1, 'Odesa'), (1, 'Ogun'), (2, 'Ohio'), (1, 'Oita'), (2, 'Okayama'), (2, 'Oklahoma'), (1, 'Omsk'), (1, 'Ondo & Ekiti'), (4, 'Ontario'), (1, 'Oran'), (1, 'Oregon'), (1, 'Orenburg'), (1, 'Oriental'), (2, 'Orissa'), (6, 'Osaka'), (1, 'Oslo'), (1, 'Ouest'), (5, 'Oyo & Osun'), (1, 'Panamá'), (2, 'Paraná'), (2, 'Paraíba'), (2, 'Pará'), (1, 'Peking'), (1, 'Pennsylvania'), (1, 'Penza'), (1, 'Perak'), (1, 'Perm'), (3, 'Pernambuco'), (1, 'Phnom Penh'), (1, 'Piauí'), (1, 'Pichincha'), (1, 'Piemonte'), (1, 'Pietari'), (1, 'Pomorskie'), (1, 'Port Said'), (1, 'Primorje'), (1, 'Provence-Alpes-Côte'), (1, 'Puebla'), (11, 'Punjab'), (1, 'Pusan'), (1, 'Pyongyang-si'), (1, 'Qaraghandy'), (1, 'Qinghai'), (1, 'Qom'), (1, 'Quang Nam-Da Nang'), (1, 'Queensland'), (1, 'Querétaro de Arteaga'), (1, 'Quintana Roo'), (1, 'Québec'), (2, 'Rabat-Salé-Zammour-Z'), (5, 'Rajasthan'), (1, 'Rangoon [Yangon]'), (1, 'Rhône-Alpes'), (1, 'Riau'), (1, 'Riika'), (1, 'Rio Grande do Norte'), (1, 'Rio Grande do Sul'), (8, 'Rio de Janeiro'), (1, 'Risaralda'), (1, 'Rivers & Bayelsa'), (1, 'Riyadh'), (1, 'Rjazan'), (1, 'Rostov-na-Donu'), (3, 'Saitama'), (2, 'Saksi'), (1, 'Salta'), (2, 'Samara'), (1, 'Samarkand'), (1, 'San Juan'), (1, 'San Luis Potosí'), (1, 'San Salvador'), (1, 'Sanaa'), (1, 'Sanliurfa'), (1, 'Santa Catarina'), (1, 'Santa Cruz'), (2, 'Santa Fé'), (1, 'Santafé de Bogotá'), (1, 'Santander'), (3, 'Santiago'), (1, 'Santiago de Cuba'), (1, 'Saratov'), (2, 'Scotland'), (1, 'Seoul'), (1, 'Sergipe'), (2, 'Shaanxi'), (2, 'Shaba'), (7, 'Shandong'), (1, 'Shanghai'), (3, 'Shanxi'), (2, 'Shizuoka'), (3, 'Sichuan'), (3, 'Sinaloa'), (2, 'Sindh'), (1, 'Sisilia'), (1, 'Sistan va Baluchesta'), (1, 'Skopje'), (1, 'Smolensk'), (1, 'Sofala'), (2, 'Sonora'), (1, 'South Australia'), (1, 'South Kazakstan'), (2, 'Southern Mindanao'), (2, 'Southern Tagalog'), (1, 'Suez'), (1, 'Sulawesi Selatan'), (1, 'Sumatera Barat'), (1, 'Sumatera Selatan'), (1, 'Sumatera Utara'), (2, 'Sverdlovsk'), (13, 'São Paulo'), (1, 'Tabasco'), (1, 'Taegu'), (1, 'Taejon'), (1, 'Taichung'), (1, 'Tainan'), (5, 'Taipei'), (2, 'Tamaulipas'), (5, 'Tamil Nadu'), (1, 'Tanger-Tétouan'), (2, 'Tatarstan'), (1, 'Tbilisi'), (2, 'Teheran'), (2, 'Tennessee'), (6, 'Texas'), (1, 'Tianjin'), (1, 'Tjumen'), (1, 'Tochigi'), (3, 'Tokyo-to'), (1, 'Tolima'), (1, 'Tomsk'), (1, 'Toscana'), (1, 'Toskent Shahri'), (1, 'Tripoli'), (1, 'Tucumán'), (1, 'Tula'), (1, 'Tunis'), (1, 'Tver'), (2, 'Tšeljabinsk'), (1, 'Tšuvassia'), (1, 'Udmurtia'), (1, 'Ulaanbaatar'), (1, 'Uljanovsk'), (12, 'Uttar Pradesh'), (1, 'Valencia'), (1, 'Valle'), (2, 'Veracruz'), (1, 'Viangchan'), (1, 'Victoria'), (1, 'Vilna'), (1, 'Vinnytsja'), (1, 'Virginia'), (1, 'Volgograd'), (1, 'Voronez'), (1, 'Wakayama'), (1, 'Washington'), (1, 'West Australia'), (1, 'West Azerbaidzan'), (3, 'West Bengali'), (1, 'West Götanmaan län'), (4, 'West Java'), (1, 'West Kasai'), (2, 'Western'), (1, 'Western Cape'), (1, 'Western Mindanao'), (2, 'Western Visayas'), (1, 'Wielkopolskie'), (1, 'Wien'), (1, 'Wilayah Persekutuan'), (1, 'Wisconsin'), (1, 'Xinxiang'), (1, 'Yerevan'), (1, 'Yogyakarta'), (1, 'Yucatán'), (1, 'Yunnan'), (1, 'Zachodnio-Pomorskie'), (1, 'Zaporizzja'), (3, 'Zhejiang'), (2, 'Zuid-Holland'), (1, 'Zulia'), (1, 'al-Daqahliya'), (2, 'al-Gharbiya'), (1, 'al-Qalyubiya'), (1, 'al-Sharqiya'), (1, 'al-Sulaymaniya'), (1, 'al-Tamim'), (1, 'al-Zarqa'), (1, 'Île-de-France'), (1, '–')]","SELECT count(*),  district FROM city WHERE population  >  (SELECT avg(population) FROM city) GROUP BY district"
world_1,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",Find the government form name and total population for each government form whose average life expectancy is longer than 72.,"city, sqlite sequence, country, countrylanguage","[(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]","SELECT T1.government_form,  sum(T2.population) FROM country AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.government_form HAVING avg(T1.life_expectancy)  >  72"
world_1,"SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72",What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?,"city, sqlite sequence, country, countrylanguage","[(3947000, 'Commonwealth of the US'), (1972000, 'Constitutional Monarchy (Emirate)'), (82516000, 'Constitutional Monarchy, Federation'), (193050, 'Dependent Territory of the UK'), (2441000, 'Emirate Federation'), (7160400, 'Federation'), (617000, 'Monarchy (Emirate)'), (2870000, 'Monarchy (Sultanate)'), (464000, 'Nonmetropolitan Territory of France'), (320000, 'Nonmetropolitan Territory of The Netherlands'), (1731000, 'Overseas Department of France'), (78000, 'Parliamentary Coprincipality'), (99000, 'Part of Denmark'), (115072000, 'Socialistic Republic'), (5605000, 'Socialistic State'), (7255000, 'Special Administrative Region of China'), (329000, 'US Territory')]","SELECT T1.government_form,  sum(T2.population) FROM country AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id WHERE avg(T1.life_expectancy)  >  72 GROUP BY T1.government_form"
world_1,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72",Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?,"city, sqlite sequence, country, countrylanguage","[(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]","SELECT avg(life_expectancy),  conteanent,  sum(city_population) FROM countrylanguage AS T1 JOIN city AS T2 ON T1.country_id  =  T2.country_id JOIN country AS T3 ON T1.country_id  =  T3.country_id WHERE life_expectancy  <  72 GROUP BY conteanent<|eot_id|>"
world_1,"SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72","What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?","city, sqlite sequence, country, countrylanguage","[(784475000, 52.571929824561394, 'Africa'), (3705025700, 67.44117647058825, 'Asia'), (30401150, 69.715, 'Oceania'), (345780000, 70.94615384615386, 'South America')]","SELECT continent,  sum(city_population),  avg(life_expectancy) FROM countrylanguage AS T1 JOIN city AS T2 ON T1.country_id  =  T2.country_id GROUP BY continent HAVING avg(life_expectancy)  <  72"
world_1,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",What are the names and areas of countries with the top 5 largest area?,"city, sqlite sequence, country, countrylanguage","[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]","SELECT country_name,  country_area FROM country ORDER BY country_area DESC LIMIT 5"
world_1,"SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5",Return the names and surface areas of the 5 largest countries.,"city, sqlite sequence, country, countrylanguage","[('Russian Federation', 17075400.0), ('Antarctica', 13120000.0), ('Canada', 9970610.0), ('China', 9572900.0), ('United States', 9363520.0)]","SELECT country_name,  surface_area FROM country ORDER BY surface_area DESC LIMIT 5"
world_1,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,What are names of countries with the top 3 largest population?,"city, sqlite sequence, country, countrylanguage","[('China',), ('India',), ('United States',)]","SELECT T1.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language_iso  =  ""eng"" GROUP BY T1.country_id ORDER BY count(*) DESC LIMIT 3"
world_1,SELECT Name FROM country ORDER BY Population DESC LIMIT 3,Return the names of the 3 most populated countries.,"city, sqlite sequence, country, countrylanguage","[('China',), ('India',), ('United States',)]",SELECT T2.country_name FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_name ORDER BY count(*) DESC LIMIT 3
world_1,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,What are the names of the nations with the 3 lowest populations?,"city, sqlite sequence, country, countrylanguage","[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]",SELECT name FROM country ORDER BY population ASC LIMIT 3
world_1,SELECT Name FROM country ORDER BY Population ASC LIMIT 3,Return the names of the 3 countries with the fewest people.,"city, sqlite sequence, country, countrylanguage","[('Antarctica',), ('French Southern territories',), ('Bouvet Island',)]",SELECT T2.country_name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY count(*) ASC LIMIT 3
world_1,"SELECT count(*) FROM country WHERE continent  =  ""Asia""",how many countries are in Asia?,"city, sqlite sequence, country, countrylanguage","[(51,)]",SELECT count(*) FROM country WHERE continent  =  'Asia'
world_1,"SELECT count(*) FROM country WHERE continent  =  ""Asia""",Count the number of countries in Asia.,"city, sqlite sequence, country, countrylanguage","[(51,)]",SELECT count(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id WHERE T2.language  =  'Chinese' AND T1.continent  =  'Asia'
world_1,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000",What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?,"city, sqlite sequence, country, countrylanguage","[(None, None)]","SELECT sum(T1.population),  avg(T1.area) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.continent  =  'North America' AND T2.area  >  3000<|eot_id|>"
world_1,"select sum(population) ,  avg(surfacearea) from country where continent  =  ""north america"" and surfacearea  >  3000",Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .,"city, sqlite sequence, country, countrylanguage","[(None, None)]","SELECT sum(surface_area),  avg(surface_area) FROM country WHERE continent  =  'North America' AND surface_area  >  3000"
world_1,SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000,What are the cities whose population is between 160000 and 900000?,"city, sqlite sequence, country, countrylanguage","[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]",SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
world_1,select name from city where population between 160000 and 900000,Return the names of cities that have a population between 160000 and 900000 .,"city, sqlite sequence, country, countrylanguage","[('Qandahar',), ('Herat',), ('Amsterdam',), ('Rotterdam',), ('Haag',), ('Utrecht',), ('Eindhoven',), ('Tilburg',), ('Groningen',), ('Breda',), ('Tirana',), ('Oran',), ('Constantine',), ('Annaba',), ('Batna',), ('Sétif',), ('Huambo',), ('Dubai',), ('Abu Dhabi',), ('Sharja',), ('al-Ayn',), ('Lomas de Zamora',), ('Quilmes',), ('Almirante Brown',), ('La Plata',), ('Mar del Plata',), ('San Miguel de Tucumán',), ('Lanús',), ('Merlo',), ('General San Martín',), ('Salta',), ('Moreno',), ('Santa Fé',), ('Avellaneda',), ('Tres de Febrero',), ('Morón',), ('Florencio Varela',), ('San Isidro',), ('Tigre',), ('Malvinas Argentinas',), ('Vicente López',), ('Berazategui',), ('Corrientes',), ('San Miguel',), ('Bahía Blanca',), ('Esteban Echeverría',), ('Resistencia',), ('José C. Paz',), ('Paraná',), ('Godoy Cruz',), ('Posadas',), ('Guaymallén',), ('Santiago del Estero',), ('San Salvador de Jujuy',), ('Hurlingham',), ('Neuquén',), ('Gjumri',), ('Vanadzor',), ('Canberra',), ('Gold Coast',), ('Newcastle',), ('Central Coast',), ('Wollongong',), ('Gäncä',), ('Sumqayit',), ('Nassau',), ('Khulna',), ('Rajshahi',), ('Narayanganj',), ('Rangpur',), ('Mymensingh',), ('Barisal',), ('Tungi',), ('Antwerpen',), ('Gent',), ('Charleroi',), ('Liège',), ('Cotonou',), ('Porto-Novo',), ('La Paz',), ('El Alto',), ('Cochabamba',), ('Oruro',), ('Sucre',), ('Sarajevo',), ('Gaborone',), ('São Gonçalo',), ('Nova Iguaçu',), ('São Luís',), ('Maceió',), ('Duque de Caxias',), ('São Bernardo do Campo',), ('Teresina',), ('Natal',), ('Osasco',), ('Campo Grande',), ('Santo André',), ('João Pessoa',), ('Jaboatão dos Guararapes',), ('Contagem',), ('São José dos Campos',), ('Uberlândia',), ('Feira de Santana',), ('Ribeirão Preto',), ('Sorocaba',), ('Niterói',), ('Cuiabá',), ('Juiz de Fora',), ('Aracaju',), ('São João de Meriti',), ('Londrina',), ('Joinville',), ('Belford Roxo',), ('Santos',), ('Ananindeua',), ('Campos dos Goytacazes',), ('Mauá',), ('Carapicuíba',), ('Olinda',), ('Campina Grande',), ('São José do Rio Preto',), ('Caxias do Sul',), ('Moji das Cruzes',), ('Diadema',), ('Aparecida de Goiânia',), ('Piracicaba',), ('Cariacica',), ('Vila Velha',), ('Pelotas',), ('Bauru',), ('Porto Velho',), ('Serra',), ('Betim',), ('Jundíaí',), ('Canoas',), ('Franca',), ('São Vicente',), ('Maringá',), ('Montes Claros',), ('Anápolis',), ('Florianópolis',), ('Petrópolis',), ('Itaquaquecetuba',), ('Vitória',), ('Ponta Grossa',), ('Rio Branco',), ('Foz do Iguaçu',), ('Macapá',), ('Ilhéus',), ('Vitória da Conquista',), ('Uberaba',), ('Paulista',), ('Limeira',), ('Blumenau',), ('Caruaru',), ('Santarém',), ('Volta Redonda',), ('Novo Hamburgo',), ('Caucaia',), ('Santa Maria',), ('Cascavel',), ('Guarujá',), ('Ribeirão das Neves',), ('Governador Valadares',), ('Taubaté',), ('Imperatriz',), ('Gravataí',), ('Embu',), ('Mossoró',), ('Várzea Grande',), ('Petrolina',), ('Barueri',), ('Viamão',), ('Ipatinga',), ('Juazeiro',), ('Juazeiro do Norte',), ('Taboão da Serra',), ('São José dos Pinhais',), ('Magé',), ('Suzano',), ('São Leopoldo',), ('Marília',), ('São Carlos',), ('Sumaré',), ('Presidente Prudente',), ('Divinópolis',), ('Sete Lagoas',), ('Rio Grande',), ('Itabuna',), ('Jequié',), ('Arapiraca',), ('Colombo',), ('Americana',), ('Alvorada',), ('Araraquara',), ('Itaboraí',), ('Santa Bárbara d´Oeste',), ('Nova Friburgo',), ('Jacareí',), ('Araçatuba',), ('Barra Mansa',), ('Praia Grande',), ('Marabá',), ('Criciúma',), ('Boa Vista',), ('Passo Fundo',), ('Dourados',), ('Santa Luzia',), ('Rio Claro',), ('Maracanaú',), ('Guarapuava',), ('Glasgow',), ('Liverpool',), ('Edinburgh',), ('Sheffield',), ('Manchester',), ('Leeds',), ('Bristol',), ('Cardiff',), ('Coventry',), ('Leicester',), ('Bradford',), ('Belfast',), ('Nottingham',), ('Kingston upon Hull',), ('Plymouth',), ('Stoke-on-Trent',), ('Wolverhampton',), ('Derby',), ('Swansea',), ('Southampton',), ('Aberdeen',), ('Northampton',), ('Dudley',), ('Portsmouth',), ('Newcastle upon Tyne',), ('Sunderland',), ('Luton',), ('Swindon',), ('Southend-on-Sea',), ('Walsall',), ('Bournemouth',), ('Plovdiv',), ('Varna',), ('Burgas',), ('Ruse',), ('Ouagadougou',), ('Bobo-Dioulasso',), ('Bujumbura',), ('Puente Alto',), ('Viña del Mar',), ('Valparaíso',), ('Talcahuano',), ('Antofagasta',), ('San Bernardo',), ('Temuco',), ('Concepción',), ('Rancagua',), ('Arica',), ('Talca',), ('Chillán',), ('Iquique',), ('San José',), ('Djibouti',), ('Santiago de los Caballeros',), ('Cuenca',), ('Machala',), ('Santo Domingo de los Colorados',), ('Portoviejo',), ('Ambato',), ('Manta',), ('Shubra al-Khayma',), ('Port Said',), ('Suez',), ('al-Mahallat al-Kubra',), ('Tanta',), ('al-Mansura',), ('Luxor',), ('Asyut',), ('Bahtim',), ('Zagazig',), ('al-Faiyum',), ('Ismailia',), ('Kafr al-Dawwar',), ('Assuan',), ('Damanhur',), ('al-Minya',), ('Bani Suwayf',), ('Qina',), ('Sawhaj',), ('San Salvador',), ('Asmara',), ('Valencia',), ('Sevilla',), ('Zaragoza',), ('Málaga',), ('Bilbao',), ('Las Palmas de Gran Canaria',), ('Murcia',), ('Palma de Mallorca',), ('Valladolid',), ('Córdoba',), ('Vigo',), ('Alicante [Alacant]',), ('Gijón',), ('L´Hospitalet de Llobregat',), ('Granada',), ('A Coruña (La Coruña)',), ('Vitoria-Gasteiz',), ('Santa Cruz de Tenerife',), ('Badalona',), ('Oviedo',), ('Móstoles',), ('Elche [Elx]',), ('Sabadell',), ('Santander',), ('Jerez de la Frontera',), ('Pamplona [Iruña]',), ('Donostia-San Sebastián',), ('Cartagena',), ('Leganés',), ('Fuenlabrada',), ('Almería',), ('Terrassa',), ('Alcalá de Henares',), ('Burgos',), ('Johannesburg',), ('Port Elizabeth',), ('Pretoria',), ('Inanda',), ('Durban',), ('Vanderbijlpark',), ('Kempton Park',), ('Alberton',), ('Pinetown',), ('Pietermaritzburg',), ('Benoni',), ('Randburg',), ('Umlazi',), ('Bloemfontein',), ('Vereeniging',), ('Wonderboom',), ('Roodepoort',), ('Boksburg',), ('Klerksdorp',), ('Soshanguve',), ('Newcastle',), ('East London',), ('Welkom',), ('Kimberley',), ('Uitenhage',), ('Chatsworth',), ('Mdantsane',), ('Krugersdorp',), ('Botshabelo',), ('Brakpan',), ('Witbank',), ('Oberholzer',), ('Germiston',), ('Springs',), ('Dire Dawa',), ('Cebu',), ('Zamboanga',), ('Pasig',), ('Valenzuela',), ('Las Piñas',), ('Antipolo',), ('Taguig',), ('Cagayan de Oro',), ('Parañaque',), ('Makati',), ('Bacolod',), ('General Santos',), ('Marikina',), ('Dasmariñas',), ('Muntinlupa',), ('Iloilo',), ('Pasay',), ('Malabon',), ('San José del Monte',), ('Bacoor',), ('Iligan',), ('Calamba',), ('Mandaluyong',), ('Butuan',), ('Angeles',), ('Tarlac',), ('Mandaue',), ('Baguio',), ('Batangas',), ('Cainta',), ('San Pedro',), ('Navotas',), ('Cabanatuan',), ('San Fernando',), ('Lipa',), ('Lapu-Lapu',), ('San Pablo',), ('Biñan',), ('Taytay',), ('Lucena',), ('Imus',), ('Olongapo',), ('Binangonan',), ('Santa Rosa',), ('Tagum',), ('Tacloban',), ('Malolos',), ('Mabalacat',), ('Cotabato',), ('Meycauayan',), ('Puerto Princesa',), ('Libreville',), ('Kutaisi',), ('Kumasi',), ('Ciudad de Guatemala',), ('Mixco',), ('Bissau',), ('Georgetown',), ('Port-au-Prince',), ('Carrefour',), ('Delmas',), ('Tegucigalpa',), ('San Pedro Sula',), ('Malang',), ('Bandar Lampung',), ('Bekasi',), ('Padang',), ('Surakarta',), ('Banjarmasin',), ('Pekan Baru',), ('Denpasar',), ('Yogyakarta',), ('Pontianak',), ('Samarinda',), ('Jambi',), ('Depok',), ('Cimahi',), ('Balikpapan',), ('Manado',), ('Mataram',), ('Pekalongan',), ('Tegal',), ('Bogor',), ('Ciputat',), ('Pondokgede',), ('Cirebon',), ('Kediri',), ('Ambon',), ('Jember',), ('Cilacap',), ('Cimanggis',), ('Pematang Siantar',), ('Purwokerto',), ('Ciomas',), ('Tasikmalaya',), ('Madiun',), ('Srinagar',), ('Agra',), ('Coimbatore',), ('Thane (Thana)',), ('Allahabad',), ('Meerut',), ('Vishakhapatnam',), ('Jabalpur',), ('Amritsar',), ('Faridabad',), ('Vijayawada',), ('Gwalior',), ('Jodhpur',), ('Nashik (Nasik)',), ('Hubli-Dharwad',), ('Solapur (Sholapur)',), ('Ranchi',), ('Bareilly',), ('Guwahati (Gauhati)',), ('Shambajinagar (Aurangabad)',), ('Cochin (Kochi)',), ('Rajkot',), ('Kota',), ('Thiruvananthapuram (Trivandrum',), ('Pimpri-Chinchwad',), ('Jalandhar (Jullundur)',), ('Gorakhpur',), ('Chandigarh',), ('Mysore',), ('Aligarh',), ('Guntur',), ('Jamshedpur',), ('Ghaziabad',), ('Warangal',), ('Raipur',), ('Moradabad',), ('Durgapur',), ('Amravati',), ('Calicut (Kozhikode)',), ('Bikaner',), ('Bhubaneswar',), ('Kolhapur',), ('Kataka (Cuttack)',), ('Ajmer',), ('Bhavnagar',), ('Tiruchirapalli',), ('Bhilai',), ('Bhiwandi',), ('Saharanpur',), ('Ulhasnagar',), ('Salem',), ('Ujjain',), ('Malegaon',), ('Jamnagar',), ('Bokaro Steel City',), ('Akola',), ('Belgaum',), ('Rajahmundry',), ('Nellore',), ('Udaipur',), ('New Bombay',), ('Bhatpara',), ('Gulbarga',), ('New Delhi',), ('Jhansi',), ('Gaya',), ('Kakinada',), ('Dhule (Dhulia)',), ('Panihati',), ('Nanded (Nander)',), ('Mangalore',), ('Dehra Dun',), ('Kamarhati',), ('Davangere',), ('Asansol',), ('Bhagalpur',), ('Bellary',), ('Barddhaman (Burdwan)',), ('Rampur',), ('Jalgaon',), ('Muzaffarpur',), ('Nizamabad',), ('Muzaffarnagar',), ('Patiala',), ('Shahjahanpur',), ('Kurnool',), ('Tiruppur (Tirupper)',), ('Rohtak',), ('South Dum Dum',), ('Mathura',), ('Chandrapur',), ('Barahanagar (Baranagar)',), ('Darbhanga',), ('Siliguri (Shiliguri)',), ('Raurkela',), ('Ambattur',), ('Panipat',), ('Firozabad',), ('Ichalkaranji',), ('Jammu',), ('Ramagundam',), ('Eluru',), ('Brahmapur',), ('Alwar',), ('Pondicherry',), ('Thanjavur',), ('Bihar Sharif',), ('Tuticorin',), ('Imphal',), ('Latur',), ('Sagar',), ('Farrukhabad-cum-Fatehgarh',), ('Sangli',), ('Parbhani',), ('Nagar Coil',), ('Bijapur',), ('Kukatpalle',), ('Bally',), ('Bhilwara',), ('Ratlam',), ('Avadi',), ('Dindigul',), ('Ahmadnagar',), ('Bilaspur',), ('Shimoga',), ('Kharagpur',), ('Mira Bhayandar',), ('Vellore',), ('Jalna',), ('Burnpur',), ('Anantapur',), ('Allappuzha (Alleppey)',), ('Tirupati',), ('Karnal',), ('Burhanpur',), ('Hisar (Hissar)',), ('Tiruvottiyur',), ('Mirzapur-cum-Vindhyachal',), ('Secunderabad',), ('Nadiad',), ('Dewas',), ('Murwara (Katni)',), ('Ganganagar',), ('Vizianagaram',), ('Mosul',), ('Irbil',), ('Kirkuk',), ('Basra',), ('al-Sulaymaniya',), ('al-Najaf',), ('Karbala',), ('al-Hilla',), ('al-Nasiriya',), ('al-Amara',), ('al-Diwaniya',), ('al-Ramadi',), ('al-Kut',), ('Ahvaz',), ('Qom',), ('Kermanshah',), ('Urmia',), ('Zahedan',), ('Rasht',), ('Hamadan',), ('Kerman',), ('Arak',), ('Ardebil',), ('Yazd',), ('Qazvin',), ('Zanjan',), ('Sanandaj',), ('Bandar-e-Abbas',), ('Khorramabad',), ('Eslamshahr',), ('Borujerd',), ('Abadan',), ('Dezful',), ('Kashan',), ('Sari',), ('Gorgan',), ('Najafabad',), ('Sabzevar',), ('Khomeynishahr',), ('Dublin',), ('Jerusalem',), ('Tel Aviv-Jaffa',), ('Haifa',), ('Rishon Le Ziyyon',), ('Beerseba',), ('Holon',), ('Palermo',), ('Genova',), ('Bologna',), ('Firenze',), ('Catania',), ('Bari',), ('Venezia',), ('Messina',), ('Verona',), ('Trieste',), ('Padova',), ('Taranto',), ('Brescia',), ('Reggio di Calabria',), ('Modena',), ('Prato',), ('Parma',), ('Cagliari',), ('Livorno',), ('Graz',), ('Linz',), ('Chiba',), ('Sakai',), ('Kumamoto',), ('Okayama',), ('Sagamihara',), ('Hamamatsu',), ('Kagoshima',), ('Funabashi',), ('Higashiosaka',), ('Hachioji',), ('Niigata',), ('Amagasaki',), ('Himeji',), ('Shizuoka',), ('Urawa',), ('Matsuyama',), ('Matsudo',), ('Kanazawa',), ('Kawaguchi',), ('Ichikawa',), ('Omiya',), ('Utsunomiya',), ('Oita',), ('Nagasaki',), ('Yokosuka',), ('Kurashiki',), ('Gifu',), ('Hirakata',), ('Nishinomiya',), ('Toyonaka',), ('Wakayama',), ('Fukuyama',), ('Fujisawa',), ('Asahikawa',), ('Machida',), ('Nara',), ('Takatsuki',), ('Iwaki',), ('Nagano',), ('Toyohashi',), ('Toyota',), ('Suita',), ('Takamatsu',), ('Koriyama',), ('Okazaki',), ('Kawagoe',), ('Tokorozawa',), ('Toyama',), ('Kochi',), ('Kashiwa',), ('Akita',), ('Miyazaki',), ('Koshigaya',), ('Naha',), ('Aomori',), ('Hakodate',), ('Akashi',), ('Yokkaichi',), ('Fukushima',), ('Morioka',), ('Maebashi',), ('Kasugai',), ('Otsu',), ('Ichihara',), ('Yao',), ('Ichinomiya',), ('Tokushima',), ('Kakogawa',), ('Ibaraki',), ('Neyagawa',), ('Shimonoseki',), ('Yamagata',), ('Fukui',), ('Hiratsuka',), ('Mito',), ('Sasebo',), ('Hachinohe',), ('Takasaki',), ('Shimizu',), ('Kurume',), ('Fuji',), ('Soka',), ('Fuchu',), ('Chigasaki',), ('Atsugi',), ('Numazu',), ('Ageo',), ('Yamato',), ('Matsumoto',), ('Kure',), ('Takarazuka',), ('Kasukabe',), ('Chofu',), ('Odawara',), ('Kofu',), ('Kushiro',), ('Kishiwada',), ('Hitachi',), ('Nagaoka',), ('Itami',), ('Uji',), ('Suzuka',), ('Hirosaki',), ('Ube',), ('Kodaira',), ('Takaoka',), ('Obihiro',), ('Tomakomai',), ('Saga',), ('Sakura',), ('Kamakura',), ('Mitaka',), ('Izumi',), ('Hino',), ('Hadano',), ('Ashikaga',), ('Tsu',), ('Sayama',), ('Yachiyo',), ('Tsukuba',), ('Sanaa',), ('Aden',), ('Taizz',), ('Hodeida',), ('al-Zarqa',), ('Irbid',), ('Novi Sad',), ('Niš',), ('Phnom Penh',), ('Garoua',), ('Calgary',), ('Toronto',), ('North York',), ('Winnipeg',), ('Edmonton',), ('Mississauga',), ('Scarborough',), ('Vancouver',), ('Etobicoke',), ('London',), ('Hamilton',), ('Ottawa',), ('Laval',), ('Surrey',), ('Brampton',), ('Windsor',), ('Saskatoon',), ('Kitchener',), ('Markham',), ('Regina',), ('Burnaby',), ('Québec',), ('Qaraghandy',), ('Shymkent',), ('Taraz',), ('Astana',), ('Öskemen',), ('Pavlodar',), ('Semey',), ('Aqtöbe',), ('Qostanay',), ('Petropavl',), ('Oral',), ('Temirtau',), ('Mombasa',), ('Kisumu',), ('Nakuru',), ('Bangui',), ('Handan',), ('Wuxi',), ('Xuzhou',), ('Datong',), ('Yichun',), ('Benxi',), ('Luoyang',), ('Suzhou',), ('Xining',), ('Huainan',), ('Jixi',), ('Daqing',), ('Fuxin',), ('Amoy [Xiamen]',), ('Liuzhou',), ('Shantou',), ('Jinzhou',), ('Mudanjiang',), ('Yinchuan',), ('Changzhou',), ('Zhangjiakou',), ('Dandong',), ('Hegang',), ('Kaifeng',), ('Jiamusi',), ('Liaoyang',), ('Hengyang',), ('Baoding',), ('Hunjiang',), ('Xinxiang',), ('Huangshi',), ('Haikou',), ('Yantai',), ('Bengbu',), ('Xiangtan',), ('Weifang',), ('Wuhu',), ('Pingxiang',), ('Yingkou',), ('Anyang',), ('Panzhihua',), ('Pingdingshan',), ('Xiangfan',), ('Zhuzhou',), ('Jiaozuo',), ('Wenzhou',), ('Zhangjiang',), ('Zigong',), ('Shuangyashan',), ('Zaozhuang',), ('Yakeshi',), ('Yichang',), ('Zhenjiang',), ('Huaibei',), ('Qinhuangdao',), ('Guilin',), ('Liupanshui',), ('Panjin',), ('Yangquan',), ('Jinxi',), ('Liaoyuan',), ('Lianyungang',), ('Xianyang',), ('Tai´an',), ('Chifeng',), ('Shaoguan',), ('Nantong',), ('Leshan',), ('Baoji',), ('Linyi',), ('Tonghua',), ('Siping',), ('Changzhi',), ('Tengzhou',), ('Chaozhou',), ('Yangzhou',), ('Dongwan',), ('Ma´anshan',), ('Foshan',), ('Yueyang',), ('Xingtai',), ('Changde',), ('Shihezi',), ('Yancheng',), ('Jiujiang',), ('Dongying',), ('Shashi',), ('Xintai',), ('Jingdezhen',), ('Tongchuan',), ('Zhongshan',), ('Shiyan',), ('Tieli',), ('Jining',), ('Wuhai',), ('Mianyang',), ('Luzhou',), ('Zunyi',), ('Shizuishan',), ('Neijiang',), ('Tongliao',), ('Tieling',), ('Wafangdian',), ('Anqing',), ('Shaoyang',), ('Laiwu',), ('Chengde',), ('Tianshui',), ('Nanyang',), ('Cangzhou',), ('Yibin',), ('Huaiyin',), ('Dunhua',), ('Yanji',), ('Jiangmen',), ('Tongling',), ('Suihua',), ('Gongziling',), ('Xiantao',), ('Chaoyang',), ('Ganzhou',), ('Huzhou',), ('Baicheng',), ('Shangzi',), ('Yangjiang',), ('Qitaihe',), ('Gejiu',), ('Jiangyin',), ('Hebi',), ('Jiaxing',), ('Wuzhou',), ('Meihekou',), ('Xuchang',), ('Liaocheng',), ('Haicheng',), ('Qianjiang',), ('Baiyin',), ('Bei´an',), ('Yixing',), ('Laizhou',), ('Qaramay',), ('Acheng',), ('Dezhou',), ('Nanping',), ('Zhaoqing',), ('Beipiao',), ('Fengcheng',), ('Fuyu',), ('Xinyang',), ('Dongtai',), ('Yuci',), ('Honghu',), ('Ezhou',), ('Heze',), ('Daxian',), ('Linfen',), ('Tianmen',), ('Yiyang',), ('Quanzhou',), ('Rizhao',), ('Deyang',), ('Guangyuan',), ('Changshu',), ('Zhangzhou',), ('Hailar',), ('Nanchong',), ('Jiutai',), ('Zhaodong',), ('Shaoxing',), ('Fuyang',), ('Maoming',), ('Qujing',), ('Ghulja',), ('Jiaohe',), ('Puyang',), ('Huadian',), ('Jiangyou',), ('Qashqar',), ('Anshun',), ('Fuling',), ('Xinyu',), ('Hanzhong',), ('Danyang',), ('Chenzhou',), ('Xiaogan',), ('Shangqiu',), ('Zhuhai',), ('Qingyuan',), ('Aqsu',), ('Jining',), ('Xiaoshan',), ('Zaoyang',), ('Xinghua',), ('Hami',), ('Huizhou',), ('Jinmen',), ('Sanming',), ('Bishkek',), ('Osh',), ('Cartagena',), ('Cúcuta',), ('Bucaramanga',), ('Ibagué',), ('Pereira',), ('Santa Marta',), ('Manizales',), ('Bello',), ('Pasto',), ('Neiva',), ('Soledad',), ('Armenia',), ('Villavicencio',), ('Soacha',), ('Valledupar',), ('Montería',), ('Itagüí',), ('Palmira',), ('Buenaventura',), ('Floridablanca',), ('Sincelejo',), ('Popayán',), ('Barrancabermeja',), ('Pointe-Noire',), ('Lubumbashi',), ('Mbuji-Mayi',), ('Kolwezi',), ('Kisangani',), ('Kananga',), ('Likasi',), ('Bukavu',), ('Kikwit',), ('Tshikapa',), ('Matadi',), ('Mbandaka',), ('Hamhung',), ('Chongjin',), ('Nampo',), ('Sinuiju',), ('Wonsan',), ('Phyongsong',), ('Sariwon',), ('Haeju',), ('Kanggye',), ('Kimchaek',), ('Hyesan',), ('Kaesong',), ('Songnam',), ('Puchon',), ('Suwon',), ('Anyang',), ('Chonju',), ('Chongju',), ('Koyang',), ('Ansan',), ('Pohang',), ('Chang-won',), ('Masan',), ('Kwangmyong',), ('Chonan',), ('Chinju',), ('Iksan',), ('Pyongtaek',), ('Kumi',), ('Uijongbu',), ('Kyongju',), ('Kunsan',), ('Cheju',), ('Kimhae',), ('Sunchon',), ('Mokpo',), ('Yong-in',), ('Wonju',), ('Kunpo',), ('Chunchon',), ('Namyangju',), ('Kangnung',), ('Chungju',), ('Andong',), ('Yosu',), ('Kyongsan',), ('Paju',), ('Yangsan',), ('Athenai',), ('Thessaloniki',), ('Pireus',), ('Zagreb',), ('Split',), ('Rijeka',), ('Santiago de Cuba',), ('Camagüey',), ('Holguín',), ('Santa Clara',), ('Guantánamo',), ('Nicosia',), ('Vientiane',), ('Riga',), ('Maseru',), ('Tripoli',), ('Monrovia',), ('Bengasi',), ('Vilnius',), ('Kaunas',), ('Klaipeda',), ('El-Aaiún',), ('Macao',), ('Antananarivo',), ('Skopje',), ('Blantyre',), ('Lilongwe',), ('Ipoh',), ('Johor Baharu',), ('Petaling Jaya',), ('Kelang',), ('Kuala Terengganu',), ('Pinang',), ('Kota Bharu',), ('Kuantan',), ('Taiping',), ('Seremban',), ('Bamako',), ('Rabat',), ('Marrakech',), ('Fès',), ('Tanger',), ('Salé',), ('Meknès',), ('Oujda',), ('Kénitra',), ('Tétouan',), ('Safi',), ('Nouakchott',), ('Naucalpan de Juárez',), ('Mexicali',), ('Culiacán',), ('Acapulco de Juárez',), ('Tlalnepantla de Baz',), ('Mérida',), ('Chihuahua',), ('San Luis Potosí',), ('Guadalupe',), ('Toluca',), ('Aguascalientes',), ('Querétaro',), ('Morelia',), ('Hermosillo',), ('Saltillo',), ('Torreón',), ('Centro (Villahermosa)',), ('San Nicolás de los Garza',), ('Durango',), ('Chimalhuacán',), ('Tlaquepaque',), ('Atizapán de Zaragoza',), ('Veracruz',), ('Cuautitlán Izcalli',), ('Irapuato',), ('Tuxtla Gutiérrez',), ('Tultitlán',), ('Reynosa',), ('Benito Juárez',), ('Matamoros',), ('Xalapa',), ('Celaya',), ('Mazatlán',), ('Ensenada',), ('Ahome',), ('Cajeme',), ('Cuernavaca',), ('Tonalá',), ('Valle de Chalco Solidaridad',), ('Nuevo Laredo',), ('Tepic',), ('Tampico',), ('Ixtapaluca',), ('Apodaca',), ('Guasave',), ('Gómez Palacio',), ('Tapachula',), ('Nicolás Romero',), ('Coatzacoalcos',), ('Uruapan',), ('Victoria',), ('Oaxaca de Juárez',), ('Coacalco de Berriozábal',), ('Pachuca de Soto',), ('General Escobedo',), ('Salamanca',), ('Santa Catarina',), ('Tehuacán',), ('Chalco',), ('Cárdenas',), ('Campeche',), ('La Paz',), ('Othón P. Blanco (Chetumal)',), ('Texcoco',), ('La Paz',), ('Metepec',), ('Monclova',), ('Huixquilucan',), ('Chilpancingo de los Bravo',), ('Puerto Vallarta',), ('Fresnillo',), ('Ciudad Madero',), ('Soledad de Graciano Sánchez',), ('San Juan del Río',), ('San Felipe del Progreso',), ('Córdoba',), ('Tecámac',), ('Ocosingo',), ('Carmen',), ('Lázaro Cárdenas',), ('Jiutepec',), ('Papantla',), ('Comalcalco',), ('Zamora',), ('Chisinau',), ('Tiraspol',), ('Ulan Bator',), ('Matola',), ('Beira',), ('Nampula',), ('Chimoio',), ('Mandalay',), ('Moulmein (Mawlamyine)',), ('Pegu (Bago)',), ('Bassein (Pathein)',), ('Windhoek',), ('Kathmandu',), ('Niamey',), ('Ogbomosho',), ('Kano',), ('Oshogbo',), ('Ilorin',), ('Abeokuta',), ('Port Harcourt',), ('Zaria',), ('Ilesha',), ('Onitsha',), ('Iwo',), ('Ado-Ekiti',), ('Abuja',), ('Kaduna',), ('Mushin',), ('Maiduguri',), ('Enugu',), ('Ede',), ('Aba',), ('Ife',), ('Ila',), ('Oyo',), ('Ikerre',), ('Benin City',), ('Iseyin',), ('Katsina',), ('Jos',), ('Sokoto',), ('Ilobu',), ('Offa',), ('Ikorodu',), ('Ilawe-Ekiti',), ('Owo',), ('Ikirun',), ('Shaki',), ('Calabar',), ('Ondo',), ('Akure',), ('Oslo',), ('Bergen',), ('Bouaké',), ('Quetta',), ('Islamabad',), ('Sargodha',), ('Sialkot',), ('Bahawalpur',), ('Sukkur',), ('Jhang',), ('Sheikhupura',), ('Larkana',), ('Gujrat',), ('Mardan',), ('Kasur',), ('Rahim Yar Khan',), ('Sahiwal',), ('Okara',), ('Wah',), ('Dera Ghazi Khan',), ('Mirpur Khas',), ('Nawabshah',), ('Mingora',), ('Chiniot',), ('Ciudad de Panamá',), ('San Miguelito',), ('Port Moresby',), ('Asunción',), ('Arequipa',), ('Trujillo',), ('Chiclayo',), ('Callao',), ('Iquitos',), ('Chimbote',), ('Huancayo',), ('Piura',), ('Cusco',), ('Pucallpa',), ('Tacna',), ('Ica',), ('Lisboa',), ('Porto',), ('San Juan',), ('Bayamón',), ('Ponce',), ('Carolina',), ('Lódz',), ('Kraków',), ('Wroclaw',), ('Poznan',), ('Gdansk',), ('Szczecin',), ('Bydgoszcz',), ('Lublin',), ('Katowice',), ('Bialystok',), ('Czestochowa',), ('Gdynia',), ('Sosnowiec',), ('Radom',), ('Kielce',), ('Gliwice',), ('Torun',), ('Bytom',), ('Zabrze',), ('Bielsko-Biala',), ('Olsztyn',), ('Rzeszów',), ('Doha',), ('Marseille',), ('Lyon',), ('Toulouse',), ('Nice',), ('Nantes',), ('Strasbourg',), ('Montpellier',), ('Bordeaux',), ('Rennes',), ('Le Havre',), ('Reims',), ('Lille',), ('St-Étienne',), ('Toulon',), ('Iasi',), ('Constanta',), ('Cluj-Napoca',), ('Galati',), ('Timisoara',), ('Brasov',), ('Craiova',), ('Ploiesti',), ('Braila',), ('Oradea',), ('Bacau',), ('Pitesti',), ('Arad',), ('Sibiu',), ('Târgu Mures',), ('Kigali',), ('Stockholm',), ('Gothenburg [Göteborg]',), ('Malmö',), ('Uppsala',), ('Frankfurt am Main',), ('Essen',), ('Dortmund',), ('Stuttgart',), ('Düsseldorf',), ('Bremen',), ('Duisburg',), ('Hannover',), ('Leipzig',), ('Nürnberg',), ('Dresden',), ('Bochum',), ('Wuppertal',), ('Bielefeld',), ('Mannheim',), ('Bonn',), ('Gelsenkirchen',), ('Karlsruhe',), ('Wiesbaden',), ('Münster',), ('Mönchengladbach',), ('Chemnitz',), ('Augsburg',), ('Halle/Saale',), ('Braunschweig',), ('Aachen',), ('Krefeld',), ('Magdeburg',), ('Kiel',), ('Oberhausen',), ('Lübeck',), ('Hagen',), ('Rostock',), ('Freiburg im Breisgau',), ('Erfurt',), ('Kassel',), ('Saarbrücken',), ('Mainz',), ('Hamm',), ('Herne',), ('Mülheim an der Ruhr',), ('Solingen',), ('Osnabrück',), ('Ludwigshafen am Rhein',), ('Leverkusen',), ('Ndola',), ('Kitwe',), ('Medina',), ('al-Dammam',), ('al-Taif',), ('Tabuk',), ('Burayda',), ('al-Hufuf',), ('al-Mubarraz',), ('Khamis Mushayt',), ('Hail',), ('Pikine',), ('Dakar',), ('Thiès',), ('Kaolack',), ('Ziguinchor',), ('Freetown',), ('Bratislava',), ('Košice',), ('Ljubljana',), ('Colombo',), ('Dehiwala',), ('Moratuwa',), ('Sharq al-Nil',), ('Port Sudan',), ('Kassala',), ('Obeid',), ('Nyala',), ('Wad Madani',), ('al-Qadarif',), ('Kusti',), ('Helsinki [Helsingfors]',), ('Espoo',), ('Tampere',), ('Vantaa',), ('Turku [Åbo]',), ('Zürich',), ('Geneve',), ('Basel',), ('Hims',), ('Hama',), ('Latakia',), ('Dushanbe',), ('Khujand',), ('Tainan',), ('Panchiao',), ('Chungho',), ('Keelung (Chilung)',), ('Sanchung',), ('Hsinchuang',), ('Hsinchu',), ('Chungli',), ('Fengshan',), ('Taoyuan',), ('Chiayi',), ('Hsintien',), ('Changhwa',), ('Yungho',), ('Tucheng',), ('Pingtung',), ('Yungkang',), ('Pingchen',), ('Tali',), ('Taiping',), ('Pate',), ('Fengyuan',), ('Luchou',), ('Dodoma',), ('Mwanza',), ('København',), ('Århus',), ('Odense',), ('Aalborg',), ('Nonthaburi',), ('Nakhon Ratchasima',), ('Chiang Mai',), ('Lomé',), ('N´Djaména',), ('Brno',), ('Ostrava',), ('Plzen',), ('Tunis',), ('Sfax',), ('Ariana',), ('Ettadhamen',), ('Gaziantep',), ('Konya',), ('Mersin (Içel)',), ('Antalya',), ('Diyarbakir',), ('Kayseri',), ('Eskisehir',), ('Sanliurfa',), ('Samsun',), ('Malatya',), ('Gebze',), ('Denizli',), ('Sivas',), ('Erzurum',), ('Tarsus',), ('Kahramanmaras',), ('Elâzig',), ('Van',), ('Sultanbeyli',), ('Izmit (Kocaeli)',), ('Manisa',), ('Batman',), ('Balikesir',), ('Sakarya (Adapazari)',), ('Ashgabat',), ('Chärjew',), ('Kampala',), ('Zaporizzja',), ('Lviv',), ('Kryvyi Rig',), ('Mykolajiv',), ('Mariupol',), ('Lugansk',), ('Vinnytsja',), ('Makijivka',), ('Herson',), ('Sevastopol',), ('Simferopol',), ('Pultava [Poltava]',), ('Tšernigiv',), ('Tšerkasy',), ('Gorlivka',), ('Zytomyr',), ('Sumy',), ('Dniprodzerzynsk',), ('Kirovograd',), ('Hmelnytskyi',), ('Tšernivtsi',), ('Rivne',), ('Krementšuk',), ('Ivano-Frankivsk',), ('Ternopil',), ('Lutsk',), ('Bila Tserkva',), ('Kramatorsk',), ('Melitopol',), ('Kertš',), ('Debrecen',), ('Miskolc',), ('Auckland',), ('Christchurch',), ('Manukau',), ('North Shore',), ('Waitakere',), ('Wellington',), ('Namangan',), ('Samarkand',), ('Andijon',), ('Buhoro',), ('Karsi',), ('Nukus',), ('Kükon',), ('Fargona',), ('Gomel',), ('Mogiljov',), ('Vitebsk',), ('Grodno',), ('Brest',), ('Bobruisk',), ('Baranovitši',), ('Barquisimeto',), ('Valencia',), ('Ciudad Guayana',), ('Petare',), ('Maracay',), ('Barcelona',), ('Maturín',), ('San Cristóbal',), ('Ciudad Bolívar',), ('Cumaná',), ('Mérida',), ('Cabimas',), ('Barinas',), ('Turmero',), ('Baruta',), ('Puerto Cabello',), ('Santa Ana de Coro',), ('Los Teques',), ('Punto Fijo',), ('Guarenas',), ('Krasnojarsk',), ('Saratov',), ('Toljatti',), ('Uljanovsk',), ('Izevsk',), ('Krasnodar',), ('Jaroslavl',), ('Habarovsk',), ('Vladivostok',), ('Irkutsk',), ('Barnaul',), ('Novokuznetsk',), ('Penza',), ('Rjazan',), ('Orenburg',), ('Lipetsk',), ('Nabereznyje Tšelny',), ('Tula',), ('Tjumen',), ('Kemerovo',), ('Astrahan',), ('Tomsk',), ('Kirov',), ('Ivanovo',), ('Tšeboksary',), ('Brjansk',), ('Tver',), ('Kursk',), ('Magnitogorsk',), ('Kaliningrad',), ('Nizni Tagil',), ('Murmansk',), ('Ulan-Ude',), ('Kurgan',), ('Arkangeli',), ('Sotši',), ('Smolensk',), ('Orjol',), ('Stavropol',), ('Belgorod',), ('Kaluga',), ('Vladimir',), ('Mahatškala',), ('Tšerepovets',), ('Saransk',), ('Tambov',), ('Vladikavkaz',), ('Tšita',), ('Vologda',), ('Veliki Novgorod',), ('Komsomolsk-na-Amure',), ('Kostroma',), ('Volzski',), ('Taganrog',), ('Petroskoi',), ('Bratsk',), ('Dzerzinsk',), ('Surgut',), ('Orsk',), ('Sterlitamak',), ('Angarsk',), ('Joškar-Ola',), ('Rybinsk',), ('Prokopjevsk',), ('Niznevartovsk',), ('Naltšik',), ('Syktyvkar',), ('Severodvinsk',), ('Bijsk',), ('Niznekamsk',), ('Blagoveštšensk',), ('Šahty',), ('Staryi Oskol',), ('Zelenograd',), ('Balakovo',), ('Novorossijsk',), ('Pihkova',), ('Zlatoust',), ('Jakutsk',), ('Podolsk',), ('Petropavlovsk-Kamtšatski',), ('Kamensk-Uralski',), ('Engels',), ('Syzran',), ('Grozny',), ('Novotšerkassk',), ('Berezniki',), ('Juzno-Sahalinsk',), ('Volgodonsk',), ('Abakan',), ('Maikop',), ('Miass',), ('Armavir',), ('Ljubertsy',), ('Rubtsovsk',), ('Haiphong',), ('Da Nang',), ('Biên Hoa',), ('Nha Trang',), ('Hue',), ('Can Tho',), ('Cam Pha',), ('Nam Dinh',), ('Quy Nhon',), ('Tallinn',), ('San Jose',), ('Indianapolis',), ('San Francisco',), ('Jacksonville',), ('Columbus',), ('Austin',), ('Baltimore',), ('Memphis',), ('Milwaukee',), ('Boston',), ('Washington',), ('Nashville-Davidson',), ('El Paso',), ('Seattle',), ('Denver',), ('Charlotte',), ('Fort Worth',), ('Portland',), ('Oklahoma City',), ('Tucson',), ('New Orleans',), ('Las Vegas',), ('Cleveland',), ('Long Beach',), ('Albuquerque',), ('Kansas City',), ('Fresno',), ('Virginia Beach',), ('Atlanta',), ('Sacramento',), ('Oakland',), ('Mesa',), ('Tulsa',), ('Omaha',), ('Minneapolis',), ('Honolulu',), ('Miami',), ('Colorado Springs',), ('Saint Louis',), ('Wichita',), ('Santa Ana',), ('Pittsburgh',), ('Arlington',), ('Cincinnati',), ('Anaheim',), ('Toledo',), ('Tampa',), ('Buffalo',), ('Saint Paul',), ('Corpus Christi',), ('Aurora',), ('Raleigh',), ('Newark',), ('Lexington-Fayette',), ('Anchorage',), ('Louisville',), ('Riverside',), ('Saint Petersburg',), ('Bakersfield',), ('Stockton',), ('Birmingham',), ('Jersey City',), ('Norfolk',), ('Baton Rouge',), ('Hialeah',), ('Lincoln',), ('Greensboro',), ('Plano',), ('Rochester',), ('Glendale',), ('Akron',), ('Garland',), ('Madison',), ('Fort Wayne',), ('Fremont',), ('Scottsdale',), ('Montgomery',), ('Shreveport',), ('Augusta-Richmond County',), ('Lubbock',), ('Chesapeake',), ('Mobile',), ('Des Moines',), ('Grand Rapids',), ('Richmond',), ('Yonkers',), ('Spokane',), ('Glendale',), ('Tacoma',), ('Irving',), ('Huntington Beach',), ('Modesto',), ('Durham',), ('Columbus',), ('Orlando',), ('Boise City',), ('Winston-Salem',), ('San Bernardino',), ('Jackson',), ('Little Rock',), ('Salt Lake City',), ('Reno',), ('Newport News',), ('Chandler',), ('Laredo',), ('Henderson',), ('Arlington',), ('Knoxville',), ('Amarillo',), ('Providence',), ('Chula Vista',), ('Worcester',), ('Oxnard',), ('Dayton',), ('Garden Grove',), ('Oceanside',), ('Bulawayo',), ('Chitungwiza',), ('Mount Darwin',), ('Gaza',)]",SELECT name FROM city WHERE population BETWEEN 160000 AND 900000
world_1,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,Which language is spoken by the largest number of countries?,"city, sqlite sequence, country, countrylanguage","[('English',)]",SELECT T1.language FROM countrylanguage AS T1 JOIN countries AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.language ORDER BY count(*) DESC LIMIT 1
world_1,SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1,Give the language that is spoken in the most countries.,"city, sqlite sequence, country, countrylanguage","[('English',)]",SELECT T1.language FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.language ORDER BY count(*) DESC LIMIT 1
world_1,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode",What is the language spoken by the largest percentage of people in each country?,"city, sqlite sequence, country, countrylanguage","[('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]","SELECT T1.country_name,  T2.language FROM countrylanguage AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY max(T1.percent) DESC LIMIT 1"
world_1,"SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode","What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?","city, sqlite sequence, country, countrylanguage","[('Papiamento', 'ABW', 76.7), ('Pashto', 'AFG', 52.4), ('Ovimbundu', 'AGO', 37.2), ('English', 'AIA', 0.0), ('Albaniana', 'ALB', 97.9), ('Spanish', 'AND', 44.6), ('Papiamento', 'ANT', 86.2), ('Arabic', 'ARE', 42.0), ('Spanish', 'ARG', 96.8), ('Armenian', 'ARM', 93.4), ('Samoan', 'ASM', 90.6), ('Creole English', 'ATG', 95.7), ('English', 'AUS', 81.2), ('German', 'AUT', 92.0), ('Azerbaijani', 'AZE', 89.0), ('Kirundi', 'BDI', 98.1), ('Dutch', 'BEL', 59.2), ('Fon', 'BEN', 39.8), ('Mossi', 'BFA', 50.2), ('Bengali', 'BGD', 97.7), ('Bulgariana', 'BGR', 83.2), ('Arabic', 'BHR', 67.7), ('Creole English', 'BHS', 89.7), ('Serbo-Croatian', 'BIH', 99.2), ('Belorussian', 'BLR', 65.6), ('English', 'BLZ', 50.8), ('English', 'BMU', 100.0), ('Spanish', 'BOL', 87.7), ('Portuguese', 'BRA', 97.5), ('Bajan', 'BRB', 95.1), ('Malay', 'BRN', 45.5), ('Dzongkha', 'BTN', 50.0), ('Tswana', 'BWA', 75.5), ('Gbaya', 'CAF', 23.8), ('English', 'CAN', 60.4), ('English', 'CCK', 0.0), ('German', 'CHE', 63.6), ('Spanish', 'CHL', 89.7), ('Chinese', 'CHN', 92.0), ('Akan', 'CIV', 30.0), ('Fang', 'CMR', 19.7), ('Luba', 'COD', 18.0), ('Kongo', 'COG', 51.5), ('English', 'COK', 0.0), ('Spanish', 'COL', 99.0), ('Comorian', 'COM', 75.0), ('Crioulo', 'CPV', 100.0), ('Spanish', 'CRI', 97.5), ('Spanish', 'CUB', 100.0), ('Chinese', 'CXR', 0.0), ('English', 'CYM', 0.0), ('Greek', 'CYP', 74.1), ('Czech', 'CZE', 81.2), ('German', 'DEU', 91.3), ('Somali', 'DJI', 43.9), ('Creole English', 'DMA', 100.0), ('Danish', 'DNK', 93.5), ('Spanish', 'DOM', 98.0), ('Arabic', 'DZA', 86.0), ('Spanish', 'ECU', 93.0), ('Arabic', 'EGY', 98.8), ('Tigrinja', 'ERI', 49.1), ('Arabic', 'ESH', 100.0), ('Spanish', 'ESP', 74.4), ('Estonian', 'EST', 65.3), ('Oromo', 'ETH', 31.0), ('Finnish', 'FIN', 92.7), ('Fijian', 'FJI', 50.8), ('English', 'FLK', 0.0), ('French', 'FRA', 93.6), ('Faroese', 'FRO', 100.0), ('Trukese', 'FSM', 41.6), ('Fang', 'GAB', 35.8), ('English', 'GBR', 97.3), ('Georgiana', 'GEO', 71.7), ('Akan', 'GHA', 52.4), ('English', 'GIB', 88.9), ('Ful', 'GIN', 38.6), ('Creole French', 'GLP', 95.0), ('Malinke', 'GMB', 34.1), ('Crioulo', 'GNB', 36.4), ('Fang', 'GNQ', 84.8), ('Greek', 'GRC', 98.5), ('Creole English', 'GRD', 100.0), ('Greenlandic', 'GRL', 87.5), ('Spanish', 'GTM', 64.7), ('Creole French', 'GUF', 94.3), ('English', 'GUM', 37.5), ('Creole English', 'GUY', 96.4), ('Canton Chinese', 'HKG', 88.7), ('Spanish', 'HND', 97.2), ('Serbo-Croatian', 'HRV', 95.9), ('Haiti Creole', 'HTI', 100.0), ('Hungarian', 'HUN', 98.5), ('Javanese', 'IDN', 39.4), ('Hindi', 'IND', 39.9), ('English', 'IRL', 98.4), ('Persian', 'IRN', 45.7), ('Arabic', 'IRQ', 77.2), ('Icelandic', 'ISL', 95.7), ('Hebrew', 'ISR', 63.1), ('Italian', 'ITA', 94.1), ('Creole English', 'JAM', 94.2), ('Arabic', 'JOR', 97.9), ('Japanese', 'JPN', 99.1), ('Kazakh', 'KAZ', 46.0), ('Kikuyu', 'KEN', 20.9), ('Kirgiz', 'KGZ', 59.7), ('Khmer', 'KHM', 88.6), ('Kiribati', 'KIR', 98.9), ('Creole English', 'KNA', 100.0), ('Korean', 'KOR', 99.9), ('Arabic', 'KWT', 78.1), ('Lao', 'LAO', 67.2), ('Arabic', 'LBN', 93.0), ('Kpelle', 'LBR', 19.5), ('Arabic', 'LBY', 96.0), ('Creole French', 'LCA', 80.0), ('German', 'LIE', 89.0), ('Singali', 'LKA', 60.3), ('Sotho', 'LSO', 85.0), ('Lithuanian', 'LTU', 81.6), ('Luxembourgish', 'LUX', 64.4), ('Latvian', 'LVA', 55.1), ('Canton Chinese', 'MAC', 85.6), ('Arabic', 'MAR', 65.0), ('French', 'MCO', 41.9), ('Romanian', 'MDA', 61.9), ('Malagasy', 'MDG', 98.9), ('Dhivehi', 'MDV', 100.0), ('Spanish', 'MEX', 92.1), ('Marshallese', 'MHL', 96.8), ('Macedonian', 'MKD', 66.5), ('Bambara', 'MLI', 31.8), ('Maltese', 'MLT', 95.8), ('Burmese', 'MMR', 69.0), ('Mongolian', 'MNG', 78.8), ('Philippene Languages', 'MNP', 34.1), ('Makua', 'MOZ', 27.8), ('Hassaniya', 'MRT', 81.7), ('English', 'MSR', 0.0), ('Creole French', 'MTQ', 96.6), ('Creole French', 'MUS', 70.6), ('Chichewa', 'MWI', 58.3), ('Malay', 'MYS', 58.4), ('Mahoré', 'MYT', 41.9), ('Ovambo', 'NAM', 50.7), ('Malenasian Languages', 'NCL', 45.4), ('Hausa', 'NER', 53.1), ('English', 'NFK', 0.0), ('Joruba', 'NGA', 21.4), ('Spanish', 'NIC', 97.6), ('English', 'NIU', 0.0), ('Dutch', 'NLD', 95.6), ('Norwegian', 'NOR', 96.6), ('Nepali', 'NPL', 50.4), ('Nauru', 'NRU', 57.5), ('English', 'NZL', 87.0), ('Arabic', 'OMN', 76.7), ('Punjabi', 'PAK', 48.2), ('Spanish', 'PAN', 76.8), ('Pitcairnese', 'PCN', 0.0), ('Spanish', 'PER', 79.8), ('Pilipino', 'PHL', 29.3), ('Palau', 'PLW', 82.2), ('Papuan Languages', 'PNG', 78.1), ('Polish', 'POL', 97.6), ('Spanish', 'PRI', 51.3), ('Korean', 'PRK', 99.9), ('Portuguese', 'PRT', 99.0), ('Spanish', 'PRY', 55.1), ('Arabic', 'PSE', 95.9), ('Tahitian', 'PYF', 46.4), ('Arabic', 'QAT', 40.7), ('Creole French', 'REU', 91.5), ('Romanian', 'ROM', 90.7), ('Russian', 'RUS', 86.6), ('Rwanda', 'RWA', 100.0), ('Arabic', 'SAU', 95.0), ('Arabic', 'SDN', 49.4), ('Wolof', 'SEN', 48.1), ('Chinese', 'SGP', 77.1), ('English', 'SHN', 0.0), ('Norwegian', 'SJM', 0.0), ('Malenasian Languages', 'SLB', 85.6), ('Mende', 'SLE', 34.8), ('Spanish', 'SLV', 100.0), ('Italian', 'SMR', 100.0), ('Somali', 'SOM', 98.3), ('French', 'SPM', 0.0), ('Crioulo', 'STP', 86.3), ('Sranantonga', 'SUR', 81.0), ('Slovak', 'SVK', 85.6), ('Slovene', 'SVN', 87.9), ('Swedish', 'SWE', 89.5), ('Swazi', 'SWZ', 89.9), ('Seselwa', 'SYC', 91.3), ('Arabic', 'SYR', 90.0), ('English', 'TCA', 0.0), ('Sara', 'TCD', 27.7), ('Ewe', 'TGO', 23.2), ('Thai', 'THA', 52.6), ('Tadzhik', 'TJK', 62.2), ('English', 'TKL', 0.0), ('Turkmenian', 'TKM', 76.7), ('Portuguese', 'TMP', 0.0), ('Tongan', 'TON', 98.3), ('English', 'TTO', 93.5), ('Arabic', 'TUN', 69.9), ('Turkish', 'TUR', 87.6), ('Tuvalu', 'TUV', 92.5), ('Min', 'TWN', 66.7), ('Nyamwesi', 'TZA', 21.1), ('Ganda', 'UGA', 18.1), ('Ukrainian', 'UKR', 64.7), ('English', 'UMI', 0.0), ('Spanish', 'URY', 95.7), ('English', 'USA', 86.2), ('Uzbek', 'UZB', 72.6), ('Italian', 'VAT', 0.0), ('Creole English', 'VCT', 99.1), ('Spanish', 'VEN', 96.9), ('English', 'VGB', 0.0), ('English', 'VIR', 81.7), ('Vietnamese', 'VNM', 86.8), ('Bislama', 'VUT', 56.6), ('Futuna', 'WLF', 0.0), ('Samoan-English', 'WSM', 52.0), ('Arabic', 'YEM', 99.6), ('Serbo-Croatian', 'YUG', 75.2), ('Zulu', 'ZAF', 22.7), ('Bemba', 'ZMB', 29.7), ('Shona', 'ZWE', 72.1)]","SELECT T1.country_code,  T2.language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.country_id  =  T2.country_id GROUP BY T1.country_id ORDER BY max(T2.percentage) DESC LIMIT 1"
world_1,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",What is the total number of countries where Spanish is spoken by the largest percentage of people?,"city, sqlite sequence, country, countrylanguage","[(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]",SELECT count(DISTINCT country_id) FROM countrylanguage WHERE language  =  'Spanish'
world_1,"SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",Count the number of countries for which Spanish is the predominantly spoken language.,"city, sqlite sequence, country, countrylanguage","[(1, 7.4), (1, 44.6), (1, 96.8), (1, 31.6), (1, 87.7), (1, 0.7), (1, 89.7), (1, 99.0), (1, 97.5), (1, 100.0), (1, 98.0), (1, 93.0), (1, 74.4), (1, 0.4), (1, 64.7), (1, 97.2), (1, 92.1), (1, 97.6), (1, 76.8), (1, 79.8), (1, 51.3), (1, 55.1), (1, 100.0), (1, 0.6), (1, 95.7), (1, 7.5), (1, 96.9), (1, 13.3)]",SELECT count(DISTINCT country_id) FROM countrylanguage WHERE language  =  'Spanish'
world_1,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",What are the codes of countries where Spanish is spoken by the largest percentage of people?,"city, sqlite sequence, country, countrylanguage","[('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]","SELECT T1.country_code FROM countrylanguage AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T1.language  =  ""Spanish"" GROUP BY T1.country_id ORDER BY T2.percent_population DESC LIMIT 1<|eot_id|>"
world_1,"SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  ""Spanish"" GROUP BY CountryCode",Return the codes of countries for which Spanish is the predominantly spoken language.,"city, sqlite sequence, country, countrylanguage","[('ABW', 7.4), ('AND', 44.6), ('ARG', 96.8), ('BLZ', 31.6), ('BOL', 87.7), ('CAN', 0.7), ('CHL', 89.7), ('COL', 99.0), ('CRI', 97.5), ('CUB', 100.0), ('DOM', 98.0), ('ECU', 93.0), ('ESP', 74.4), ('FRA', 0.4), ('GTM', 64.7), ('HND', 97.2), ('MEX', 92.1), ('NIC', 97.6), ('PAN', 76.8), ('PER', 79.8), ('PRI', 51.3), ('PRY', 55.1), ('SLV', 100.0), ('SWE', 0.6), ('URY', 95.7), ('USA', 7.5), ('VEN', 96.9), ('VIR', 13.3)]",SELECT country_code FROM countrylanguage WHERE language  =  'Spanish' AND percentage  =  100
orchestra,SELECT count(*) FROM conductor,How many conductors are there?,"conductor, orchestra, performance, show","[(12,)]",SELECT count(*) FROM conductor
orchestra,SELECT count(*) FROM conductor,Count the number of conductors.,"conductor, orchestra, performance, show","[(12,)]",SELECT count(*) FROM conductor
orchestra,SELECT Name FROM conductor ORDER BY Age ASC,List the names of conductors in ascending order of age.,"conductor, orchestra, performance, show","[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]",SELECT conductor_name FROM conductor ORDER BY age ASC
orchestra,SELECT Name FROM conductor ORDER BY Age ASC,"What are the names of conductors, ordered by age?","conductor, orchestra, performance, show","[('Antal Doráti',), ('Igor Stravinsky',), ('Colin Davis',), ('Michael Tilson Thomas',), ('Paul Jorgensen',), ('Antal Brown',), ('Charles Dutoit',), ('Seiji Ozawa',), ('Valeri Gergiev',), ('Pierre Boulez',), ('Gerard Schwarz',), ('Robert Craft',)]",SELECT conductor_name FROM conductor ORDER BY age
orchestra,SELECT Name FROM conductor WHERE Nationality != 'USA',"What are the names of conductors whose nationalities are not ""USA""?","conductor, orchestra, performance, show","[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]","SELECT T1.conductor_name FROM conductor AS T1 WHERE T1.nationality!= ""USA"""
orchestra,SELECT Name FROM conductor WHERE Nationality != 'USA',"Return the names of conductors that do not have the nationality ""USA"".","conductor, orchestra, performance, show","[('Igor Stravinsky',), ('Paul Jorgensen',), ('Charles Dutoit',), ('Pierre Boulez',), ('Robert Craft',), ('Michael Tilson Thomas',)]","SELECT T1.conductor_name FROM conductor AS T1 WHERE T1.nationality!= ""USA"""
orchestra,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,What are the record companies of orchestras in descending order of years in which they were founded?,"conductor, orchestra, performance, show","[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]",SELECT record_company FROM orchestra ORDER BY YEAR DESC
orchestra,SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC,"Return the record companies of orchestras, sorted descending by the years in which they were founded.","conductor, orchestra, performance, show","[('Columbia Masterworks',), ('Philips',), ('Philips Classics Records',), ('RCA',), ('EMI',), ('Koch Records / Naxos Records',), ('Decca Records',), ('Mercury Records',), ('Deutsche Grammophon',), ('Kultur',), ('Decca Records',), ('Delos Records',)]",SELECT record_company FROM orchestra ORDER BY YEAR DESC
orchestra,SELECT avg(Attendance) FROM SHOW,What is the average attendance of shows?,"conductor, orchestra, performance, show","[(1326.4,)]",SELECT avg(attendance) FROM performance
orchestra,SELECT avg(Attendance) FROM SHOW,Return the average attendance across all shows.,"conductor, orchestra, performance, show","[(1326.4,)]",SELECT avg(T1.attendance) FROM performance AS T1 JOIN show AS T2 ON T1.show_id  =  T2.show_id
orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","What are the maximum and minimum share of performances whose type is not ""Live final"".","conductor, orchestra, performance, show","[('44.7%', '22.7%')]","SELECT max(T1.Share_of_Performances),  min(T1.Share_of_Performances) FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id  =  T2.orchestra_id WHERE T2.Type!= ""Live final""<|eot_id|>"
orchestra,"SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != ""Live final""","Return the maximum and minimum shares for performances that do not have the type ""Live final"".","conductor, orchestra, performance, show","[('44.7%', '22.7%')]","SELECT max(T2.share),  min(T2.share) FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id  =  T2.orchestra_id WHERE T1.performance_type!= ""Live final"""
orchestra,SELECT count(DISTINCT Nationality) FROM conductor,How many different nationalities do conductors have?,"conductor, orchestra, performance, show","[(3,)]",SELECT COUNT(DISTINCT nationality) FROM conductor
orchestra,SELECT count(DISTINCT Nationality) FROM conductor,Count the number of different nationalities of conductors.,"conductor, orchestra, performance, show","[(3,)]",SELECT count(DISTINCT nationality) FROM conductor
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,List names of conductors in descending order of years of work.,"conductor, orchestra, performance, show","[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]",SELECT t1.conductor_name FROM conductor AS t1 JOIN performance AS t2 ON t1.conductor_id  =  t2.conductor_id GROUP BY t1.conductor_id ORDER BY avg(Years_worked) DESC
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC,"What are the names of conductors, sorted descending by the number of years they have worked?","conductor, orchestra, performance, show","[('Robert Craft',), ('Antal Brown',), ('Gerard Schwarz',), ('Valeri Gergiev',), ('Charles Dutoit',), ('Michael Tilson Thomas',), ('Igor Stravinsky',), ('Paul Jorgensen',), ('Pierre Boulez',), ('Antal Doráti',), ('Seiji Ozawa',), ('Colin Davis',)]","SELECT name,  YEARS_worked FROM conductor ORDER BY YEARS_worked DESC"
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,List the name of the conductor with the most years of work.,"conductor, orchestra, performance, show","[('Robert Craft',)]",SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.year_worked ORDER BY count(*) DESC LIMIT 1
orchestra,SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1,What is the name of the conductor who has worked the greatest number of years?,"conductor, orchestra, performance, show","[('Robert Craft',)]",SELECT T1.conductor_name FROM conductor AS T1 JOIN performance AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.conductor_id ORDER BY count(*) ASC LIMIT 1
orchestra,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",Show the names of conductors and the orchestras they have conducted.,"conductor, orchestra, performance, show","[('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]","SELECT T3.conductor_name,  T2.orchestra_name FROM performance AS T1 JOIN conductor AS T3 ON T1.conductor_id  =  T3.conductor_id JOIN orchestra AS T2 ON T1.orchestra_id  =  T2.orchestra_id<|eot_id|>"
orchestra,"SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID",What are the names of conductors as well as the corresonding orchestras that they have conducted?,"conductor, orchestra, performance, show","[('Antal Doráti', 'London Symphony Orchestra'), ('Igor Stravinsky', 'Columbia Symphony Orchestra'), ('Colin Davis', 'Royal Concertgebouw Orchestra'), ('Paul Jorgensen', 'Royal Danish Orchestra'), ('Antal Brown', 'Detroit Symphony Orchestra'), ('Charles Dutoit', 'Montreal Symphony Orchestra'), ('Gerard Schwarz', 'Seattle Symphony Orchestra'), ('Pierre Boulez', 'Chicago Symphony Orchestra'), ('Valeri Gergiev', 'Kirov Orchestra'), ('Robert Craft', 'Philharmonia Orchestra'), ('Seiji Ozawa', 'Orchestre de Paris'), ('Michael Tilson Thomas', 'San Francisco Symphony Orchestra')]","SELECT T3.conductor_name,  T2.orchestra_name FROM performance AS T1 JOIN orchestra AS T2 ON T1.orchestra_id  =  T2.orchestra_id JOIN conductor AS T3 ON T1.conductor_id  =  T3.conductor_id<|eot_id|>"
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,Show the name of the conductor that has conducted the most number of orchestras.,"conductor, orchestra, performance, show","[('Michael Tilson Thomas',)]",SELECT T1.conductor_name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.conductor_id ORDER BY count(*) DESC LIMIT 1
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1,What is the name of the conductor who has conducted the most orchestras?,"conductor, orchestra, performance, show","[('Michael Tilson Thomas',)]",SELECT T1.conductor_name FROM conductor AS T1 JOIN performance AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T1.conductor_id ORDER BY count(*) DESC LIMIT 1
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,Please show the name of the conductor that has conducted orchestras founded after 2008.,"conductor, orchestra, performance, show","[('Igor Stravinsky',)]",SELECT T1.name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T2.founded_year  >  2008
orchestra,SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008,What are the names of conductors who have conducted orchestras founded after the year 2008?,"conductor, orchestra, performance, show","[('Igor Stravinsky',)]",SELECT T1.conductor_name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.conductor_id  =  T2.conductor_id WHERE T2.founded_year  >  2008
orchestra,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",Please show the different record companies and the corresponding number of orchestras.,"conductor, orchestra, performance, show","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]","SELECT record_company,  count(*) FROM orchestra GROUP BY record_company"
orchestra,"SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company",How many orchestras does each record company manage?,"conductor, orchestra, performance, show","[('Columbia Masterworks', 1), ('Decca Records', 2), ('Delos Records', 1), ('Deutsche Grammophon', 1), ('EMI', 1), ('Koch Records / Naxos Records', 1), ('Kultur', 1), ('Mercury Records', 1), ('Philips', 1), ('Philips Classics Records', 1), ('RCA', 1)]","SELECT count(*),  T1.record_company FROM orchestra AS T1 GROUP BY T1.record_company"
orchestra,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,Please show the record formats of orchestras in ascending order of count.,"conductor, orchestra, performance, show","[('CD / LP',), ('DVD',), ('CD',)]",SELECT record_format FROM orchestra ORDER BY count(*) ASC
orchestra,SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC,"What are the major record formats of orchestras, sorted by their frequency?","conductor, orchestra, performance, show","[('CD / LP',), ('DVD',), ('CD',)]",SELECT major_record_format FROM orchestra GROUP BY major_record_format ORDER BY count(*) DESC
orchestra,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,List the record company shared by the most number of orchestras.,"conductor, orchestra, performance, show","[('Decca Records',)]",SELECT T2.record_company FROM orchestra AS T1 JOIN conductor AS T2 ON T1.conductor_id  =  T2.conductor_id GROUP BY T2.record_company ORDER BY count(*) DESC LIMIT 1
orchestra,SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1,What is the record company used by the greatest number of orchestras?,"conductor, orchestra, performance, show","[('Decca Records',)]",SELECT T3.record_company FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id  =  T2.orchestra_id GROUP BY T3.record_company ORDER BY count(*) DESC LIMIT 1
orchestra,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),List the names of orchestras that have no performance.,"conductor, orchestra, performance, show","[('San Francisco Symphony Orchestra',)]",SELECT T1.orchestra_name FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id  =  T2.orchestra_id GROUP BY T1.orchestra_id HAVING count(*)  =  0<|eot_id|>
orchestra,SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance),What are the orchestras that do not have any performances?,"conductor, orchestra, performance, show","[('San Francisco Symphony Orchestra',)]",SELECT T1.orchestra_name FROM orchestra AS T1 JOIN performance AS T2 ON T1.orchestra_id  =  T2.orchestra_id GROUP BY T1.orchestra_id HAVING count(*)  =  0
orchestra,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,Show the record companies shared by orchestras founded before 2003 and after 2003.,"conductor, orchestra, performance, show","[('Decca Records',)]",SELECT record_company FROM orchestra WHERE founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE founded  >  2003
orchestra,SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003,What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?,"conductor, orchestra, performance, show","[('Decca Records',)]",SELECT record_company FROM orchestra WHERE founded  <  2003 INTERSECT SELECT record_company FROM orchestra WHERE founded  >  2003
orchestra,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""","Find the number of orchestras whose record format is ""CD"" or ""DVD"".","conductor, orchestra, performance, show","[(11,)]","SELECT count(*) FROM orchestra WHERE record_format  =  ""CD"" OR record_format  =  ""DVD"""
orchestra,"SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  ""CD"" OR Major_Record_Format  =  ""DVD""",Count the number of orchestras that have CD or DVD as their record format.,"conductor, orchestra, performance, show","[(11,)]","SELECT count(*) FROM orchestra WHERE record_format  =  ""CD"" OR record_format  =  ""DVD"""
network_1,SELECT count(*) FROM Highschooler,How many high schoolers are there?,"high schooler, friend, likes","[(16,)]",SELECT count(*) FROM high_schooler
network_1,SELECT count(*) FROM Highschooler,Count the number of high schoolers.,"high schooler, friend, likes","[(16,)]",SELECT count(*) FROM high_schooler
network_1,"SELECT name ,  grade FROM Highschooler",Show the names and grades of each high schooler.,"high schooler, friend, likes","[('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]","SELECT name,  grade FROM high_schooler"
network_1,"SELECT name ,  grade FROM Highschooler",What are the names and grades for each high schooler?,"high schooler, friend, likes","[('Jordan', 9), ('Gabriel', 9), ('Tiffany', 9), ('Cassandra', 9), ('Haley', 10), ('Andrew', 10), ('Kris', 10), ('Brittany', 10), ('Alexis', 11), ('Austin', 11), ('Gabriel', 11), ('Jessica', 11), ('Jordan', 12), ('John', 12), ('Kyle', 12), ('Logan', 12)]","SELECT T1.name,  T1.grade FROM high_schooler AS T1"
network_1,SELECT grade FROM Highschooler,Show all the grades of the high schoolers.,"high schooler, friend, likes","[(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]",SELECT DISTINCT grade FROM high_schooler
network_1,SELECT grade FROM Highschooler,What is the grade of each high schooler?,"high schooler, friend, likes","[(9,), (9,), (9,), (9,), (10,), (10,), (10,), (10,), (11,), (11,), (11,), (11,), (12,), (12,), (12,), (12,)]",SELECT T1.grade FROM high_schooler AS T1
network_1,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",What grade is Kyle in?,"high schooler, friend, likes","[(12,)]","SELECT T1.grade FROM high_schooler AS T1 JOIN friend AS T2 ON T2.friend_id  =  T1.high_school_id WHERE T2.name  =  ""Kyle"""
network_1,"SELECT grade FROM Highschooler WHERE name  =  ""Kyle""",Return the grade for the high schooler named Kyle.,"high schooler, friend, likes","[(12,)]","SELECT T1.grade FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id WHERE T2.friend_name  =  ""Kyle""<|eot_id|>"
network_1,SELECT name FROM Highschooler WHERE grade  =  10,Show the names of all high schoolers in grade 10.,"high schooler, friend, likes","[('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]",SELECT DISTINCT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.name  =  T2.name WHERE T1.grade  =  '10'
network_1,SELECT name FROM Highschooler WHERE grade  =  10,What are the names of all high schoolers in grade 10?,"high schooler, friend, likes","[('Haley',), ('Andrew',), ('Kris',), ('Brittany',)]",SELECT DISTINCT high_schooler_name FROM high_schooler WHERE grade  =  10
network_1,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",Show the ID of the high schooler named Kyle.,"high schooler, friend, likes","[(1934,)]","SELECT high_schooler_id FROM high_schooler WHERE name  =  ""Kyle"""
network_1,"SELECT ID FROM Highschooler WHERE name  =  ""Kyle""",What is Kyle's id?,"high schooler, friend, likes","[(1934,)]","SELECT T1.student_id FROM high_schooler AS T1 JOIN friend AS T2 ON T1.student_id  =  T2.friend_id WHERE T2.student_id = ""Kyle""<|eot_id|>"
network_1,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,How many high schoolers are there in grade 9 or 10?,"high schooler, friend, likes","[(8,)]",SELECT count(*) FROM high_schooler WHERE grade  =  9 OR grade  =  10
network_1,SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10,Count the number of high schoolers in grades 9 or 10.,"high schooler, friend, likes","[(8,)]",SELECT count(*) FROM high_schooler WHERE grade  =  9 OR grade  =  10
network_1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",Show the number of high schoolers for each grade.,"high schooler, friend, likes","[(9, 4), (10, 4), (11, 4), (12, 4)]","SELECT grade,  count(*) FROM high_schooler GROUP BY grade"
network_1,"SELECT grade ,  count(*) FROM Highschooler GROUP BY grade",How many high schoolers are in each grade?,"high schooler, friend, likes","[(9, 4), (10, 4), (11, 4), (12, 4)]","SELECT grade,  count(*) FROM high_schooler GROUP BY grade"
network_1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,Which grade has the most high schoolers?,"high schooler, friend, likes","[(12,)]",SELECT grade FROM high_schooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
network_1,SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1,Return the grade that has the greatest number of high schoolers.,"high schooler, friend, likes","[(12,)]",SELECT grade FROM high_schooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
network_1,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,Show me all grades that have at least 4 students.,"high schooler, friend, likes","[(9,), (10,), (11,), (12,)]",SELECT DISTINCT grade FROM high_schooler GROUP BY grade HAVING count(*)  >=  4
network_1,SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4,Which grades have 4 or more high schoolers?,"high schooler, friend, likes","[(9,), (10,), (11,), (12,)]",SELECT DISTINCT grade FROM high_schooler GROUP BY grade HAVING count(*)  >=  4
network_1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",Show the student IDs and numbers of friends corresponding to each.,"high schooler, friend, likes","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]","SELECT T1.student_id,  count(*) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.student_id  =  T2.friend_id GROUP BY T1.student_id"
network_1,"SELECT student_id ,  count(*) FROM Friend GROUP BY student_id",How many friends does each student have?,"high schooler, friend, likes","[(1101, 1), (1247, 2), (1304, 1), (1316, 1), (1381, 1), (1468, 2), (1501, 1), (1510, 2), (1661, 1), (1689, 2), (1709, 1), (1782, 3), (1911, 1), (1934, 1)]","SELECT count(*),  T1.high_schooler_id FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.friend_id GROUP BY T1.high_schooler_id"
network_1,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",Show the names of high school students and their corresponding number of friends.,"high schooler, friend, likes","[('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]","SELECT T1.name,  count(*) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_school_id  =  T2.high_school_id GROUP BY T1.high_school_id"
network_1,"SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id",What are the names of the high schoolers and how many friends does each have?,"high schooler, friend, likes","[('Haley', 1), ('Alexis', 2), ('Jordan', 1), ('Austin', 1), ('Tiffany', 1), ('Kris', 2), ('Jessica', 1), ('Jordan', 2), ('Logan', 1), ('Gabriel', 2), ('Cassandra', 1), ('Andrew', 3), ('Gabriel', 1), ('Kyle', 1)]","SELECT T1.name,  count(*) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_id"
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,What is the name of the high schooler who has the greatest number of friends?,"high schooler, friend, likes","[('Andrew',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_id ORDER BY count(*) DESC LIMIT 1
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,Return the name of the high school student with the most friends.,"high schooler, friend, likes","[('Andrew',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.friend_id GROUP BY T1.high_schooler_id ORDER BY count(*) DESC LIMIT 1
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,Show the names of high schoolers who have at least 3 friends.,"high schooler, friend, likes","[('Andrew',)]",SELECT T2.high_schooler_name FROM Friend AS T1 JOIN High_Schooler AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_id HAVING count(*)  >=  3<|eot_id|>
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3,What are the names of high schoolers who have 3 or more friends?,"high schooler, friend, likes","[('Andrew',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T2.high_schooler_id HAVING count(*)  >=  3
network_1,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""",Show the names of all of the high schooler Kyle's friends.,"high schooler, friend, likes","[('Jordan',)]","SELECT T2.friend_name FROM Friend AS T1 JOIN High_Schooler AS T2 ON T1.friend_id  =  T2.high_schooler_id WHERE T1.name  =  ""Kyle"""
network_1,"SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  ""Kyle""",Return the names of friends of the high school student Kyle.,"high schooler, friend, likes","[('Jordan',)]","SELECT T2.friend_name FROM Friend AS T1 JOIN High_Schooler AS T2 ON T1.friend_id  =  T2.high_schooler_id WHERE T1.name  =  ""Kyle"""
network_1,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",How many friends does the high school student Kyle have?,"high schooler, friend, likes","[(1,)]","SELECT count(T2.friend_name) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id WHERE T1.high_schooler_name  =  ""Kyle"""
network_1,"SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",Count the number of friends Kyle has.,"high schooler, friend, likes","[(1,)]","SELECT count(T2.friend_name) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id WHERE T1.high_schooler_name  =  ""Kyle"""
network_1,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,Show ids of all students who do not have any friends.,"high schooler, friend, likes","[(1025,), (1641,)]",SELECT high_schooler_id FROM high_schooler EXCEPT SELECT friend FROM Friend
network_1,SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend,What are the ids of high school students who do not have friends?,"high schooler, friend, likes","[(1025,), (1641,)]",SELECT high_schooler_id FROM high_schooler EXCEPT SELECT friend FROM friend
network_1,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,Show names of all high school students who do not have any friends.,"high schooler, friend, likes","[('Brittany',), ('John',)]",SELECT T1.name FROM high_schooler AS T1 EXCEPT SELECT T2.name FROM friend AS T1 JOIN high_schooler AS T2 ON T1.friend_id  =  T2.high_schooler_id
network_1,SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id,What are the names of students who have no friends?,"high schooler, friend, likes","[('Brittany',), ('John',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T2.friend_name  =  T1.name GROUP BY T1.name HAVING count(*)  =  0
network_1,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,Show the ids of high schoolers who have friends and are also liked by someone else.,"high schooler, friend, likes","[(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]",SELECT T1.high_schooler_id FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id JOIN likes AS T3 ON T3.high_schooler_id!= T1.high_schooler_id WHERE T3.high_schooler_id IN (SELECT friend_id FROM friend WHERE high_schooler_id  =  T1.high_schooler_id)<|eot_id|>
network_1,SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes,What are the ids of students who both have friends and are liked?,"high schooler, friend, likes","[(1101,), (1247,), (1304,), (1468,), (1501,), (1689,), (1709,), (1934,)]",SELECT T1.student_id FROM high_schooler AS T1 JOIN friend AS T2 ON T1.student_id  =  T2.friend_id INTERSECT SELECT T1.student_id FROM high_schooler AS T1 JOIN likes AS T2 ON T1.student_id  =  T2.student_id
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,Show name of all students who have some friends and also are liked by someone else.,"high schooler, friend, likes","[('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_school_id  =  T2.high_school_id WHERE T2.friend_id IN (SELECT friend_id FROM likes)
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id,What are the names of high schoolers who both have friends and are liked?,"high schooler, friend, likes","[('Alexis',), ('Cassandra',), ('Gabriel',), ('Haley',), ('Jessica',), ('Jordan',), ('Kris',), ('Kyle',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T2.friend_id  =  T1.high_school_id JOIN likes AS T3 ON T3.like_id  =  T1.high_school_id
network_1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",Count the number of likes for each student id.,"high schooler, friend, likes","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]","COUNT(*), T1.student_id FROM likes AS T1 GROUP BY T1.student_id"
network_1,"SELECT student_id ,  count(*) FROM Likes GROUP BY student_id",How many likes correspond to each student id?,"high schooler, friend, likes","[(1025, 1), (1247, 1), (1316, 1), (1501, 1), (1641, 1), (1689, 1), (1709, 1), (1782, 1), (1911, 1), (1934, 1)]","SELECT count(*),  T1.student_id FROM likes AS T1 JOIN high_schooler AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id"
network_1,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","Show the names of high schoolers who have likes, and numbers of likes for each.","high schooler, friend, likes","[('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]","SELECT T1.name,  count(*) FROM high_schooler AS T1 JOIN likes AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_id"
network_1,"SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id","What are the names of high schoolers who have likes, and how many likes does each have?","high schooler, friend, likes","[('John', 1), ('Alexis', 1), ('Austin', 1), ('Jessica', 1), ('Brittany', 1), ('Gabriel', 1), ('Cassandra', 1), ('Andrew', 1), ('Gabriel', 1), ('Kyle', 1)]","SELECT T1.high_schooler_name,  count(*) FROM high_schooler AS T1 JOIN likes AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_name"
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,What is the name of the high schooler who has the greatest number of likes?,"high schooler, friend, likes","[('John',)]",SELECT T3.high_schooler_name FROM likes AS T1 JOIN friend AS T2 ON T1.friend_id  =  T2.friend_id JOIN high_schooler AS T3 ON T2.high_schooler_id  =  T3.high_schooler_id GROUP BY T3.high_schooler_name ORDER BY count(*) DESC LIMIT 1
network_1,SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1,Give the name of the student with the most likes.,"high schooler, friend, likes","[('John',)]",SELECT T1.name FROM high_schooler AS T1 JOIN likes AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id GROUP BY T1.high_schooler_id ORDER BY count(*) DESC LIMIT 1
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,Show the names of students who have a grade higher than 5 and have at least 2 friends.,"high schooler, friend, likes","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]",SELECT T1.name FROM high_schooler AS T1 JOIN friend AS T2 ON T1.student_id  =  T2.friend_id WHERE T1.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
network_1,SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2,What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?,"high schooler, friend, likes","[('Alexis',), ('Kris',), ('Jordan',), ('Gabriel',), ('Andrew',)]",SELECT T2.name FROM Friend AS T1 JOIN High_Schooler AS T2 ON T1.friend_id  =  T2.high_schooler_id WHERE T1.high_schooler_id IN (SELECT T1.high_schooler_id FROM Friend AS T1 JOIN High_Schooler AS T2 ON T1.friend_id  =  T2.high_schooler_id WHERE T2.grade_points  >  5 GROUP BY T1.high_schooler_id HAVING count(*)  >=  2)<|eot_id|>
network_1,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",How many likes does Kyle have?,"high schooler, friend, likes","[(1,)]","SELECT count(*) FROM likes AS T1 JOIN high_schooler AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id WHERE T2.name  =  ""Kyle"""
network_1,"SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  ""Kyle""",Return the number of likes that the high schooler named Kyle has.,"high schooler, friend, likes","[(1,)]","SELECT count(*) FROM likes AS T1 JOIN high_schooler AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id WHERE T2.high_schooler_name  =  ""Kyle"""
network_1,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),Find the average grade of all students who have some friends.,"high schooler, friend, likes","[(10.428571428571429,)]",SELECT avg(T1.grade) FROM high_schooler AS T1 JOIN friend AS T2 ON T1.high_schooler_id  =  T2.high_schooler_id
network_1,SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),What is the average grade of students who have friends?,"high schooler, friend, likes","[(10.428571428571429,)]",SELECT avg(T1.grade) FROM high_schooler AS T1 JOIN friend AS T2 ON T1	hs_id  =  T2.hs_id
network_1,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),Find the minimum grade of students who have no friends.,"high schooler, friend, likes","[(10,)]",SELECT min(T1.grade) FROM high_schooler AS T1 JOIN friend AS T2 ON T1	hs_id  =  T2.hs_id WHERE T2.friend_id  =  'null'
network_1,SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id),What is the lowest grade of students who do not have any friends?,"high schooler, friend, likes","[(10,)]",SELECT max(grade_point_rating) FROM high_schooler WHERE friend_id = NULL
dog_kennels,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,Which states have both owners and professionals living there?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Indiana',), ('Mississippi',), ('Wisconsin',)]",SELECT T1.state_province_county FROM owners AS T1 JOIN professionals AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.state_province_county HAVING count(*)  >=  2
dog_kennels,SELECT state FROM Owners INTERSECT SELECT state FROM Professionals,Find the states where both owners and professionals live.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Indiana',), ('Mississippi',), ('Wisconsin',)]",SELECT count(*) FROM owners AS T1 JOIN professionals AS T2 ON T1.state_province_county  =  T2.state_province_county
dog_kennels,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),What is the average age of the dogs who have gone through any treatments?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(5.111111111111111,)]",SELECT avg(T1.age) FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id
dog_kennels,SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments ),Find the average age of the dogs who went through treatments.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(5.111111111111111,)]",SELECT avg(T3.age) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id JOIN sizes AS T3 ON T2.size_code  =  T3.size_code
dog_kennels,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]","SELECT T1.professional_id,  T1.professional_last_name,  T1.professional_cell_phone FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T2.treatment_type_id  =  T2.treatment_type_id JOIN Treatments AS T3 ON T3.treatment_type_id  =  T2.treatment_type_id JOIN Dogs AS T4 ON T4.dog_id  =  T3.dog_id JOIN Owners AS T5 ON T5.owner_id  =  T4.owner_id WHERE T5.state_of_residence  =  ""Indiana"" OR T2.treatment_type_count  >  2<|eot_id|>"
dog_kennels,"SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2","Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(1, 'Braun', '(275)939-2435x80863'), (8, 'Hyatt', '328.842.3792'), (9, 'Kshlerin', '962-983-8109x3509')]","SELECT T1.professional_id,  T2.owner_last_name,  T2.owner_cell_phone FROM treatments AS T1 JOIN professionals AS T1 JOIN owners AS T2 ON T1.professional_id  =  T2.owner_id WHERE T2.state_of_residence  =  'Indiana' OR T1.treatment_count  >  2"
dog_kennels,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]",SELECT T1.dog_name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T2.treatment_cost  <  1000
dog_kennels,select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 ),What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Kacey',), ('Hipolito',), ('Mavis',), ('Houston',), ('Jeffrey',), ('Merritt',), ('Narciso',), ('George',), ('Bessie',), ('Betty',), ('Holden',), ('Jesus',)]",SELECT T1.dog_name FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id JOIN owners AS T3 ON T3.owner_id  =  T2.owner_id WHERE T3.total_charges  <  1000
dog_kennels,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,Which first names are used for professionals or owners but are not used as dog names?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]","SELECT T1.professional_first_name,  T1.owner_first_name FROM Professionals AS T1 JOIN Owners AS T2 ON T1.professional_id  =  T2.owner_id EXCEPT SELECT T3.dog_first_name FROM breeds AS T1 JOIN sizes AS T2 ON T1.size_id  =  T2.size_id JOIN dogs AS T3 ON T2.size_description  =  T3.dog_size_description JOIN treatment_types AS T4 ON T3.treatment_type_code  =  T4.treatment_type_code JOIN treatments AS T5 ON T3.treatment_id  =  T5.treatment_id JOIN charges AS T6 ON T3.charge_id  =  T6.charge_id<|eot_id|>"
dog_kennels,SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs,Find the first names that are used for professionals or owners but are not used as dog names.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Adelle',), ('Brady',), ('Cindy',), ('Danny',), ('Domenica',), ('Emelie',), ('Ericka',), ('Gay',), ('Heather',), ('Jaclyn',), ('Jayson',), ('Johann',), ('Kade',), ('Karley',), ('Lesly',), ('Lorenz',), ('Melisa',), ('Monte',), ('Nora',), ('Olaf',), ('Orlando',), ('Rachelle',), ('Rolando',), ('Ruben',), ('Sigurd',), ('Taryn',), ('Tre',), ('Velva',), ('Vernice',), ('Winfield',)]",SELECT T1.owner_first_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.owner_first_name NOT IN (SELECT dog_first_name FROM dogs) INTERSECT SELECT T1.professional_first_name FROM Professionals AS T1 JOIN Dogs AS T2 ON T1.professional_id  =  T2.professional_id WHERE T1.professional_first_name NOT IN (SELECT dog_first_name FROM dogs)
dog_kennels,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","Which professional did not operate any treatment on dogs? List the professional's id, role and email.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]","SELECT T1.professional_id,  T1.profession,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.treatment_provided EXCEPT SELECT T1.professional_id,  T1.profession,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.treatment_provided"
dog_kennels,"SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id","Give me the id, role and email of the professionals who did not perform any treatment on dogs.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(1, 'Employee', 'deanna.schuster@example.com'), (2, 'Employee', 'lucile.shanahan@example.org'), (3, 'Employee', 'uboehm@example.org'), (11, 'Employee', 'west.eula@example.net'), (12, 'Veterenarian', 'marquardt.furman@example.org'), (13, 'Veterenarian', 'delphine29@example.com'), (15, 'Employee', 'jeichmann@example.com')]","SELECT T1.professional_id,  T1.role_description,  T1.professional_email FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.treatment_id IS NULL"
dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","Which owner owns the most dogs? List the owner id, first name and last name.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(14, 'Rachelle', 'Funk')]","SELECT T2.owner_id,  T2.owner_first_name,  T2.owner_last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
dog_kennels,"SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1","Return the owner id, first name and last name of the owner who has the most dogs.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(14, 'Rachelle', 'Funk')]","SELECT T1.owner_id,  T2.customer_first_name,  T2.customer_last_name FROM owners AS T1 JOIN Customers AS T2 ON T1.owner_id  =  T2.customer_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
dog_kennels,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","Which professionals have done at least two treatments? List the professional's id, role, and first name.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]","SELECT T1.professional_id,  T1.professional_role,  T1.professional_first_name FROM Professionals AS T1 JOIN treatments AS T2 ON T2.treatment_provided_by  =  T1.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
dog_kennels,"SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2","What are the id, role, and first name of the professionals who have performed two or more treatments?","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(4, 'Veterenarian', 'Vernice'), (6, 'Veterenarian', 'Ruben'), (8, 'Employee', 'Karley'), (9, 'Veterenarian', 'Monte'), (10, 'Employee', 'Domenica'), (14, 'Employee', 'Sigurd')]","SELECT T1.professional_id,  T1.role_description,  T2.professional_first_nameFROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_idGROUP BY T1.professional_idHAVING count(*)  >=  2"
dog_kennels,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,What is the name of the breed with the most dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Bulldog',)]",SELECT T3.breeds_name FROM dogs AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id JOIN breeds AS T3 ON T1.breed_id  =  T3.breed_id GROUP BY T3.breeds_name ORDER BY count(*) DESC LIMIT 1
dog_kennels,SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1,Which breed do the most dogs have? Give me the breed name.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Bulldog',)]",SELECT T1.breed_name FROM breeds AS T1 JOIN dogs AS T2 ON T1.breed_id  =  T2.breed_id GROUP BY T1.breed_id ORDER BY count(*) DESC LIMIT 1
dog_kennels,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(14, 'Funk')]","SELECT T1.owner_id,  T2.owner_last_name FROM treatments AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"
dog_kennels,"SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1",Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(14, 'Funk')]","SELECT T1.owner_id,  T2.owner_last_name FROM treatments AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.treatment_cost IN (SELECT sum(T1.treatment_cost) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id GROUP BY T2.dog_id ORDER BY sum(T1.treatment_cost) DESC LIMIT 1)<|eot_id|>"
dog_kennels,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,What is the description of the treatment type that costs the least money in total?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Take for a Walk',)]",SELECT T1.treatment_type_description FROM Treatment_Types AS T1 JOIN treatments AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id GROUP BY T1.treatment_type_id ORDER BY sum(T2.treatment_cost) ASC LIMIT 1
dog_kennels,SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1,Give me the description of the treatment type whose total cost is the lowest.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Take for a Walk',)]",SELECT T3.treatment_type_description FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id JOIN sizes AS T3 ON T3.size_id  =  T1.size_id GROUP BY T2.treatment_type_id ORDER BY sum(T1.treatment_cost) ASC LIMIT 1
dog_kennels,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(3, '02647')]","SELECT T1.owner_id,  T2.owner_zip_postcode FROM owners AS T1 JOIN Charges AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.amount_charged) DESC LIMIT 1"
dog_kennels,"SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1",Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(3, '02647')]","SELECT T1.owner_id,  T1.owner_zip_postcode FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY sum(T2.total_charges) DESC LIMIT 1"
dog_kennels,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",Which professionals have done at least two types of treatments? List the professional id and cell phone.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]","SELECT T1.professional_id,  T1.cell_phone FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T2.treatment_type_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
dog_kennels,"SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2",Find the id and cell phone of the professionals who operate two or more types of treatments.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(4, '00230569697'), (6, '139-321-7313'), (8, '328.842.3792'), (9, '962-983-8109x3509'), (10, '461-801-2600'), (14, '1-185-137-1945x409')]","SELECT T1.professional_id,  T1.cell_phone FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",What are the first name and last name of the professionals who have done treatment with cost below average?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', ""O'Reilly""), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]","SELECT T1.professional_first_name,  T1.professional_last_nameFROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id WHERE T2.treatment_cost  <  (SELECT avg(treatment_cost) FROM Treatments)"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )",Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Taryn', 'Braun'), ('Jayson', 'Ullrich'), ('Olaf', 'Watsica'), ('Vernice', 'Tillman'), ('Danny', 'Considine'), ('Ruben', ""O'Reilly""), ('Velva', 'Hayes'), ('Karley', 'Hyatt'), ('Monte', 'Kshlerin'), ('Domenica', 'Jacobs'), ('Brady', 'Pouros'), ('Winfield', 'Christiansen'), ('Ericka', 'Murazik'), ('Sigurd', 'Frami'), ('Lesly', 'Walter')]","SELECT T1.professional_first_name,  T1.professional_last_name FROM Professionals AS T1 JOIN Treatment_Types AS T2 ON T2.treatment_type_id  =  T2.professional_id JOIN Treatments AS T3 ON T3.treatment_type_id  =  T2.treatment_type_id WHERE T3.treatment_cost  <  (SELECT avg(treatment_cost) FROM Treatments)<|eot_id|>"
dog_kennels,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id","List the date of each treatment, together with the first name of the professional who operated it.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]","SELECT date_of_treatment,  T2.professional_first_name FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id"
dog_kennels,"SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id",What are the date and the operating professional's first name of each treatment?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2018-03-19 04:39:54', 'Monte'), ('2018-03-15 20:25:34', 'Domenica'), ('2018-03-08 05:26:23', 'Vernice'), ('2018-03-01 04:14:46', 'Karley'), ('2018-03-23 13:52:10', 'Sigurd'), ('2018-03-11 04:23:15', 'Vernice'), ('2018-03-10 11:45:58', 'Sigurd'), ('2018-03-24 22:25:58', 'Ruben'), ('2018-03-14 19:10:40', 'Domenica'), ('2018-02-28 17:09:43', 'Velva'), ('2018-03-13 12:22:58', 'Danny'), ('2018-03-16 10:27:36', 'Monte'), ('2018-02-26 09:08:53', 'Karley'), ('2018-03-04 20:33:43', 'Monte'), ('2018-03-15 19:10:02', 'Ruben')]","SELECT treatment_date,  operating_professional_first_name FROM treatments"
dog_kennels,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",List the cost of each treatment and the corresponding treatment type description.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]","SELECT T1.treatment_cost,  T2.treatment_type_description FROM treatments AS T1 JOIN Treatment_Types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"
dog_kennels,"SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code",What are the cost and treatment type description of each treatment?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(567, 'Take for a Walk'), (147, 'Vaccination'), (429, 'Physical examination'), (266, 'Vaccination'), (668, 'Vaccination'), (313, 'Physical examination'), (852, 'Physical examination'), (407, 'Physical examination'), (139, 'Take for a Walk'), (681, 'Take for a Walk'), (514, 'Vaccination'), (428, 'Physical examination'), (945, 'Vaccination'), (349, 'Take for a Walk'), (656, 'Take for a Walk')]","SELECT treatment_cost,  treatment_type_description FROM treatments"
dog_kennels,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","List each owner's first name, last name, and the size of his for her dog.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]","SELECT T3.owner_first_name,  T3.owner_last_name,  T2.size_details FROM owners AS T3 JOIN dogs AS T2 ON T2.owner_id  =  T3.owner_id"
dog_kennels,"SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id","What are each owner's first name, last name, and the size of their dog?","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Jaclyn', 'Stoltenberg', 'LGE'), ('Gay', 'Feil', 'LGE'), ('Nora', 'Haley', 'MED'), ('Rachelle', 'Funk', 'LGE'), ('Emelie', 'Mertz', 'MED'), ('Johann', 'Fisher', 'MED'), ('Jaclyn', 'Stoltenberg', 'MED'), ('Rachelle', 'Funk', 'SML'), ('Melisa', 'DuBuque', 'MED'), ('Kade', 'Rippin', 'MED'), ('Cindy', 'Schmitt', 'LGE'), ('Orlando', 'Price', 'MED'), ('Rolando', 'Prohaska', 'SML'), ('Rachelle', 'Funk', 'MED'), ('Lorenz', 'Nicolas', 'MED')]","SELECT T1.owner_first_name,  T1.owner_last_name,  T3.size_description FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN sizes AS T3 ON T2.dog_size  =  T3.size_code"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",List pairs of the owner's first name and the dogs's name.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]","SELECT T1.owner_first_name,  T2.dog_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id",What are each owner's first name and their dogs's name?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Jaclyn', 'Kacey'), ('Gay', 'Hipolito'), ('Nora', 'Mavis'), ('Rachelle', 'Houston'), ('Emelie', 'Jeffrey'), ('Johann', 'Merritt'), ('Jaclyn', 'Narciso'), ('Rachelle', 'George'), ('Melisa', 'Bessie'), ('Kade', 'Troy'), ('Cindy', 'Betty'), ('Orlando', 'Holden'), ('Rolando', 'Jesus'), ('Rachelle', 'Lyric'), ('Lorenz', 'Evangeline')]","SELECT T3.owner_first_name,  T2.dog_name FROM owners AS T3 JOIN dogs AS T2 ON T3.owner_id  =  T2.owner_id"
dog_kennels,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",List the names of the dogs of the rarest breed and the treatment dates of them.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]","SELECT T1.dog_name,  T1.date_treatment FROM dogs AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id JOIN breeds AS T3 ON T1.breed_id  =  T3.breed_id WHERE T3.breed_rarity  =  'Rare'"
dog_kennels,"SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",Which dogs are of the rarest breed? Show their names and treatment dates.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Lyric', '2018-03-19 04:39:54'), ('Houston', '2018-03-15 20:25:34'), ('Lyric', '2018-03-08 05:26:23'), ('Lyric', '2018-03-14 19:10:40'), ('Kacey', '2018-03-15 19:10:02')]","SELECT T1.dog_name,  T4.treatment_date FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id JOIN treatment_types AS T3 ON T1.treatment_type_id  =  T3.treatment_type_id JOIN breeds AS T4 ON T4.breed_id  =  T2.breed_id WHERE T4.breed_rarity  =  'Rare'<|eot_id|>"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Melisa', 'Bessie')]","SELECT T1.owner_first_name,  T2.dog_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state_province_county  =  'Virginia'"
dog_kennels,"SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'",Find the first names of owners living in Virginia and the names of dogs they own.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Melisa', 'Bessie')]","SELECT T1.owner_first_name,  T3.dog_name FROM owners AS T1 JOIN dogs AS T3 ON T1.owner_id  =  T3.owner_id WHERE T1.state_province_county  =  'Virginia'"
dog_kennels,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",What are the arriving date and the departing date of the dogs who have gone through a treatment?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]","SELECT T1.arrival_date,  T1.departure_date FROM dogs AS T1 JOIN treatments AS T2 ON T1.dog_id  =  T2.dog_id"
dog_kennels,"SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id",Find the arriving date and the departing date of the dogs that received a treatment.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-09-08 20:10:13', '2018-03-25 06:58:44')]","SELECT T1.arrival_date,  T1.departure_date FROM dogs AS T1 JOIN treatments AS T2 ON T2.dog_id  =  T1.dog_id"
dog_kennels,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),List the last name of the owner owning the youngest dog.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Feil',), ('Fisher',), ('Rippin',)]",SELECT T1.owner_last_name FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id ORDER BY T2.dog_age ASC LIMIT 1
dog_kennels,SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs ),Who owns the youngest dog? Give me his or her last name.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Feil',), ('Fisher',), ('Rippin',)]",SELECT T3.owner_last_name FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id JOIN sizes AS T3 ON T3.size_id  =  T1.size_id ORDER BY T1.born DESC LIMIT 1
dog_kennels,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('uboehm@example.org',), ('mekhi.little@example.org',)]","SELECT email_address FROM Professionals WHERE state_province_county  =  ""Hawaii"" OR state_province_county  =  ""Wisconsin"""
dog_kennels,SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin',What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('uboehm@example.org',), ('mekhi.little@example.org',)]","SELECT T1.professional_email FROM Professionals AS T1 JOIN Owners AS T2 ON T1.professional_id  =  T2.owner_id WHERE T2.state_province_county  =  ""Hawaii"" OR T2.state_province_county  =  ""Wisconsin"""
dog_kennels,"SELECT date_arrived ,  date_departed FROM Dogs",What are the arriving date and the departing date of all the dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]","SELECT arriving_date,  departing_date FROM dogs"
dog_kennels,"SELECT date_arrived ,  date_departed FROM Dogs",List the arrival date and the departure date for all the dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('2017-09-08 20:10:13', '2018-03-25 06:58:44'), ('2017-12-22 05:02:02', '2018-03-25 02:11:32'), ('2017-06-25 10:14:05', '2018-03-25 10:25:46'), ('2017-04-20 00:58:55', '2018-03-24 19:12:22'), ('2017-10-25 00:55:34', '2018-03-25 04:50:22'), ('2017-04-15 09:25:31', '2018-03-25 13:07:04'), ('2017-05-06 08:03:52', '2018-03-25 06:29:10'), ('2017-10-16 20:06:21', '2018-03-25 02:47:40'), ('2018-01-17 11:44:16', '2018-03-25 06:46:07'), ('2017-12-29 06:08:26', '2018-03-25 04:42:14'), ('2017-07-25 15:19:07', '2018-03-25 15:05:16'), ('2017-10-24 04:45:13', '2018-03-25 14:15:41'), ('2018-01-02 03:15:29', '2018-03-25 05:07:47'), ('2017-06-18 19:45:38', '2018-03-24 23:48:59'), ('2017-12-29 23:24:13', '2018-03-24 19:36:59')]","SELECT arrival_date,  departure_date FROM dogs"
dog_kennels,SELECT count(DISTINCT dog_id) FROM Treatments,How many dogs went through any treatments?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(9,)]",SELECT count(*) FROM treatments AS T1 JOIN dogs AS T2 ON T1.dog_id  =  T2.dog_id
dog_kennels,SELECT count(DISTINCT dog_id) FROM Treatments,Count the number of dogs that went through a treatment.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(9,)]",SELECT count(*) FROM treatments
dog_kennels,SELECT count(DISTINCT professional_id) FROM Treatments,How many professionals have performed any treatment to dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(8,)]",SELECT count(DISTINCT T2.professional_id) FROM treatments AS T1 JOIN professionals AS T2 ON T1.professional_id  =  T2.professional_id
dog_kennels,SELECT count(DISTINCT professional_id) FROM Treatments,Find the number of professionals who have ever treated dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(8,)]",SELECT count(DISTINCT T2.professional_id) FROM treatments AS T1 JOIN professionals AS T2 ON T1.treatment_provided_by_professional_id = T2.professional_id
dog_kennels,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]","SELECT T1.professional_role,  T1.professional_street_address,  T1.professional_city,  T1.professional_state FROM Professionals AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.owner_city LIKE '%West%'"
dog_kennels,"SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'","Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Employee', '6915 Oberbrunner Point Suite 491\nGleasonville, LA ', 'West Heidi', 'Indiana')]","SELECT T1.professional_role_code,  T2.owner_street_address,  T2.owner_city,  T2.owner_state_province FROM professionals AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.owner_city LIKE '%West%'"
dog_kennels,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]","SELECT T1.owner_first_name,  T1.owner_last_name,  T1.owner_email FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.state_of_residence LIKE '%North%'"
dog_kennels,"SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'","Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Johann', 'Fisher', 'zboncak.madonna@example.net'), ('Cindy', 'Schmitt', 'wpfeffer@example.net')]","SELECT T1.owner_first_name,  T1.owner_last_name,  T1.owner_email FROM owners AS T1 JOIN dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN sizes AS T3 ON T2.size  =  T3.size WHERE T3.state_of_ownership LIKE '%North%'<|eot_id|>"
dog_kennels,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),How many dogs have an age below the average?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(9,)]",SELECT count(*) FROM dogs WHERE age_in_days  <  (SELECT avg(age_in_days) FROM dogs)
dog_kennels,SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs ),Count the number of dogs of an age below the average.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(9,)]",SELECT count(*) FROM dogs WHERE age_in_years  <  (SELECT avg(age_in_years) FROM dogs)
dog_kennels,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,How much does the most recent treatment cost?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(407,)]",SELECT sum(T1.treatment_cost) FROM treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id ORDER BY T1.date_treatment DESC LIMIT 1<|eot_id|>
dog_kennels,SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1,Show me the cost of the most recently performed treatment.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(407,)]",SELECT charge_amount FROM charges JOIN treatments ON treatments.charges_id  =  charges.charges_id ORDER BY treatment_date DESC LIMIT 1
dog_kennels,SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments ),How many dogs have not gone through any treatment?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(6,)]",SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
dog_kennels,select count(*) from dogs where dog_id not in ( select dog_id from treatments ),Tell me the number of dogs that have not received any treatment .,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(6,)]",SELECT count(*) FROM dogs WHERE dog_id NOT IN (SELECT dog_id FROM treatments)
dog_kennels,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),How many owners temporarily do not have any dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(3,)]",SELECT count(*) FROM owners WHERE temporary_owner  =  'Yes' AND dog_id IS NULL
dog_kennels,SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs ),Find the number of owners who do not own any dogs at this moment.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(3,)]",SELECT count(*) FROM owners WHERE owner_id NOT IN (SELECT owner_id FROM dogs)
dog_kennels,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),How many professionals did not operate any treatment on dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(7,)]",SELECT count(*) FROM professionals WHERE professional_id NOT IN(SELECT professional_id FROM treatments)
dog_kennels,SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments ),Find the number of professionals who have not treated any dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(7,)]",SELECT count(*) FROM professionals WHERE professional_id NOT IN(SELECT professional_id FROM treatments)
dog_kennels,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]","SELECT T1.dog_name,  T1.dog_age,  T1.dog_weight FROM dogs AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id WHERE T2.treatment_type_code  =  'Abandoned'<|eot_id|>"
dog_kennels,"SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1","What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Kacey', '6', '7.57'), ('Lyric', '4', '4.36'), ('Evangeline', '1', '4.01')]","SELECT T1.dog_name,  T1.age,  T1.weight FROM dogs AS T1 JOIN owners AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.abandoned  =  1"
dog_kennels,SELECT avg(age) FROM Dogs,What is the average age of all the dogs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(5.066666666666666,)]",SELECT avg(T1.dog_age) FROM sizes AS T1 JOIN dogs AS T2 ON T1.size_id  =  T2.size_id
dog_kennels,SELECT avg(age) FROM Dogs,Compute the average age of all the dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(5.066666666666666,)]",SELECT avg(T1.dog_age) FROM dogs AS T1
dog_kennels,SELECT max(age) FROM Dogs,What is the age of the oldest dog?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('9',)]",SELECT T1.dog_age FROM sizes AS T1 JOIN dogs AS T2 ON T1.size_code  =  T2.size_code ORDER BY T1.dog_age DESC LIMIT 1
dog_kennels,SELECT max(age) FROM Dogs,Tell me the age of the oldest dog.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('9',)]",SELECT T1.age FROM sizes AS T1 JOIN dogs AS T2 ON T1.size_id  =  T2.size_id ORDER BY T1.age DESC LIMIT 1
dog_kennels,"SELECT charge_type ,  charge_amount FROM Charges",How much does each charge type costs? List both charge type and amount.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]","SELECT charge_type,  amount FROM charges"
dog_kennels,"SELECT charge_type ,  charge_amount FROM Charges",List each charge type and its amount.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Daily Accommodation', 98), ('Drugs', 322), ('Health Check', 640)]","SELECT charge_type,  amount FROM Charges"
dog_kennels,SELECT max(charge_amount) FROM Charges,How much does the most expensive charge type costs?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(640,)]",SELECT max(Charge_amount) FROM Charges GROUP BY Charge_type_code
dog_kennels,SELECT max(charge_amount) FROM Charges,What is the charge amount of the most expensive charge type?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[(640,)]",SELECT charge_amount FROM charges GROUP BY charge_type_code ORDER BY sum(charge_amount) DESC LIMIT 1
dog_kennels,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","List the email, cell phone and home phone of all the professionals.","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]","SELECT email_address,  cell_phone,  home_phone FROM professionals"
dog_kennels,"SELECT email_address ,  cell_number ,  home_phone FROM professionals","What are the email, cell phone and home phone of each professional?","breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('deanna.schuster@example.com', '(275)939-2435x80863', '+71(6)2898266914'), ('lucile.shanahan@example.org', '889-940-2676', '+02(1)0259033559'), ('uboehm@example.org', '(369)908-7311x065', '325-155-0801x7005'), ('lourdes.lowe@example.net', '00230569697', '312.216.3352'), ('mekhi.little@example.org', '011.193.9081x3186', '1-609-566-2752x25197'), ('jacynthe.mclaughlin@example.net', '139-321-7313', '+43(5)1132733868'), ('lambert62@example.org', '499-434-0215x1628', '022.529.0550x1319'), ('goyette.roosevelt@example.net', '328.842.3792', '891.475.2256'), ('schneider.kathryne@example.org', '962-983-8109x3509', '320-508-6023'), ('jerrod.bahringer@example.org', '461-801-2600', '(230)338-3342x585'), ('west.eula@example.net', '609-405-2990', '(920)304-4499x59146'), ('marquardt.furman@example.org', '1-181-670-9466', '246-951-0080x76716'), ('delphine29@example.com', '880-659-7577x736', '346.594.3739'), ('cole.margarita@example.org', '1-185-137-1945x409', '971.048.3763x9404'), ('jeichmann@example.com', '1-258-285-4707x8020', '1-138-287-3775')]","SELECT T1.professional_email_address,  T1.professional_cell_phone,  T1.professional_home_phoneFROM professionals AS T1"
dog_kennels,"SELECT DISTINCT breed_code ,  size_code FROM dogs",What are all the possible breed type and size type combinations?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]","SELECT T1.breed_type,  T2.size_type FROM breeds AS T1 JOIN sizes AS T2 ON T1.size_id  =  T2.size_id"
dog_kennels,"SELECT DISTINCT breed_code ,  size_code FROM dogs",Find the distinct breed type and size type combinations for dogs.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('ESK', 'LGE'), ('BUL', 'LGE'), ('BUL', 'MED'), ('HUS', 'MED'), ('ESK', 'SML'), ('HUS', 'SML'), ('ESK', 'MED')]","SELECT DISTINCT T1.breed_type,  T2.size_type FROM breeds AS T1 JOIN sizes AS T2 ON T1.size_id  =  T2.size_id"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",List the first name of all the professionals along with the description of the treatment they have done.,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]","SELECT T1.professional_first_name,  T4.treatment_description FROM professionals AS T1 JOIN treatments AS T2 ON T1.professional_id  =  T2.treatment_provided_by JOIN treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code JOIN treatment_details AS T4 ON T4.treatment_detail_id  =  T2.treatment_detail_id<|eot_id|>"
dog_kennels,"SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code",What are each professional's first name and description of the treatment they have performed?,"breeds, charges, sizes, treatment types, owners, dogs, professionals, treatments","[('Monte', 'Take for a Walk'), ('Domenica', 'Vaccination'), ('Vernice', 'Physical examination'), ('Karley', 'Vaccination'), ('Sigurd', 'Vaccination'), ('Sigurd', 'Physical examination'), ('Ruben', 'Physical examination'), ('Domenica', 'Take for a Walk'), ('Velva', 'Take for a Walk'), ('Danny', 'Vaccination'), ('Monte', 'Physical examination'), ('Ruben', 'Take for a Walk')]","SELECT T1.professional_first_name,  T3.treatment_description FROM professionals AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_id  =  T2.treatment_type_id JOIN treatments AS T3 ON T2.treatment_type_id  =  T3.treatment_type_id"
singer,SELECT count(*) FROM singer,How many singers are there?,"singer, song","[(8,)]",SELECT count(*) FROM singer
singer,SELECT count(*) FROM singer,What is the count of singers?,"singer, song","[(8,)]",SELECT count(*) FROM singer
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,List the name of singers in ascending order of net worth.,"singer, song","[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]",SELECT singer_name FROM singer ORDER BY net_worth ASC
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC,What are the names of singers ordered by ascending net worth?,"singer, song","[('Abigail Johnson',), ('Susanne Klatten',), ('Gina Rinehart',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Alice Walton',), ('Christy Walton',), ('Liliane Bettencourt',)]",SELECT singer_name FROM singer ORDER BY dollars_billion ASC
singer,"SELECT Birth_Year ,  Citizenship FROM singer",What are the birth year and citizenship of singers?,"singer, song","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]","SELECT birth_year,  citizenship FROM singer"
singer,"SELECT Birth_Year ,  Citizenship FROM singer",What are the birth years and citizenships of the singers?,"singer, song","[(1944.0, 'France'), (1948.0, 'United States'), (1949.0, 'United States'), (1942.0, 'Chile'), (1940.0, 'United States'), (1953.0, 'Australia'), (1962.0, 'Germany'), (1961.0, 'United States')]","SELECT birth_year,  citizenship FROM singer"
singer,"SELECT Name FROM singer WHERE Citizenship != ""France""","List the name of singers whose citizenship is not ""France"".","singer, song","[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]","SELECT name FROM singer WHERE citizenship!= ""France"""
singer,"SELECT Name FROM singer WHERE Citizenship != ""France""",What are the names of the singers who are not French citizens?,"singer, song","[('Christy Walton',), ('Alice Walton',), ('Iris Fontbona',), ('Jacqueline Mars',), ('Gina Rinehart',), ('Susanne Klatten',), ('Abigail Johnson',)]",SELECT name FROM singer WHERE nationality!= 'French'
singer,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,Show the name of singers whose birth year is either 1948 or 1949?,"singer, song","[('Christy Walton',), ('Alice Walton',)]",SELECT singer_name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
singer,SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949,What are the names of the singers whose birth years are either 1948 or 1949?,"singer, song","[('Christy Walton',), ('Alice Walton',)]",SELECT singer_name FROM singer WHERE birth_year  =  1948 OR birth_year  =  1949
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,What is the name of the singer with the largest net worth?,"singer, song","[('Liliane Bettencourt',)]",SELECT name FROM singer ORDER BY net_worth DESC LIMIT 1
singer,SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1,What is the name of the singer who is worth the most?,"singer, song","[('Liliane Bettencourt',)]",SELECT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id ORDER BY sum(T2.song_purchases) DESC LIMIT 1<|eot_id|>
singer,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship",Show different citizenship of singers and the number of singers of each citizenship.,"singer, song","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]","SELECT T1.citizenship,  count(*) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.citizenship"
singer,"SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship","For each citizenship, how many singers are from that country?","singer, song","[('Australia', 1), ('Chile', 1), ('France', 1), ('Germany', 1), ('United States', 4)]","SELECT citizenship,  count(*) FROM singer GROUP BY citizenship"
singer,SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1,Please show the most common citizenship of singers.,"singer, song","[('United States',)]",SELECT T1.citizenship FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.citizenship ORDER BY count(*) DESC LIMIT 1<|eot_id|>
singer,select citizenship from singer group by citizenship order by count(*) desc limit 1,What is the most common singer citizenship ?,"singer, song","[('United States',)]",SELECT T1.citizenship FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.citizenship ORDER BY count(*) DESC LIMIT 1<|eot_id|>
singer,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship",Show different citizenships and the maximum net worth of singers of each citizenship.,"singer, song","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]","SELECT max(T1.net_worth),  T1.citizenship FROM singer AS T1 GROUP BY T1.citizenship"
singer,"SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship","For each citizenship, what is the maximum net worth?","singer, song","[('Australia', 17.0), ('Chile', 17.4), ('France', 30.0), ('Germany', 14.3), ('United States', 28.8)]","SELECT max(T1.net_worth),  T1.citizenship FROM singer AS T1 GROUP BY T1.citizenship"
singer,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",Show titles of songs and names of singers.,"singer, song","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]","SELECT T2.song_title,  T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id"
singer,"SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID",What are the song titles and singer names?,"singer, song","[(""Do They Know It's Christmas"", 'Liliane Bettencourt'), (""F**k It (I Don't Want You Back)"", 'Liliane Bettencourt'), ('Cha Cha Slide', 'Christy Walton'), ('Call on Me', 'Iris Fontbona'), ('Yeah', 'Christy Walton'), ('All This Time', 'Gina Rinehart'), ('Left Outside Alone', 'Jacqueline Mars'), ('Mysterious Girl', 'Susanne Klatten')]","SELECT T1.song_title,  T2.singer_name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id"
singer,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,Show distinct names of singers that have songs with sales more than 300000.,"singer, song","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]",SELECT DISTINCT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.sales_in_billions  >  300000
singer,SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000,what are the different names of the singers that have sales more than 300000?,"singer, song","[('Liliane Bettencourt',), ('Christy Walton',), ('Iris Fontbona',)]",SELECT DISTINCT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T2.sales_in_billions  >  0.3
singer,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,Show the names of singers that have more than one song.,"singer, song","[('Christy Walton',), ('Liliane Bettencourt',)]",SELECT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id HAVING count(*)  >  1
singer,SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1,What are the names of the singers that have more than one songs?,"singer, song","[('Christy Walton',), ('Liliane Bettencourt',)]",SELECT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_id HAVING count(*)  >  1
singer,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name",Show the names of singers and the total sales of their songs.,"singer, song","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]","SELECT T1.singer_name,  sum(T2.sales) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_name"
singer,"SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name","For each singer name, what is the total sales for their songs?","singer, song","[('Christy Walton', 651421.0), ('Gina Rinehart', 292000.0), ('Iris Fontbona', 335000.0), ('Jacqueline Mars', 275000.0), ('Liliane Bettencourt', 1646407.0), ('Susanne Klatten', 261000.0)]","SELECT T1.singer_name,  sum(T2.sales_in_dollar) FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T1.singer_name"
singer,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),List the name of singers that do not have any song.,"singer, song","[('Alice Walton',), ('Abigail Johnson',)]",SELECT singer_name FROM singer EXCEPT SELECT T1.singer_name FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id
singer,SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song),What is the sname of every sing that does not have any song?,"singer, song","[('Alice Walton',), ('Abigail Johnson',)]",SELECT name FROM singer EXCEPT SELECT T2.singer_name FROM song AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id
singer,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,Show the citizenship shared by singers with birth year before 1945 and after 1955.,"singer, song","[('United States',)]",SELECT citizenship FROM singer WHERE birth_year  <  1945 INTERSECT SELECT citizenship FROM singer WHERE birth_year  >  1955
singer,SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955,What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?,"singer, song","[('United States',)]",SELECT T1.citizenship FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.birth_year  <  1945 INTERSECT SELECT T1.citizenship FROM singer AS T1 JOIN song AS T2 ON T1.singer_id  =  T2.singer_id WHERE T1.birth_year  >  1955
real_estate_properties,SELECT count(*) FROM Other_Available_Features,How many available features are there in total?,"reference feature types, reference property types, other available features, properties, other property features","[(3,)]",SELECT count(*) FROM available_features
real_estate_properties,"SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  ""AirCon""",What is the feature type name of feature AirCon?,"reference feature types, reference property types, other available features, properties, other property features","[('Amenity, eg Pool.',)]","SELECT T1.feature_type_name FROM Ref_Feature_Types AS T1 JOIN Other_Available_Features AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T2.feature_name  =  ""AirCon"""
real_estate_properties,SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code,Show the property type descriptions of properties belonging to that code.,"reference feature types, reference property types, other available features, properties, other property features","[('Apartment, Flat, Condo, etc.',), ('Field, Meadow.',), ('House, Bungalow, etc.',), ('Other, to be determined.',), ('Shop, Retail Outlet.',)]",SELECT T1.property_type_description FROM Ref_Property_Types AS T1 JOIN Properties AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T2.property_type_code ORDER BY count(*) DESC LIMIT 1
real_estate_properties,"SELECT property_name FROM Properties WHERE property_type_code  =  ""House"" UNION SELECT property_name FROM Properties WHERE property_type_code  =  ""Apartment"" AND room_count  >  1",What are the names of properties that are either houses or apartments with more than 1 room?,"reference feature types, reference property types, other available features, properties, other property features","[('longacre',), ('parc coliseum',), ('parc east',), ('park',), ('renoir',), ('ten tower',), ('the cole',), ('vogue',)]",SELECT T1.property_name FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code JOIN Other_Property_Features AS T3 ON T1.property_id  =  T3.property_id WHERE T2.property_type_name  =  'House' OR T2.property_type_name  =  'Apartment' AND T3.number_of_rooms  >  1<|eot_id|>
